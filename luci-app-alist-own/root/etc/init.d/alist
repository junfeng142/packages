#!/bin/sh /etc/rc.common
# Copyright (C) 2019 [CTCGFW] Project OpenWRT

START=99
USE_PROCD=1

CONFIG="alist"

config_t_get() {
	local index=0
	[ -n "$4" ] && index=$4
	local ret=$(uci get $CONFIG.@$1[$index].$2 2>/dev/null)
	echo ${ret:=$3}
}

ENABLED=$(config_t_get alist enable)
ADDRTYPE=$(config_t_get alist addrtype)
PORT=$(config_t_get alist port)
SSL_EN=$(config_t_get alist ssl)
CERTDIR=$(config_t_get alist ssl_cert)
KEYDIR=$(config_t_get alist ssl_key)
TMPDIR=$(config_t_get alist temp_dir)
LOG_EN=$(config_t_get alist log)
PROGDIR=$(echo -n $(uci get alist.@alist[0].project_path) | sed 's/\/$//')
PROG="$PROJDIR/alist"
CONFIG="$PROJDIR/alist.json"

set_firewall() {
	if [ "$external_access" = "allow" ]; then
		uci -q delete firewall.alist
		uci set firewall.alist=rule
		uci set firewall.alist.name="alist"
		uci set firewall.alist.target="ACCEPT"
		uci set firewall.alist.src="wan"
		uci set firewall.alist.proto="tcp"
		uci set firewall.alist.dest_port="$PORT"
		uci set firewall.alist.enabled="1"
		uci commit firewall
		/etc/init.d/firewall reload >/dev/null 2>&1
	elif [ "$external_access" = "deny" ]; then
		uci -q delete firewall.alist
		uci commit firewall
		/etc/init.d/firewall reload >/dev/null 2>&1
	fi
}

start_service() {
	[ $ENABLED != 1 ] && return 1
	mkdir -p $TMPDIR
	if [ "$ADDRTYPE" == "lan" ];then
		listen_addr="$(uci get network.lan.ipaddr)"
		external_access="deny"
	else
		listen_addr="0.0.0.0"
		external_access="allow"
	fi
	set_firewall
	cat /dev/null > $TMPDIR/alist.log
	cat > $CONFIG <<EOF
{
  "force": false,
  "address": "$listen_addr",
  "port": $PORT,
  "jwt_secret": "random generated",
  "token_expires_in": 48,
  "site_url": "",
  "cdn": "",
  "database": {
    "type": "sqlite3",
    "host": "",
    "port": 0,
    "user": "",
    "password": "",
    "name": "",
    "db_file": "$PROGDIR/alist.db",
    "table_prefix": "x_",
    "ssl_mode": ""
  },
  "scheme": {
    "https": $SSL_EN,
    "cert_file": "$CERTDIR",
    "key_file": "$KEYDIR"
  },
  "temp_dir": "$TMPDIR",
  "log": {
    "enable": $LOG_EN,
    "name": "$TMPDIR/alist.log",
    "max_size": 10,
    "max_backups": 5,
    "max_age": 28,
    "compress": false
  }
}
EOF
	procd_open_instance alist
	procd_set_param command $PROG
	procd_append_param command server --conf $CONFIG
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn
	procd_close_instance alist
}

service_triggers() {
	procd_add_reload_trigger "alist"
}

stop_service() {
	external_access="deny"
	set_firewall
}

reload_service() {
	stop
	start
}
