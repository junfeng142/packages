diff -uprN a/package/own/chinadns-ng/Makefile b/package/own/chinadns-ng/Makefile
--- a/package/own/chinadns-ng/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/chinadns-ng/Makefile	2022-11-23 19:47:02.391359839 +0800
@@ -0,0 +1,40 @@
+# SPDX-License-Identifier: GPL-3.0-only
+#
+# Copyright (C) 2021 ImmortalWrt.org
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=chinadns-ng
+PKG_VERSION:=1.0-beta.25
+PKG_RELEASE:=21
+
+PKG_SOURCE_PROTO:=git
+PKG_SOURCE_URL:=https://github.com/zfl9/chinadns-ng.git
+PKG_SOURCE_DATE:=2021-05-08
+PKG_SOURCE_VERSION:=e7c4ebd64af2690a153fb0e16a5f543d185545d6
+PKG_MIRROR_HASH:=skip
+
+PKG_LICENSE:=AGPL-3.0-only
+PKG_LICENSE_FILES:=LICENSE
+PKG_MAINTAINER:=pexcn <i@pexcn.me>
+
+PKG_BUILD_PARALLEL:=1
+PKG_INSTALL:=1
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/chinadns-ng
+  SECTION:=net
+  CATEGORY:=Network
+  SUBMENU:=IP Addresses and Names
+  TITLE:=ChinaDNS next generation, refactoring with epoll and ipset.
+  URL:=https://github.com/zfl9/chinadns-ng
+  DEPENDS:=+ipset
+endef
+
+define Package/chinadns-ng/install
+	$(INSTALL_DIR) $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/chinadns-ng $(1)/usr/bin
+endef
+
+$(eval $(call BuildPackage,chinadns-ng))
diff -uprN a/package/own/hysteria/Makefile b/package/own/hysteria/Makefile
--- a/package/own/hysteria/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/hysteria/Makefile	2022-11-23 19:47:42.243912569 +0800
@@ -0,0 +1,53 @@
+# SPDX-License-Identifier: GPL-3.0-only
+#
+# Copyright (C) 2021 ImmortalWrt.org
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=hysteria
+PKG_VERSION:=1.3.0
+PKG_RELEASE:=37
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=https://codeload.github.com/apernet/hysteria/tar.gz/v$(PKG_VERSION)?
+PKG_HASH:=skip
+
+PKG_LICENSE:=MIT
+PKG_LICENSE_FILE:=LICENSE
+PKG_MAINTAINER:=Tianling Shen <cnsztl@immortalwrt.org>
+
+PKG_BUILD_DEPENDS:=golang/host
+PKG_BUILD_PARALLEL:=1
+PKG_USE_MIPS16:=0
+
+GO_PKG:=github.com/HyNetwork/hysteria
+GO_PKG_BUILD_PKG:=$(GO_PKG)/cmd
+GO_PKG_LDFLAGS_X:=main.appVersion=$(PKG_VERSION)
+
+include $(INCLUDE_DIR)/package.mk
+include $(TOPDIR)/feeds/packages/lang/golang/golang-package.mk
+
+define Package/hysteria
+  SECTION:=net
+  CATEGORY:=Network
+  TITLE:=A feature-packed network utility optimized for networks of poor quality
+  URL:=https://github.com/apernet/hysteria
+  DEPENDS:=$(GO_ARCH_DEPENDS) +ca-bundle
+endef
+
+define Package/hysteria/description
+  Hysteria is a feature-packed network utility optimized for networks
+  of poor quality (e.g. satellite connections, congested public Wi-Fi,
+  connecting from China to servers abroad) powered by a custom version
+  of QUIC protocol.
+endef
+
+define Package/hysteria/install
+	$(call GoPackage/Package/Install/Bin,$(PKG_INSTALL_DIR))
+
+	$(INSTALL_DIR) $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/usr/bin/cmd $(1)/usr/bin/hysteria
+endef
+
+$(eval $(call GoBinPackage,hysteria))
+$(eval $(call BuildPackage,hysteria))
diff -uprN a/package/own/kcptun/files/kcptun.config b/package/own/kcptun/files/kcptun.config
--- a/package/own/kcptun/files/kcptun.config	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/kcptun/files/kcptun.config	2022-11-22 21:00:46.185048000 +0800
@@ -0,0 +1,43 @@
+config server
+	option disabled 1
+	option listen 29900
+	option target '127.0.0.1'
+	option target_port 12948
+	option crypt 'aes'
+	option key 'secret'
+	option mode 'fast'
+	option datashard 10
+	option parityshard 3
+	option dscp 46
+	option nocomp 1
+	option snmplog '/var/log/snmp.log'
+	option snmpperiod 60
+	option pprof 1
+	option quiet 1
+	option syslog 1
+	option user nobody
+
+config client
+	option disabled 1
+	option bind_address '0.0.0.0'
+	option local_port 12948
+	option server 'vps'
+	option server_port 29900
+	option crypt 'aes'
+	option key 'secret'
+	option mode 'fast'
+	option conn 1
+	option autoexpire 0
+	option scavengettl 600
+	option mtu 1350
+	option sndwnd 128
+	option rcvwnd 512
+	option nocomp 1
+	option sockbuf 4194304
+	option smuxver 1
+	option smuxbuf 4194304
+	option streambuf 2097152
+	option keepalive 10
+	option quiet 1
+	option gogc 20
+	option user nobody
diff -uprN a/package/own/kcptun/files/kcptun.init b/package/own/kcptun/files/kcptun.init
--- a/package/own/kcptun/files/kcptun.init	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/kcptun/files/kcptun.init	2022-11-22 21:00:46.185048000 +0800
@@ -0,0 +1,174 @@
+#!/bin/sh /etc/rc.common
+#
+# Copyright (C) 2019 Chao Liu <expiron18@gmail.com>
+#
+# This is free software, licensed under the GNU General Public License v3.
+# See /LICENSE for more information.
+#
+
+USE_PROCD=1
+START=99
+
+confdir=/var/etc/kcptun
+bindir=/usr/bin
+
+mkjson_server_conf() {
+	[ "$disabled" = 0 ] || return 1
+	[ -n "$listen" ] || return 1
+	[ -n "$target" ] || return 1
+	[ -n "$target_port" ] || return 1
+	json_add_string listen ":$listen"
+	json_add_string target "$target:$target_port"
+	json_add_boolean pprof "$pprof"
+}
+
+mkjson_client_conf() {
+	[ "$disabled" = 0 ] || return 1
+	[ -n "$local_port" ] || return 1
+	[ -n "$server" ] || return 1
+	[ -n "$server_port" ] || return 1
+	json_add_string localaddr "$bind_address:$local_port"
+	json_add_string remoteaddr "$server:$server_port"
+	[ -z "$conn" ] || json_add_int conn "$conn"
+	[ -z "$autoexpire" ] || json_add_int autoexpire "$autoexpire"
+	[ -z "$scavengettl" ] || json_add_int scavengettl "$scavengettl"
+}
+
+kcptun() {
+	local cfg="$1"
+	local cfgtype="$2"
+	local bin="$bindir/kcptun-$cfgtype"
+	local confjson="$confdir/$cfgtype.$cfg.json"
+
+	[ -x "$bin" ] || return
+	eval "$("validate_${cfgtype}_section" "$cfg" validate_mklocal)"
+	"validate_${cfgtype}_section" "$cfg" || return
+	[ "$disabled" = 0 ] || return
+
+	json_init
+	mkjson_${cfgtype}_conf || return
+	[ -z "$crypt" ] || json_add_string crypt "$crypt"
+	[ -z "$key" ] || json_add_string key "$key"
+	[ -z "$mode" ] || json_add_string mode "$mode"
+	[ -z "$mtu" ] || json_add_int mtu "$mtu"
+	[ -z "$sndwnd" ] || json_add_int sndwnd "$sndwnd"
+	[ -z "$rcvwnd" ] || json_add_int rcvwnd "$rcvwnd"
+	[ -z "$datashard" ] || json_add_int datashard "$datashard"
+	[ -z "$parityshard" ] || json_add_int parityshard "$parityshard"
+	[ -z "$dscp" ] || json_add_int dscp "$dscp"
+	json_add_boolean nocomp "$nocomp"
+	[ -z "$sockbuf" ] || json_add_int sockbuf "$sockbuf"
+	[ -z "$smuxver" ] || json_add_int smuxver "$smuxver"
+	[ -z "$smuxbuf" ] || json_add_int smuxbuf "$smuxbuf"
+	[ -z "$streambuf" ] || json_add_int streambuf "$streambuf"
+	[ -z "$keepalive" ] || json_add_int keepalive "$keepalive"
+	[ -z "$snmplog" ] || json_add_string snmplog "$snmplog"
+	[ -z "$snmpperiod" ] || json_add_int snmpperiod "$snmpperiod"
+	json_add_boolean quiet "$quiet"
+	json_dump -i > "$confjson"
+
+	procd_open_instance "$cfgtype.$cfg"
+	procd_set_param command "$bin" -c "$confjson"
+	[ -z "$gogc" ] || procd_set_param env GOGC="$gogc"
+	[ -z "$syslog" ] || procd_set_param stderr 1
+	[ -z "$user" ] || procd_set_param user "$user"
+	procd_set_param file "$confjson"
+	procd_set_param respawn
+	procd_close_instance
+}
+
+start_service() {
+	local cfgtype
+
+	mkdir -p "$confdir"
+	config_load kcptun
+	for cfgtype in server client; do
+		config_foreach kcptun "$cfgtype" "$cfgtype"
+	done
+}
+
+stop_service() {
+	rm -rf "$confdir"
+}
+
+service_triggers() {
+	procd_add_reload_interface_trigger wan
+	procd_add_reload_trigger kcptun
+	procd_open_validate
+	validate_server_section
+	validate_client_section
+	procd_close_validate
+}
+
+validate_mklocal() {
+	local tuple opts
+
+	shift 2
+	for tuple in "$@"; do
+		opts="${tuple%%:*} $opts"
+	done
+	[ -z "$opts" ] || echo "local $opts"
+}
+
+validate() {
+	uci_validate_section kcptun "$@"
+}
+
+validate_common_options() {
+	local cfgtype="$1"; shift
+	local cfg="$1"; shift
+	local func="$1"; shift
+	local crypt_methods='"aes", "aes-128", "aes-192", "salsa20", "blowfish", "twofish", "cast5", "3des", "tea", "xtea", "xor", "sm4", "none"'
+	local mode_profiles='"fast3", "fast2", "fast", "normal", "manual"'
+
+	"${func:-validate}" "$cfgtype" "$cfg" "$@" \
+		'disabled:bool:0' \
+		'key:string' \
+		"crypt:or($crypt_methods)" \
+		"mode:or($mode_profiles)" \
+		'mtu:uinteger' \
+		'sndwnd:uinteger' \
+		'rcvwnd:uinteger' \
+		'datashard:uinteger' \
+		'parityshard:uinteger' \
+		'dscp:uinteger' \
+		'nocomp:bool' \
+		'sockbuf:uinteger' \
+		'smuxver:uinteger' \
+		'smuxbuf:uinteger' \
+		'streambuf:uinteger' \
+		'keepalive:uinteger' \
+		'snmplog:string' \
+		'snmpperiod:uinteger' \
+		'quiet:bool' \
+		'gogc:uinteger' \
+		'syslog:bool:1' \
+		'user:string:nobody'
+}
+
+validate_server_options() {
+	validate_common_options server "$@" \
+		'listen:port' \
+		'target:host' \
+		'target_port:port' \
+		'pprof:bool'
+}
+
+validate_client_options() {
+	validate_common_options client "$@" \
+		'bind_address:ipaddr' \
+		'local_port:port' \
+		'server:host' \
+		'server_port:port' \
+		'conn:uinteger' \
+		'autoexpire:uinteger' \
+		'scavengettl:uinteger'
+}
+
+validate_server_section() {
+	validate_server_options "$1" "$2"
+}
+
+validate_client_section() {
+	validate_client_options "$1" "$2"
+}
diff -uprN a/package/own/kcptun/Makefile b/package/own/kcptun/Makefile
--- a/package/own/kcptun/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/kcptun/Makefile	2022-11-22 21:00:46.185048000 +0800
@@ -0,0 +1,77 @@
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=kcptun
+PKG_VERSION:=20210922
+PKG_RELEASE:=$(AUTORELEASE)
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=https://codeload.github.com/xtaci/kcptun/tar.gz/v${PKG_VERSION}?
+PKG_SOURCE_DATE:=2021-09-22
+PKG_HASH:=f6a08f0fe75fa85d15f9c0c28182c69a5ad909229b4c230a8cbe38f91ba2d038
+
+PKG_MAINTAINER:=Dengfeng Liu <liudf0716@gmail.com>, Chao Liu <expiron18@gmail.com>
+PKG_LICENSE:=MIT
+PKG_LICENSE_FILES:=LICENSE.md
+
+PKG_BUILD_DEPENDS:=golang/host
+PKG_BUILD_PARALLEL:=1
+PKG_USE_MIPS16:=0
+
+GO_PKG:=github.com/xtaci/kcptun
+
+GO_PKG_LDFLAGS:=-s -w
+GO_PKG_LDFLAGS_X:=main.VERSION=$(PKG_VERSION)
+
+include $(INCLUDE_DIR)/package.mk
+include $(TOPDIR)/feeds/packages/lang/golang/golang-package.mk
+
+define Package/kcptun-config
+  SECTION:=net
+  CATEGORY:=Network
+  SUBMENU:=Web Servers/Proxies
+  TITLE:=Kcptun Config Scripts
+  URL:=https://github.com/xtaci/kcptun
+  DEPENDS:=$(GO_ARCH_DEPENDS)
+endef
+
+define Package/kcptun-config/conffiles
+/etc/config/kcptun
+endef
+
+define Package/kcptun-config/install
+	$(INSTALL_DIR) $(1)/etc/config
+	$(INSTALL_CONF) ./files/kcptun.config $(1)/etc/config/kcptun
+	$(INSTALL_DIR) $(1)/etc/init.d
+	$(INSTALL_BIN) ./files/kcptun.init $(1)/etc/init.d/kcptun
+endef
+
+define Package/kcptun/Default
+  define Package/kcptun-$(1)
+    SECTION:=net
+    CATEGORY:=Network
+    SUBMENU:=Web Servers/Proxies
+    TITLE:=KCP-based Secure Tunnel $(1)
+    URL:=https://github.com/xtaci/kcptun
+    DEPENDS:=+kcptun-config
+  endef
+
+  define Package/kcptun-$(1)/description
+    kcptun is a Stable & Secure Tunnel Based On KCP with N:M Multiplexing.
+This package only contains kcptun $(1).
+  endef
+
+  define Package/kcptun-$(1)/install
+		$$(call GoPackage/Package/Install/Bin,$$(PKG_INSTALL_DIR))
+
+		$$(INSTALL_DIR) $$(1)/usr/bin
+		$$(INSTALL_BIN) $$(PKG_INSTALL_DIR)/usr/bin/$(1) $$(1)/usr/bin/kcptun-$(1)
+  endef
+endef
+
+$(eval $(call BuildPackage,kcptun-config))
+KCPTUN_COMPONENTS:=server client
+$(foreach component,$(KCPTUN_COMPONENTS), \
+  $(eval $(call Package/kcptun/Default,$(component))) \
+  $(eval $(call GoBinPackage,kcptun-$(component))) \
+  $(eval $(call BuildPackage,kcptun-$(component))) \
+)
diff -uprN a/package/own/kcptun/README.md b/package/own/kcptun/README.md
--- a/package/own/kcptun/README.md	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/kcptun/README.md	2022-11-22 21:00:46.189048000 +0800
@@ -0,0 +1,54 @@
+# UCI Configuration
+Most option names are the same as those used in json config files: [`server.json`](https://github.com/xtaci/kcptun/blob/master/examples/server.json) and [`local.json`](https://github.com/xtaci/kcptun/blob/master/examples/local.json). Please check `validate_xxx_options` func definition of the [service script](files/kcptun.init) and kcptun's own [documentation](https://github.com/xtaci/kcptun) for supported options and expected value types. And a [sample config file](files/kcptun.config) is also provided for reference.
+
+A `kcptun` config file can contain two types of config section: `server` and `client`, one of which represents a server or client instance. A `server` section can contain one or more options in [Common options](#common-options) and [Server options](#server-options). And a `client` section can contain one or more options in [Common options](#common-options) and [Client options](#client-options).
+
+Every section has a `disabled` option to temporarily turn off the instance.
+
+## [Common options](#common-options)
+| Name | Type | Option | Description |
+| ---- | ---- | ------ | ----------- |
+| disabled | boolean |  | disable current config section when set to 1 (default: 0) |
+| key | string | --key | pre-shared secret between client and server (default: "it's a secrect") |
+| crypt | enum | --crypt | aes, aes-128, aes-192, salsa20, blowfish, twofish, cast5, 3des, tea, xtea, xor, sm4, none (default: "aes") |
+| mode | enum | --mode | profiles: fast3, fast2, fast, normal, manual (default: "fast") |
+| mtu | integer | --mtu | set maximum transmission unit for UDP packets (default: 1350) |
+| sndwnd | integer | --sndwnd | set send window size(num of packets) (default: 1024 for server, 128 for client) |
+| rcvwnd | integer | --rcvwnd | set receive window size(num of packets) (default: 1024 for server, 512 for client) |
+| datashard | integer | --datashard, --ds | set reed-solomon erasure coding - datashard (default: 10) |
+| parityshard | integer | --parityshard, --ps | set reed-solomon erasure coding - parityshard (default: 3) |
+| dscp | integer | --dscp | set DSCP(6bit) (default: 0) |
+| nocomp | boolean | --nocomp | disable compression |
+| sockbuf | integer | --sockbuf | per-socket buffer in bytes (default: 4194304) |
+| smuxver | integer | --smuxver | specify smux version, available 1,2 (default: 1) |
+| smuxbuf | integer | --smuxbuf | the overall de-mux buffer in bytes (default: 4194304) |
+| streambuf | integer | --streambuf | per stream receive buffer in bytes, for smux v2+ (default: 2097152) |
+| keepalive | integer | --keepalive | seconds between heartbeats (default: 10) |
+| snmplog | string | --snmplog | collect snmp to file, aware of timeformat in golang, like: ./snmp-20060102.log |
+| snmpperiod | integer | --snmpperiod | snmp collect period, in seconds (default: 60) |
+| quiet | boolean | --quiet | suppress the 'stream open/close' messages |
+| gogc | integer |  | set GOGC environment variable, see [Memory Control](https://github.com/xtaci/kcptun#memory-control). |
+| syslog | boolean |  | redirect logs to syslog when set to 1, implemented by [procd](https://openwrt.org/docs/guide-developer/procd-init-scripts#service_parameters). (default: 0) |
+| user | string |  | run as another user, implemented by [procd](https://openwrt.org/docs/guide-developer/procd-init-scripts#service_parameters). |
+
+### Limitation
+* As kcptun outputs all logs to stderr by default, you may receive lots of **LOG_ERR** level message when set syslog to 1.
+
+## [Server options](#server-options)
+| Name | Type | Option | Description |
+| ---- | ---- | ------ | ----------- |
+| listen | port number | --listen, -l | kcp server listen port (default: ":29900") |
+| target | host | --target, -t | target server address (default: "127.0.0.1:12948") |
+| target_port | port number | --target, -t | target server port (default: "127.0.0.1:12948") |
+| pprof | boolean | --pprof | start profiling server on :6060 |
+
+## [Client options](#client-options)
+| Name | Type | Option | Description |
+| ---- | ---- | ------ | ----------- |
+| bind_address | IP address | --localaddr, -l | local listen address (default: ":12948") |
+| local_port | port number | --localaddr, -l | local listen port (default: ":12948") |
+| server | host | --remoteaddr, -r | kcp server address (default: "vps:29900") |
+| server_port | port number | --remoteaddr, -r | kcp server port (default: "vps:29900") |
+| conn | integer | --conn | set num of UDP connections to server (default: 1) |
+| autoexpire | integer | --autoexpire | set auto expiration time(in seconds) for a single UDP connection, 0 to disable (default: 0) |
+| scavengettl | integer | --scavengettl | set how long an expired connection can live(in sec), -1 to disable (default: 600) |
diff -uprN a/package/own/lua-neturl/Makefile b/package/own/lua-neturl/Makefile
--- a/package/own/lua-neturl/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/lua-neturl/Makefile	2022-11-22 20:56:49.905322735 +0800
@@ -0,0 +1,44 @@
+# SPDX-License-Identifier: GPL-3.0-only
+#
+# Copyright (C) 2022 ImmortalWrt.org
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=neturl
+PKG_VERSION:=1.1-1
+PKG_RELEASE:=1
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=https://codeload.github.com/golgote/neturl/tar.gz/v$(PKG_VERSION)?
+PKG_HASH:=skip
+
+PKG_MAINTAINER:=Tianling Shen <cnsztl@immortalwrt.org>
+PKG_LICENSE:=MIT
+PKG_LICNESE_FILES:=LICENSE.txt
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/lua-neturl
+  SUBMENU:=Lua
+  SECTION:=lang
+  CATEGORY:=Languages
+  TITLE:=URL and Query string parser, builder, normalizer for Lua
+  URL:=https://github.com/golgote/neturl
+  DEPENDS:=+lua
+  PKGARCH:=all
+endef
+
+define Package/lua-neturl/description
+  This small Lua library provides a few functions to parse URL with
+  querystring and build new URL easily.
+endef
+
+define Build/Compile
+endef
+
+define Package/lua-neturl/install
+	$(INSTALL_DIR) $(1)/usr/lib/lua
+	$(CP) $(PKG_BUILD_DIR)/lib/net/url.lua $(1)/usr/lib/lua/
+endef
+
+$(eval $(call BuildPackage,lua-neturl))
diff -uprN a/package/own/lua-neturl/patches/010-userinfo-regex.patch b/package/own/lua-neturl/patches/010-userinfo-regex.patch
--- a/package/own/lua-neturl/patches/010-userinfo-regex.patch	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/lua-neturl/patches/010-userinfo-regex.patch	2022-11-22 20:57:23.513083801 +0800
@@ -0,0 +1,11 @@
+--- a/lib/net/url.lua
++++ b/lib/net/url.lua
+@@ -340,7 +340,7 @@ function M:setAuthority(authority)
+ 				self.password = v
+ 				return ''
+ 		end)
+-		if string.find(userinfo, "^[%w%+%.]+$") then
++		if string.find(userinfo, "^[%p%w%+%.]+$") then
+ 			self.user = userinfo
+ 		else
+ 			-- incorrect userinfo
diff -uprN a/package/own/microsocks/Makefile b/package/own/microsocks/Makefile
--- a/package/own/microsocks/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/microsocks/Makefile	2022-11-23 19:49:40.398299959 +0800
@@ -0,0 +1,43 @@
+# SPDX-License-Identifier: GPL-3.0-only
+#
+# Copyright (C) 2021 ImmortalWrt.org
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=microsocks
+PKG_VERSION:=1.0.3
+PKG_RELEASE:=22
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=https://codeload.github.com/rofl0r/microsocks/tar.gz/v$(PKG_VERSION)?
+PKG_HASH:=skip
+
+PKG_LICENSE:=MIT
+PKG_LICENSE_FILES:=COPYING
+PKG_MAINTAINER:=lean
+
+PKG_BUILD_PARALLEL:=1
+PKG_INSTALL:=1
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/microsocks
+  SECTION:=net
+  CATEGORY:=Network
+  SUBMENU:=Web Servers/Proxies
+  TITLE:=Tiny, portable SOCKS5 server
+  URL:=https://github.com/rofl0r/microsocks
+  DEPENDS:=+libpthread
+endef
+
+define Package/microsocks/description
+  A SOCKS5 service that you can run on your remote boxes to tunnel connections
+  through them, if for some reason SSH doesn't cut it for you.
+endef
+
+define Package/microsocks/install
+	$(INSTALL_DIR) $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/usr/local/bin/microsocks $(1)/usr/bin/microsocks
+endef
+
+$(eval $(call BuildPackage,microsocks))
diff -uprN a/package/own/naiveproxy/Makefile b/package/own/naiveproxy/Makefile
--- a/package/own/naiveproxy/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/naiveproxy/Makefile	2022-11-23 19:50:35.342064882 +0800
@@ -0,0 +1,128 @@
+# SPDX-License-Identifier: GPL-3.0-only
+#
+# Copyright (C) 2021 ImmortalWrt.org
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=naiveproxy
+PKG_VERSION:=107.0.5304.87-3
+PKG_RELEASE:=81
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=https://codeload.github.com/klzgrad/naiveproxy/tar.gz/v$(PKG_VERSION)?
+PKG_HASH:=skip
+
+PKG_LICENSE:=BSD 3-Clause
+PKG_LICENSE_FILES:=LICENSE
+PKG_MAINTAINER:=Tianling Shen <cnsztl@immortalwrt.org>
+
+ifneq ($(wildcard $(TOPDIR)/feeds/packages/devel/ninja/ninja.mk),)
+PKG_BUILD_DEPENDS+= ninja/host
+endif
+NINJA ?= ninja
+PKG_USE_MIPS16:=0
+PKG_BUILD_PARALLEL:=1
+
+ifneq ($(CONFIG_CPU_TYPE)," ")
+  CPU_TYPE:=$(word 1, $(subst +," ,$(CONFIG_CPU_TYPE)))
+  CPU_SUBTYPE:=$(word 2, $(subst +, ",$(CONFIG_CPU_TYPE)))
+  ifeq ($(CPU_SUBTYPE),)
+    CPU_SUBTYPE:=""
+  endif
+else
+  CPU_TYPE:=""
+  CPU_SUBTYPE:=""
+endif
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/naiveproxy
+  SECTION:=net
+  CATEGORY:=Network
+  SUBMENU:=Web Servers/Proxies
+  TITLE:=Make a fortune quietly
+  URL:=https://github.com/klzgrad/naiveproxy
+  DEPENDS:=@!(arc||armeb||mips||mips64||powerpc||TARGET_gemini) +libatomic
+endef
+
+define Package/naiveproxy/description
+  NaïveProxy uses Chrome's network stack to camouflage traffic with strong
+  censorship resistance and low detectability. Reusing Chrome's stack also
+  ensures best practices in performance and security.
+endef
+
+ifneq ($(CONFIG_CCACHE),)
+  export CCACHE_SLOPPINESS=time_macros
+  export CCACHE_BASEDIR=$(PKG_BUILD_DIR)/src
+  export CCACHE_CPP2=yes
+  export naive_ccache_flags=cc_wrapper="$(CCACHE)"
+endif
+
+CLANG_VER:=16-init-4609-g025a5b22-2
+CLANG_FILE:=clang-llvmorg-$(CLANG_VER).tgz
+define Download/CLANG
+	URL:=https://commondatastorage.googleapis.com/chromium-browser-clang/Linux_x64
+	URL_FILE:=$(CLANG_FILE)
+	FILE:=$(CLANG_FILE)
+	HASH:=bbcf6a3456cb6d8648a6bb15fca27bcb77902318090d2eee6cbc9472acc0ef69
+endef
+
+GN_VER:=fff29c1b3f9703ea449f720fe70fa73575ef24e5
+GN_FILE:=gn-git_revision-$(GN_VER).zip
+define Download/GN_TOOL
+	URL:=https://chrome-infra-packages.appspot.com/dl/gn/gn/linux-amd64/+
+	URL_FILE:=git_revision:$(GN_VER)
+	FILE:=$(GN_FILE)
+	HASH:=3fa137a6a090f5ac69593de6b19f8bfe6115e2383f15b6394509d431eea3cb5b
+endef
+
+PGO_VER:=5304-1666778341-6952d9583ad8c5425ae6677daa28778c2175311f
+PGO_FILE:=chrome-linux-$(PGO_VER).profdata
+define Download/PGO_PROF
+	URL:=https://storage.googleapis.com/chromium-optimization-profiles/pgo_profiles
+	URL_FILE:=$(PGO_FILE)
+	FILE:=$(PGO_FILE)
+	HASH:=7ac8186cec385515c6164dbfe05b05e4c6c2b25b5733e2d6b2c932670b2bd6cf
+endef
+
+define Build/Prepare
+	$(call Build/Prepare/Default)
+
+	( \
+		pushd $(PKG_BUILD_DIR)/src ; \
+		mkdir -p "chrome/build/pgo_profiles" ; \
+		$(CP) "$(DL_DIR)/$(PGO_FILE)" "chrome/build/pgo_profiles" ; \
+		mkdir -p "third_party/llvm-build/Release+Asserts" ; \
+		$(TAR) -xzf "$(DL_DIR)/$(CLANG_FILE)" -C "third_party/llvm-build/Release+Asserts" ; \
+		echo -e "llvmorg-$(CLANG_VER)" > "third_party/llvm-build/Release+Asserts/cr_build_revision" ; \
+		mkdir -p "gn/out" ; \
+		unzip -o "$(DL_DIR)/$(GN_FILE)" -d "gn/out" ; \
+		popd ; \
+	)
+endef
+
+define Build/Configure
+	( \
+		pushd "$(PKG_BUILD_DIR)/src" ; \
+		. ../init_env.sh "$(ARCH)" $(CPU_TYPE) $(CPU_SUBTYPE) "$(TOOLCHAIN_DIR)" ; \
+		export naive_flags+=" $$$${naive_ccache_flags}" ; \
+		mkdir -p "out" ; \
+		./gn/out/gn gen "out/Release" --args="$$$${naive_flags}" --script-executable="$(PYTHON)" ; \
+		popd ; \
+	)
+endef
+
+define Build/Compile
+	+$(NINJA) -C "$(PKG_BUILD_DIR)/src/out/Release" naive
+endef
+
+define Package/naiveproxy/install
+	$(INSTALL_DIR) $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/src/out/Release/naive $(1)/usr/bin/naive
+endef
+
+$(eval $(call Download,CLANG))
+$(eval $(call Download,GN_TOOL))
+$(eval $(call Download,PGO_PROF))
+
+$(eval $(call BuildPackage,naiveproxy))
diff -uprN a/package/own/naiveproxy/patches/100-macros.patch b/package/own/naiveproxy/patches/100-macros.patch
--- a/package/own/naiveproxy/patches/100-macros.patch	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/naiveproxy/patches/100-macros.patch	2022-11-23 19:51:29.242046739 +0800
@@ -0,0 +1,38 @@
+--- a/src/base/allocator/partition_allocator/tagging.cc
++++ b/src/base/allocator/partition_allocator/tagging.cc
+@@ -18,22 +18,25 @@
+ #define PR_GET_TAGGED_ADDR_CTRL 56
+ #define PR_TAGGED_ADDR_ENABLE (1UL << 0)
+
+-#if BUILDFLAG(IS_LINUX)
+-#include <linux/version.h>
+-
+-// Linux headers already provide these since v5.10.
+-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0)
+-#define HAS_PR_MTE_MACROS
+-#endif
+-#endif
+-
+-#ifndef HAS_PR_MTE_MACROS
++#ifndef PR_MTE_TCF_SHIFT
+ #define PR_MTE_TCF_SHIFT 1
++#endif
++#ifndef PR_MTE_TCF_NONE
+ #define PR_MTE_TCF_NONE (0UL << PR_MTE_TCF_SHIFT)
++#endif
++#ifndef PR_MTE_TCF_SYNC
+ #define PR_MTE_TCF_SYNC (1UL << PR_MTE_TCF_SHIFT)
++#endif
++#ifndef PR_MTE_TCF_ASYNC
+ #define PR_MTE_TCF_ASYNC (2UL << PR_MTE_TCF_SHIFT)
++#endif
++#ifndef PR_MTE_TCF_MASK
+ #define PR_MTE_TCF_MASK (3UL << PR_MTE_TCF_SHIFT)
++#endif
++#ifndef PR_MTE_TAG_SHIFT
+ #define PR_MTE_TAG_SHIFT 3
++#endif
++#ifndef PR_MTE_TAG_MASK
+ #define PR_MTE_TAG_MASK (0xffffUL << PR_MTE_TAG_SHIFT)
+ #endif
+ #endif
diff -uprN a/package/own/naiveproxy/src/init_env.sh b/package/own/naiveproxy/src/init_env.sh
--- a/package/own/naiveproxy/src/init_env.sh	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/naiveproxy/src/init_env.sh	2022-11-23 19:51:02.100043650 +0800
@@ -0,0 +1,96 @@
+#!/bin/bash
+# SPDX-License-Identifier: GPL-3.0-only
+#
+# Copyright (C) 2021 ImmortalWrt.org
+# --------------------------------------------------------
+# Init build dependencies for naiveproxy
+
+# Read args from shell
+target_arch="$1"
+cpu_type="$2"
+cpu_subtype="$3"
+toolchain_dir="$4"
+
+# Set arch info
+case "${target_arch}" in
+"aarch64")
+	naive_arch="arm64"
+	;;
+"i386")
+	naive_arch="x86"
+	;;
+"x86_64")
+	naive_arch="x64"
+	;;
+*)
+	naive_arch="${target_arch}"
+	;;
+esac
+
+# OS detection
+[ "$(uname)" != "Linux" -o "$(uname -m)" != "x86_64" ] && { echo -e "Support Linux AMD64 only."; exit 1; }
+
+# Create TMP dir
+mkdir -p "$PWD/tmp"
+export TMPDIR="$PWD/tmp"
+
+# Set ENV
+export DEPOT_TOOLS_WIN_TOOLCHAIN=0
+export naive_flags="
+is_official_build=true
+exclude_unwind_tables=true
+enable_resource_allowlist_generation=false
+symbol_level=1
+is_clang=true
+use_sysroot=false
+fatal_linker_warnings=false
+treat_warnings_as_errors=false
+enable_base_tracing=false
+use_udev=false
+use_aura=false
+use_ozone=false
+use_gio=false
+use_gtk=false
+use_platform_icu_alternatives=true
+use_glib=false
+disable_file_support=true
+enable_websockets=false
+use_kerberos=false
+enable_mdns=false
+enable_reporting=false
+include_transport_security_state_preload_list=false
+use_nss_certs=false
+target_os=\"openwrt\"
+target_cpu=\"${naive_arch}\"
+target_sysroot=\"${toolchain_dir}\""
+
+case "${target_arch}" in
+"arm")
+	naive_flags+=" arm_version=0 arm_cpu=\"${cpu_type}\""
+	if [ -n "${cpu_subtype}" ]; then
+		if grep -q "neon" <<< "${cpu_subtype}"; then
+			neon_flag="arm_use_neon=true"
+		else
+			neon_flag="arm_use_neon=false"
+		fi
+		naive_flags+=" arm_fpu=\"${cpu_subtype}\" arm_float_abi=\"hard\" ${neon_flag}"
+	else
+		naive_flags+=" arm_float_abi=\"soft\" arm_use_neon=false"
+	fi
+	case "${cpu_type}" in
+	"arm1176jzf-s"|"arm926ej-s"|"mpcore"|"xscale")
+		naive_flags+=" arm_use_thumb=false"
+		;;
+	esac
+	;;
+"mipsel"|"mips64el")
+	naive_flags+=" use_thin_lto=false chrome_pgo_phase=0 mips_arch_variant=\"r2\""
+	if [ "${target_arch}" == "mipsel" ]; then
+		if [ "${cpu_subtype}" == "24kf" ]; then
+			naive_flags+=" mips_float_abi=\"hard\""
+		else
+			naive_flags+=" mips_float_abi=\"soft\""
+		fi
+	fi
+	;;
+esac
diff -uprN a/package/own/redsocks2/Makefile b/package/own/redsocks2/Makefile
--- a/package/own/redsocks2/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/redsocks2/Makefile	2022-11-23 19:52:11.835000079 +0800
@@ -0,0 +1,54 @@
+#
+# Copyright (C) 2014 OpenWrt-dist
+#
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+#
+
+include $(TOPDIR)/rules.mk
+
+
+PKG_NAME:=redsocks2
+PKG_VERSION:=0.67
+PKG_RELEASE:=8
+
+PKG_SOURCE_PROTO:=git
+PKG_SOURCE_URL:=https://github.com/semigodking/redsocks.git
+PKG_SOURCE_SUBDIR:=$(PKG_NAME)-$(PKG_VERSION)
+PKG_SOURCE_VERSION:=1951b49b774b0aab702348d0370e26bae1c3a7df
+PKG_MIRROR_HASH:=skip
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION)-$(PKG_SOURCE_VERSION).tar.gz
+PKG_MAINTAINER:=semigodking <semigodking@gmail.com>
+PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)/$(BUILD_VARIANT)/$(PKG_NAME)-$(PKG_VERSION)
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/redsocks2
+	SECTION:=net
+	CATEGORY:=Network
+	SUBMENU:=Web Servers/Proxies
+	TITLE:=Redirect any TCP connection to a SOCKS or HTTPS proxy server
+	URL:=https://github.com/semigodking/redsocks
+	DEPENDS:=+libevent2 +libopenssl
+endef
+
+define Package/redsocks2/description
+This is a modified version of original redsocks. \
+The name is changed to be REDSOCKS2 since this release to distinguish with original redsocks. \
+This variant is useful for anti-GFW (Great Fire Wall).
+endef
+
+define Package/redsocks2/conffiles
+/etc/config/redsocks2
+endef
+
+define Build/Compile
+	$(call Build/Compile/Default,DISABLE_SHADOWSOCKS=true)
+endef
+
+define Package/redsocks2/install
+	$(INSTALL_DIR) $(1)/usr/sbin
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/redsocks2 $(1)/usr/sbin
+endef
+
+$(eval $(call BuildPackage,redsocks2))
diff -uprN a/package/own/simple-obfs/Makefile b/package/own/simple-obfs/Makefile
--- a/package/own/simple-obfs/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/simple-obfs/Makefile	2022-11-23 19:54:42.480232000 +0800
@@ -0,0 +1,84 @@
+#
+# Copyright (C) 2017-2019 Jian Chang <aa65535@live.com>
+#
+# This is free software, licensed under the GNU General Public License v3.
+# See /LICENSE for more information.
+#
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=simple-obfs
+PKG_VERSION:=0.0.5
+PKG_RELEASE:=12
+
+PKG_SOURCE_PROTO:=git
+PKG_SOURCE_URL:=https://github.com/shadowsocks/simple-obfs.git
+PKG_MIRROR_HASH:=skip
+PKG_SOURCE_VERSION:=486bebd9208539058e57e23a12f23103016e09b4
+PKG_SOURCE_SUBDIR:=$(PKG_NAME)-$(PKG_VERSION)-$(PKG_SOURCE_VERSION)
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION)-$(PKG_SOURCE_VERSION).tar.gz
+
+PKG_LICENSE:=GPL-3.0-or-later
+PKG_LICENSE_FILES:=COPYING LICENSE
+PKG_MAINTAINER:=Jian Chang <aa65535@live.com>
+
+PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)/$(BUILD_VARIANT)/$(PKG_NAME)-$(PKG_VERSION)-$(PKG_SOURCE_VERSION)
+
+PKG_INSTALL:=1
+PKG_FIXUP:=autoreconf
+PKG_USE_MIPS16:=0
+PKG_BUILD_PARALLEL:=1
+PKG_BUILD_DEPENDS:=libev
+
+PKG_CONFIG_DEPENDS:= CONFIG_SIMPLE_OBFS_STATIC_LINK
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/simple-obfs
+	SECTION:=net
+	CATEGORY:=Network
+	TITLE:=Simple-obfs
+	URL:=https://github.com/shadowsocks/simple-obfs
+	DEPENDS:=+libpthread +!SIMPLE_OBFS_STATIC_LINK:libev
+endef
+
+Package/simple-obfs-server = $(Package/simple-obfs)
+
+define Package/simple-obfs-server/config
+menu "Simple-obfs Compile Configuration"
+	depends on PACKAGE_simple-obfs || PACKAGE_simple-obfs-server
+	config SIMPLE_OBFS_STATIC_LINK
+		bool "enable static link libraries."
+		default n
+endmenu
+endef
+
+define Package/simple-obfs/description
+Simple-obfs is a simple obfusacting tool, designed as plugin server of shadowsocks.
+endef
+
+Package/simple-obfs-server/description = $(Package/simple-obfs/description)
+
+CONFIGURE_ARGS += \
+	--disable-ssp \
+	--disable-documentation \
+	--disable-assert
+
+ifeq ($(CONFIG_SIMPLE_OBFS_STATIC_LINK),y)
+	CONFIGURE_ARGS += \
+		--with-ev="$(STAGING_DIR)/usr" \
+		LDFLAGS="-Wl,-static -static -static-libgcc"
+endif
+
+define Package/simple-obfs/install
+	$(INSTALL_DIR) $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/src/obfs-local $(1)/usr/bin
+endef
+
+define Package/simple-obfs-server/install
+	$(INSTALL_DIR) $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/src/obfs-server $(1)/usr/bin
+endef
+
+$(eval $(call BuildPackage,simple-obfs))
+$(eval $(call BuildPackage,simple-obfs-server))
diff -uprN a/package/own/smartdns/Makefile b/package/own/smartdns/Makefile
--- a/package/own/smartdns/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/smartdns/Makefile	2022-11-23 19:54:42.480232000 +0800
@@ -0,0 +1,59 @@
+#
+# Copyright (c) 2018-2020 Nick Peng (pymumu@gmail.com)
+# This is free software, licensed under the GNU General Public License v3.
+#
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=smartdns
+PKG_VERSION:=Release38.1
+PKG_RELEASE:=19
+
+PKG_SOURCE_PROTO:=git
+PKG_SOURCE_URL:=https://www.github.com/pymumu/smartdns.git
+PKG_SOURCE_VERSION:=51e1ba6897d40f078f4c32a70c1544865f1b4098
+PKG_MIRROR_HASH:=skip
+
+PKG_MAINTAINER:=Nick Peng <pymumu@gmail.com>
+PKG_LICENSE:=GPL-3.0-or-later
+PKG_LICENSE_FILES:=LICENSE
+
+PKG_BUILD_PARALLEL:=1
+
+include $(INCLUDE_DIR)/package.mk
+
+MAKE_VARS += VER=$(PKG_VERSION) 
+MAKE_PATH:=src
+
+define Package/smartdns
+  SECTION:=net
+  CATEGORY:=Network
+  TITLE:=smartdns server
+  DEPENDS:=+libpthread +libopenssl
+  URL:=https://www.github.com/pymumu/smartdns/
+endef
+
+define Package/smartdns/description
+SmartDNS is a local DNS server which accepts DNS query requests from local network clients,
+gets DNS query results from multiple upstream DNS servers concurrently, and returns the fastest IP to clients.
+Unlike dnsmasq's all-servers, smartdns returns the fastest IP. 
+endef
+
+define Package/smartdns/conffiles
+/etc/config/smartdns
+/etc/smartdns/address.conf
+/etc/smartdns/blacklist-ip.conf
+/etc/smartdns/custom.conf
+endef
+
+define Package/smartdns/install
+	$(INSTALL_DIR) $(1)/usr/sbin $(1)/etc/config $(1)/etc/init.d $(1)/etc/smartdns
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/src/smartdns $(1)/usr/sbin/smartdns
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/package/openwrt/files/etc/init.d/smartdns $(1)/etc/init.d/smartdns
+	$(INSTALL_CONF) $(PKG_BUILD_DIR)/package/openwrt/address.conf $(1)/etc/smartdns/address.conf
+	$(INSTALL_CONF) $(PKG_BUILD_DIR)/package/openwrt/blacklist-ip.conf $(1)/etc/smartdns/blacklist-ip.conf
+	$(INSTALL_CONF) $(PKG_BUILD_DIR)/package/openwrt/custom.conf $(1)/etc/smartdns/custom.conf
+	$(INSTALL_CONF) $(PKG_BUILD_DIR)/package/openwrt/files/etc/config/smartdns $(1)/etc/config/smartdns
+endef
+
+$(eval $(call BuildPackage,smartdns))
diff -uprN a/package/own/tcping/Makefile b/package/own/tcping/Makefile
--- a/package/own/tcping/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/tcping/Makefile	2022-11-23 19:54:42.484232000 +0800
@@ -0,0 +1,46 @@
+#
+# Copyright (C) 2014 OpenWrt-dist
+#
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+#
+
+include $(TOPDIR)/rules.mk
+
+
+PKG_NAME:=tcping
+PKG_VERSION:=0.3
+PKG_RELEASE:=22
+
+PKG_LICENSE:=GPL-2.0-only
+PKG_LICENSE_FILES:=license.txt
+
+PKG_SOURCE_PROTO:=git
+PKG_SOURCE_URL:=https://github.com/Lienol/tcping
+PKG_MIRROR_HASH:=skip
+PKG_SOURCE_SUBDIR:=$(PKG_NAME)-$(PKG_VERSION)
+PKG_SOURCE_VERSION:=db9101834732dac9aaa59dbb7fb9c74612dbf723
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION)-$(PKG_SOURCE_VERSION).tar.gz
+PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)/$(BUILD_VARIANT)/$(PKG_NAME)-$(PKG_VERSION)
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/tcping
+	SECTION:=net
+	CATEGORY:=Network
+	TITLE:=tcping measures the latency of a tcp-connection
+	URL:=https://github.com/jlyo/tcping
+endef
+
+define Package/tcping/description
+endef
+
+define Package/tcping/conffiles
+endef
+
+define Package/tcping/install
+	$(INSTALL_DIR) $(1)/usr/sbin
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/tcping $(1)/usr/sbin
+endef
+
+$(eval $(call BuildPackage,tcping))
diff -uprN a/package/own/trojan-plus/Makefile b/package/own/trojan-plus/Makefile
--- a/package/own/trojan-plus/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/trojan-plus/Makefile	2022-11-23 19:54:42.484232000 +0800
@@ -0,0 +1,69 @@
+#
+# Copyright (C) 2018-2019 wongsyrone
+#
+# This is free software, licensed under the GNU General Public License v3.
+# See /LICENSE for more information.
+#
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=trojan-plus
+PKG_VERSION:=10.0.3
+PKG_RELEASE:=8
+
+PKG_SOURCE_PROTO:=git
+PKG_SOURCE_URL:=https://github.com/peter-tank/trojan-plus.git
+PKG_SOURCE_DATE:=2020-09-06
+PKG_SOURCE_VERSION:=a6394cdd718669b0c7491493a78e61f6f0f899b3
+PKG_MIRROR_HASH:=skip
+
+PKG_BUILD_PARALLEL:=1
+PKG_BUILD_DEPENDS:=openssl
+
+PKG_LICENSE:=GPL-3.0
+PKG_LICENSE_FILE:=LICENSE
+PKG_MAINTAINER:=Trojan-Plus-Group
+
+include $(INCLUDE_DIR)/package.mk
+include $(INCLUDE_DIR)/cmake.mk
+
+TARGET_CXXFLAGS += -Wall -Wextra
+TARGET_CXXFLAGS += $(FPIC)
+
+# LTO
+TARGET_CXXFLAGS += -flto
+TARGET_LDFLAGS += -flto
+
+# CXX standard
+TARGET_CXXFLAGS += -std=c++11
+TARGET_CXXFLAGS := $(filter-out -O%,$(TARGET_CXXFLAGS)) -O3
+TARGET_CXXFLAGS += -ffunction-sections -fdata-sections
+TARGET_LDFLAGS += -Wl,--gc-sections
+
+CMAKE_OPTIONS += \
+	-DENABLE_MYSQL=OFF \
+	-DENABLE_NAT=ON \
+	-DENABLE_REUSE_PORT=ON \
+	-DENABLE_SSL_KEYLOG=ON \
+	-DENABLE_TLS13_CIPHERSUITES=ON \
+	-DFORCE_TCP_FASTOPEN=OFF \
+	-DSYSTEMD_SERVICE=OFF \
+	-DOPENSSL_USE_STATIC_LIBS=FALSE \
+	-DBoost_DEBUG=ON \
+	-DBoost_NO_BOOST_CMAKE=ON
+
+define Package/trojan-plus
+	SECTION:=net
+	CATEGORY:=Network
+	TITLE:=An unidentifiable mechanism that helps you bypass GFW. It's compatible with original trojan with experimental features.
+	URL:=https://github.com/Trojan-Plus-Group/trojan-plus
+	DEPENDS:= \
+		+libpthread +libstdcpp +libopenssl \
+		+boost +boost-system +boost-program_options
+endef
+
+define Package/trojan-plus/install
+	$(INSTALL_DIR) $(1)/usr/sbin
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/usr/bin/trojan $(1)/usr/sbin/trojan-plus
+endef
+
+$(eval $(call BuildPackage,trojan-plus))
diff -uprN a/package/own/v2ray-core/files/v2ray.conf b/package/own/v2ray-core/files/v2ray.conf
--- a/package/own/v2ray-core/files/v2ray.conf	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/v2ray-core/files/v2ray.conf	2022-11-23 19:54:42.488231000 +0800
@@ -0,0 +1,11 @@
+
+config v2ray 'enabled'
+	option enabled '0'
+
+config v2ray 'config'
+	option confdir '/etc/v2ray'
+	list conffiles '/etc/v2ray/config.json'
+	option datadir '/usr/share/v2ray'
+	option format 'json'
+	option memconservative '1'
+
diff -uprN a/package/own/v2ray-core/files/v2ray.init b/package/own/v2ray-core/files/v2ray.init
--- a/package/own/v2ray-core/files/v2ray.init	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/v2ray-core/files/v2ray.init	2022-11-23 19:54:42.488231000 +0800
@@ -0,0 +1,57 @@
+#!/bin/sh /etc/rc.common
+
+USE_PROCD=1
+START=99
+
+CONF="v2ray"
+PROG="/usr/bin/v2ray"
+
+start_service() {
+	config_load "$CONF"
+
+	local enabled
+	config_get_bool enabled "enabled" "enabled" "0"
+	[ "$enabled" -eq "0" ] && exit 1
+
+	local confdir
+	local conffiles
+	local datadir
+	local format
+
+	config_get confdir "config" "confdir"
+	config_get conffiles "config" "conffiles"
+	config_get datadir "config" "datadir" "/usr/share/v2ray"
+	config_get format "config" "format" "json"
+	config_get_bool memconservative "config" "memconservative" "1"
+
+	procd_open_instance "$CONF"
+	procd_set_param command "$PROG" run
+	[ -n "$confdir" ] && procd_append_param command -confdir "$confdir"
+	[ -n "$conffiles" ] && {
+		for i in $conffiles
+		do
+			procd_append_param command -config "$i"
+		done
+	}
+	[ -n "$format" ] && procd_append_param command -format "$format"
+	procd_set_param env v2ray.local.asset="$datadir"
+	[ "$memconservative" -eq "1" ] && procd_append_param env V2RAY_CONF_GEOLOADER="memconservative"
+	procd_set_param file $conffiles
+
+	procd_set_param limits core="unlimited"
+	procd_set_param limits nofile="1000000 1000000"
+	procd_set_param stdout 1
+	procd_set_param stderr 1
+	procd_set_param respawn
+
+	procd_close_instance
+}
+
+reload_service() {
+	stop
+	start
+}
+
+service_triggers() {
+	procd_add_reload_trigger "$CONF"
+}
diff -uprN a/package/own/v2ray-core/Makefile b/package/own/v2ray-core/Makefile
--- a/package/own/v2ray-core/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/v2ray-core/Makefile	2022-11-23 19:54:42.488231000 +0800
@@ -0,0 +1,111 @@
+# SPDX-License-Identifier: GPL-3.0-only
+#
+# Copyright (C) 2021 ImmortalWrt.org
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=v2ray-core
+PKG_VERSION:=5.1.0
+PKG_RELEASE:=47
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=https://codeload.github.com/v2fly/v2ray-core/tar.gz/v$(PKG_VERSION)?
+PKG_HASH:=skip
+
+PKG_LICENSE:=MIT
+PKG_LICENSE_FILES:=LICENSE
+PKG_MAINTAINER:=Tianling Shen <cnsztl@immortalwrt.org>
+
+PKG_BUILD_DEPENDS:=golang/host
+PKG_BUILD_PARALLEL:=1
+PKG_USE_MIPS16:=0
+
+GO_PKG:=github.com/v2fly/v2ray-core/v5
+GO_PKG_BUILD_PKG:=$(GO_PKG)/main
+GO_PKG_LDFLAGS_X:= \
+	$(GO_PKG).build=OpenWrt \
+	$(GO_PKG).version=$(PKG_VERSION)
+
+include $(INCLUDE_DIR)/package.mk
+include $(TOPDIR)/feeds/packages/lang/golang/golang-package.mk
+
+define Package/v2ray/template
+  TITLE:=A platform for building proxies to bypass network restrictions
+  SECTION:=net
+  CATEGORY:=Network
+  URL:=https://www.v2fly.org
+endef
+
+define Package/v2ray-core
+  $(call Package/v2ray/template)
+  DEPENDS:=$(GO_ARCH_DEPENDS) +ca-bundle
+endef
+
+define Package/v2ray-example
+  $(call Package/v2ray/template)
+  TITLE+= (example configs)
+  DEPENDS:=v2ray-core
+  PKGARCH:=all
+endef
+
+define Package/v2ray-extra
+  $(call Package/v2ray/template)
+  TITLE+= (extra resources)
+  DEPENDS:=v2ray-core
+  PKGARCH:=all
+endef
+
+define Package/v2ray/description
+  Project V is a set of network tools that help you to build your own computer network.
+  It secures your network connections and thus protects your privacy.
+endef
+
+define Package/v2ray-core/description
+  $(call Package/v2ray/description)
+endef
+
+define Package/v2ray-example/description
+  $(call Package/v2ray/description)
+
+  This includes example configuration files for v2ray-core.
+endef
+
+define Package/v2ray-extra/description
+  $(call Package/v2ray/description)
+
+  This includes extra resources for v2ray-core.
+endef
+
+define Package/v2ray-core/conffiles
+/etc/config/v2ray
+/etc/v2ray/
+endef
+
+define Package/v2ray-core/install
+	$(call GoPackage/Package/Install/Bin,$(PKG_INSTALL_DIR))
+	$(INSTALL_DIR) $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/usr/bin/main $(1)/usr/bin/v2ray
+
+	$(INSTALL_DIR) $(1)/etc/v2ray/
+	$(INSTALL_DATA) $(PKG_BUILD_DIR)/release/config/config.json $(1)/etc/v2ray/
+
+	$(INSTALL_DIR) $(1)/etc/config/
+	$(INSTALL_CONF) $(CURDIR)/files/v2ray.conf $(1)/etc/config/v2ray
+	$(INSTALL_DIR) $(1)/etc/init.d/
+	$(INSTALL_BIN) $(CURDIR)/files/v2ray.init $(1)/etc/init.d/v2ray
+endef
+
+define Package/v2ray-example/install
+	$(INSTALL_DIR) $(1)/etc/v2ray/
+	$(INSTALL_DATA) $(PKG_BUILD_DIR)/release/config/vpoint_socks_vmess.json $(1)/etc/v2ray/
+	$(INSTALL_DATA) $(PKG_BUILD_DIR)/release/config/vpoint_vmess_freedom.json $(1)/etc/v2ray/
+endef
+
+define Package/v2ray-extra/install
+	$(INSTALL_DIR) $(1)/usr/share/v2ray/
+	$(CP) $(PKG_BUILD_DIR)/release/extra/* $(1)/usr/share/v2ray/
+endef
+
+$(eval $(call BuildPackage,v2ray-core))
+$(eval $(call BuildPackage,v2ray-example))
+$(eval $(call BuildPackage,v2ray-extra))
diff -uprN a/package/own/v2ray-plugin/Makefile b/package/own/v2ray-plugin/Makefile
--- a/package/own/v2ray-plugin/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/v2ray-plugin/Makefile	2022-11-23 19:54:42.488231000 +0800
@@ -0,0 +1,40 @@
+# SPDX-License-Identifier: GPL-3.0-only
+#
+# Copyright (C) 2020 SharerMax
+# Copyright (C) 2021 ImmortalWrt.org
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=v2ray-plugin
+PKG_VERSION:=5.1.0
+PKG_RELEASE:=65
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=https://codeload.github.com/teddysun/v2ray-plugin/tar.gz/v$(PKG_VERSION)?
+PKG_HASH:=skip
+
+PKG_LICENSE:=MIT
+PKG_LICENSE_FILES:=LICENSE
+PKG_MAINTAINER:=madeye <max.c.lv@gmail.com>
+
+PKG_BUILD_DEPENDS:=golang/host
+PKG_BUILD_PARALLEL:=1
+PKG_USE_MIPS16:=0
+
+GO_PKG:=github.com/shadowsocks/v2ray-plugin
+GO_PKG_LDFLAGS_X:=main.VERSION=v$(PKG_VERSION)
+
+include $(INCLUDE_DIR)/package.mk
+include $(TOPDIR)/feeds/packages/lang/golang/golang-package.mk
+
+define Package/v2ray-plugin
+  SECTION:=net
+  CATEGORY:=Network
+  SUBMENU:=Web Servers/Proxies
+  TITLE:=SIP003 plugin for shadowsocks, based on v2ray
+  URL:=https://github.com/teddysun/v2ray-plugin
+  DEPENDS:=$(GO_ARCH_DEPENDS) +ca-bundle
+endef
+
+$(eval $(call GoBinPackage,v2ray-plugin))
+$(eval $(call BuildPackage,v2ray-plugin))
diff -uprN a/package/own/xray-core/files/config.json.example b/package/own/xray-core/files/config.json.example
--- a/package/own/xray-core/files/config.json.example	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/xray-core/files/config.json.example	2022-11-23 19:54:42.492231000 +0800
@@ -0,0 +1,144 @@
+// Config file of Xray. This file follows standard JSON format, with comments support.
+// Uncomment entries below to satisfy your needs. Also read our manual for more detail at
+// https://xtls.github.io/en/config/
+{
+  "log": {
+    // By default, Xray writes access log to stdout.
+    // "access": "/path/to/access/log/file",
+
+    // By default, Xray write error log to stdout.
+    // "error": "/path/to/error/log/file",
+
+    // Log level, one of "debug", "info", "warning", "error", "none"
+    "loglevel": "warning"
+  },
+  // List of inbound proxy configurations.
+  "inbounds": [{
+    // Port to listen on. You may need root access if the value is less than 1024.
+    "port": 1080,
+
+    // IP address to listen on. Change to "0.0.0.0" to listen on all network interfaces.
+    "listen": "127.0.0.1",
+
+    // Tag of the inbound proxy. May be used for routing.
+    "tag": "socks-inbound",
+
+    // Protocol name of inbound proxy.
+    "protocol": "socks",
+
+    // Settings of the protocol. Varies based on protocol.
+    "settings": {
+      "auth": "noauth",
+      "udp": false,
+      "ip": "127.0.0.1"
+    },
+
+    // Enable sniffing on TCP connection.
+    "sniffing": {
+      "enabled": true,
+      // Target domain will be overriden to the one carried by the connection, if the connection is HTTP or HTTPS.
+      "destOverride": ["http", "tls"]
+    }
+  }],
+  // List of outbound proxy configurations.
+  "outbounds": [{
+    // Protocol name of the outbound proxy.
+    "protocol": "freedom",
+
+    // Settings of the protocol. Varies based on protocol.
+    "settings": {},
+
+    // Tag of the outbound. May be used for routing.
+    "tag": "direct"
+  },{
+    "protocol": "blackhole",
+    "settings": {},
+    "tag": "blocked"
+  }],
+
+  // Transport is for global transport settings. If you have multiple transports with same settings
+  // (say mKCP), you may put it here, instead of in each individual inbound/outbounds.
+  //"transport": {},
+
+  // Routing controls how traffic from inbounds are sent to outbounds.
+  "routing": {
+    "domainStrategy": "IPOnDemand",
+    "rules":[
+      {
+        // Blocks access to private IPs. Remove this if you want to access your router.
+        "type": "field",
+        "ip": ["geoip:private"],
+        "outboundTag": "blocked"
+      },
+      {
+        // Blocks major ads.
+        "type": "field",
+        "domain": ["geosite:category-ads"],
+        "outboundTag": "blocked"
+      }
+    ]
+  },
+
+  // Dns settings for domain resolution.
+  "dns": {
+    // Static hosts, similar to hosts file.
+    "hosts": {
+      // Match v2ray.com to another domain on CloudFlare. This domain will be used when querying IPs for v2ray.com.
+      "domain:v2ray.com": "www.vicemc.net",
+
+      // The following settings help to eliminate DNS poisoning in mainland China.
+      // It is safe to comment these out if this is not the case for you.
+      "domain:github.io": "pages.github.com",
+      "domain:wikipedia.org": "www.wikimedia.org",
+      "domain:shadowsocks.org": "electronicsrealm.com"
+    },
+    "servers": [
+      "1.1.1.1",
+      {
+        "address": "114.114.114.114",
+        "port": 53,
+        // List of domains that use this DNS first.
+        "domains": [
+          "geosite:cn"
+        ]
+      },
+      "8.8.8.8",
+      "localhost"
+    ]
+  },
+
+  // Policy controls some internal behavior of how Xray handles connections.
+  // It may be on connection level by user levels in 'levels', or global settings in 'system.'
+  "policy": {
+    // Connection policys by user levels
+    "levels": {
+      "0": {
+        "uplinkOnly": 0,
+        "downlinkOnly": 0
+      }
+    },
+    "system": {
+      "statsInboundUplink": false,
+      "statsInboundDownlink": false,
+      "statsOutboundUplink": false,
+      "statsOutboundDownlink": false
+    }
+  },
+
+  // Stats enables internal stats counter.
+  // This setting can be used together with Policy and Api.
+  //"stats":{},
+
+  // Api enables gRPC APIs for external programs to communicate with Xray instance.
+  //"api": {
+    //"tag": "api",
+    //"services": [
+    //  "HandlerService",
+    //  "LoggerService",
+    //  "StatsService"
+    //]
+  //},
+
+  // You may add other entries to the configuration, but they will not be recognized by Xray.
+  "other": {}
+}
diff -uprN a/package/own/xray-core/files/vpoint_socks_vmess.json b/package/own/xray-core/files/vpoint_socks_vmess.json
--- a/package/own/xray-core/files/vpoint_socks_vmess.json	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/xray-core/files/vpoint_socks_vmess.json	2022-11-23 19:54:42.492231000 +0800
@@ -0,0 +1,25 @@
+{
+  "log": {
+    "loglevel": "warning"
+  },
+  "inbounds": [{
+    "port": 1080,
+    "listen": "127.0.0.1",
+    "protocol": "socks",
+    "settings": {
+      "auth": "noauth",
+      "udp": false,
+      "ip": "127.0.0.1"
+    }
+  }],
+  "outbounds": [{
+    "protocol": "freedom",
+    "settings": {},
+    "tag": "direct"
+  }],
+  "policy": {
+    "levels": {
+      "0": {"uplinkOnly": 0}
+    }
+  }
+}
diff -uprN a/package/own/xray-core/files/vpoint_vmess_freedom.json b/package/own/xray-core/files/vpoint_vmess_freedom.json
--- a/package/own/xray-core/files/vpoint_vmess_freedom.json	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/xray-core/files/vpoint_vmess_freedom.json	2022-11-23 19:54:42.492231000 +0800
@@ -0,0 +1,31 @@
+{
+  "inbounds": [{
+    "port": 10086,
+    "protocol": "vmess",
+    "settings": {
+      "clients": [
+        {
+          "id": "23ad6b10-8d1a-40f7-8ad0-e3e35cd38297",
+          "level": 1
+        }
+      ]
+    }
+  }],
+  "outbounds": [{
+    "protocol": "freedom",
+    "settings": {}
+  },{
+    "protocol": "blackhole",
+    "settings": {},
+    "tag": "blocked"
+  }],
+  "routing": {
+    "rules": [
+      {
+        "type": "field",
+        "ip": ["geoip:private"],
+        "outboundTag": "blocked"
+      }
+    ]
+  }
+}
diff -uprN a/package/own/xray-core/files/xray.conf b/package/own/xray-core/files/xray.conf
--- a/package/own/xray-core/files/xray.conf	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/xray-core/files/xray.conf	2022-11-23 19:54:42.492231000 +0800
@@ -0,0 +1,11 @@
+
+config xray 'enabled'
+	option enabled '0'
+
+config xray 'config'
+	option confdir '/etc/xray'
+	list conffiles '/etc/xray/config.json'
+	option datadir '/usr/share/v2ray'
+	option dialer ''
+	option format 'json'
+
diff -uprN a/package/own/xray-core/files/xray.init b/package/own/xray-core/files/xray.init
--- a/package/own/xray-core/files/xray.init	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/xray-core/files/xray.init	2022-11-23 19:54:42.492231000 +0800
@@ -0,0 +1,58 @@
+#!/bin/sh /etc/rc.common
+
+USE_PROCD=1
+START=99
+
+CONF="xray"
+PROG="/usr/bin/xray"
+
+start_service() {
+	config_load "$CONF"
+
+	local enabled
+	config_get enabled "enabled" "enabled" "0"
+	[ "$enabled" -eq "0" ] && exit 1
+
+	local confdir
+	local conffiles
+	local datadir
+	local dialer
+	local format
+
+	config_get confdir "config" "confdir"
+	config_get conffiles "config" "conffiles"
+	config_get datadir "config" "datadir" "/usr/share/v2ray"
+	config_get dialer "config" "dialer"
+	config_get format "config" "format" "json"
+
+	procd_open_instance "$CONF"
+	procd_set_param command "$PROG" run
+	[ -n "$confdir" ] && procd_append_param command -confdir "$confdir"
+	[ -n "$conffiles" ] && {
+		for i in $conffiles
+		do
+			procd_append_param command -config "$i"
+		done
+	}
+	[ -n "$format" ] && procd_append_param command -format "$format"
+	[ -n "$dialer" ] && procd_set_param env XRAY_BROWSER_DIALER="$dialer"
+	procd_set_param env XRAY_LOCATION_ASSET="$datadir"
+	procd_set_param file $conffiles
+
+	procd_set_param limits core="unlimited"
+	procd_set_param limits nofile="1000000 1000000"
+	procd_set_param stdout 1
+	procd_set_param stderr 1
+	procd_set_param respawn
+
+	procd_close_instance
+}
+
+reload_service() {
+	stop
+	start
+}
+
+service_triggers() {
+	procd_add_reload_trigger "$CONF"
+}
diff -uprN a/package/own/xray-core/Makefile b/package/own/xray-core/Makefile
--- a/package/own/xray-core/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/xray-core/Makefile	2022-11-23 19:54:42.492231000 +0800
@@ -0,0 +1,88 @@
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=Xray-core
+PKG_VERSION:=1.6.4
+PKG_RELEASE:=54
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=https://codeload.github.com/XTLS/Xray-core/tar.gz/v$(PKG_VERSION)?
+PKG_HASH:=skip
+
+PKG_MAINTAINER:=Tianling Shen <cnsztl@immortalwrt.org>
+PKG_LICENSE:=MPL-2.0
+PKG_LICENSE_FILES:=LICENSE
+
+PKG_BUILD_DEPENDS:=golang/host
+PKG_BUILD_PARALLEL:=1
+PKG_USE_MIPS16:=0
+
+GO_PKG:=github.com/xtls/xray-core
+GO_PKG_BUILD_PKG:=$(GO_PKG)/main
+GO_PKG_LDFLAGS_X:= \
+	$(GO_PKG)/core.build=OpenWrt \
+	$(GO_PKG)/core.version=$(PKG_VERSION)
+
+include $(INCLUDE_DIR)/package.mk
+include $(TOPDIR)/feeds/packages/lang/golang/golang-package.mk
+
+define Package/xray/template
+  TITLE:=A platform for building proxies to bypass network restrictions
+  SECTION:=net
+  CATEGORY:=Network
+  URL:=https://xtls.github.io
+endef
+
+define Package/xray-core
+  $(call Package/xray/template)
+  DEPENDS:=$(GO_ARCH_DEPENDS) +ca-bundle
+endef
+
+define Package/xray-example
+  $(call Package/xray/template)
+  TITLE+= (example configs)
+  DEPENDS:=xray-core
+  PKGARCH:=all
+endef
+
+define Package/xray/description
+  Xray, Penetrates Everything. It helps you to build your own computer network.
+  It secures your network connections and thus protects your privacy.
+endef
+
+define Package/xray-core/description
+  $(call Package/xray/description)
+endef
+
+define Package/xray-example/description
+  $(call Package/xray/description)
+
+  This includes example configuration files for xray-core.
+endef
+
+define Package/xray-core/conffiles
+/etc/xray/
+/etc/config/xray
+endef
+
+define Package/xray-core/install
+	$(call GoPackage/Package/Install/Bin,$(PKG_INSTALL_DIR))
+	$(INSTALL_DIR) $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/usr/bin/main $(1)/usr/bin/xray
+
+	$(INSTALL_DIR) $(1)/etc/xray/
+	$(INSTALL_DATA) $(CURDIR)/files/config.json.example $(1)/etc/xray/
+
+	$(INSTALL_DIR) $(1)/etc/config/
+	$(INSTALL_CONF) $(CURDIR)/files/xray.conf $(1)/etc/config/xray
+	$(INSTALL_DIR) $(1)/etc/init.d/
+	$(INSTALL_BIN) $(CURDIR)/files/xray.init $(1)/etc/init.d/xray
+endef
+
+define Package/xray-example/install
+	$(INSTALL_DIR) $(1)/etc/xray/
+	$(INSTALL_DATA) $(CURDIR)/files/vpoint_socks_vmess.json $(1)/etc/xray/
+	$(INSTALL_DATA) $(CURDIR)/files/vpoint_vmess_freedom.json $(1)/etc/xray/
+endef
+
+$(eval $(call BuildPackage,xray-core))
+$(eval $(call BuildPackage,xray-example))
