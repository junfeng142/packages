diff -uprN a/package/own/dns2socks/Makefile b/package/own/dns2socks/Makefile
--- a/package/own/dns2socks/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/dns2socks/Makefile	2022-06-11 13:45:29.247638272 +0800
@@ -0,0 +1,57 @@
+#
+# Copyright (C) 2021 ImmortalWrt
+# <https://immortalwrt.org>
+#
+# This is free software, licensed under the GNU General Public License v3.
+# See /LICENSE for more information.
+#
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=dns2socks
+PKG_VERSION:=2.1
+PKG_RELEASE:=2
+
+PKG_SOURCE:=SourceCode.zip
+PKG_SOURCE_URL:=@SF/dns2socks
+PKG_SOURCE_DATE:=2020-02-18
+PKG_HASH:=406b5003523577d39da66767adfe54f7af9b701374363729386f32f6a3a995f4
+
+PKG_MAINTAINER:=ghostmaker
+PKG_LICENSE:=BSD-3-Clause
+PKG_LICENSE_FILE:=LICENSE
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/dns2socks
+  SECTION:=net
+  CATEGORY:=Network
+  SUBMENU:=IP Addresses and Names
+  TITLE:=The utility to resolve DNS requests via a SOCKS5 tunnel.
+  URL:=http://dns2socks.sourceforge.net/
+  MAINTAINER:=ghostmaker
+  DEPENDS:=+libpthread
+endef
+
+define Package/dns2socks/description
+  This is a utility to resolve DNS requests via a SOCKS5 tunnel and caches the answers.
+endef
+
+UNZIP_CMD:=unzip -q -d $(PKG_BUILD_DIR) $(DL_DIR)/$(PKG_SOURCE)
+
+define Build/Compile
+	$(TARGET_CC) \
+	$(TARGET_CFLAGS) \
+	$(TARGET_CPPFLAGS) \
+	$(FPIC) \
+	-o $(PKG_BUILD_DIR)/DNS2SOCKS/dns2socks \
+	$(PKG_BUILD_DIR)/DNS2SOCKS/DNS2SOCKS.c \
+	$(TARGET_LDFLAGS) -pthread
+endef
+
+define Package/dns2socks/install
+	$(INSTALL_DIR) $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/DNS2SOCKS/dns2socks $(1)/usr/bin/dns2socks
+endef
+
+$(eval $(call BuildPackage,dns2socks))
\ No newline at end of file
diff -uprN a/package/own/ipt2socks/Makefile b/package/own/ipt2socks/Makefile
--- a/package/own/ipt2socks/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/ipt2socks/Makefile	2022-06-11 13:45:29.247638272 +0800
@@ -0,0 +1,43 @@
+#
+# Copyright (C) 2021 ImmortalWrt
+# <https://immortalwrt.org>
+#
+# This is free software, licensed under the GNU General Public License v3.
+# See /LICENSE for more information.
+#
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=ipt2socks
+PKG_VERSION:=1.1.3
+PKG_RELEASE:=2
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=https://codeload.github.com/zfl9/ipt2socks/tar.gz/v$(PKG_VERSION)?
+PKG_HASH:=73a2498dc95934c225d358707e7f7d060b5ce81aa45260ada09cbd15207d27d1
+
+PKG_BUILD_PARALLEL:=1
+PKG_INSTALL:=1
+
+PKG_LICENSE:=AGPL-3.0
+PKG_LICENSE_FILE:=LICENSE
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/ipt2socks
+  SECTION:=net
+  CATEGORY:=Network
+  TITLE:=Utility for converting iptables (REDIRECT/TPROXY) to SOCKS5
+  URL:=https://github.com/zfl9/ipt2socks
+  DEPENDS:=+libpthread
+endef
+
+TARGET_CFLAGS += $(FPIC) -flto
+TARGET_LDFLAGS += -flto
+
+define Package/ipt2socks/install
+	$(INSTALL_DIR) $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/ipt2socks $(1)/usr/bin
+endef
+
+$(eval $(call BuildPackage,ipt2socks))
\ No newline at end of file
diff -uprN a/package/own/kcptun/files/kcptun.config b/package/own/kcptun/files/kcptun.config
--- a/package/own/kcptun/files/kcptun.config	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/kcptun/files/kcptun.config	2022-06-11 13:45:29.247638272 +0800
@@ -0,0 +1,43 @@
+config server
+	option disabled 1
+	option listen 29900
+	option target '127.0.0.1'
+	option target_port 12948
+	option crypt 'aes'
+	option key 'secret'
+	option mode 'fast'
+	option datashard 10
+	option parityshard 3
+	option dscp 46
+	option nocomp 1
+	option snmplog '/var/log/snmp.log'
+	option snmpperiod 60
+	option pprof 1
+	option quiet 1
+	option syslog 1
+	option user nobody
+
+config client
+	option disabled 1
+	option bind_address '0.0.0.0'
+	option local_port 12948
+	option server 'vps'
+	option server_port 29900
+	option crypt 'aes'
+	option key 'secret'
+	option mode 'fast'
+	option conn 1
+	option autoexpire 0
+	option scavengettl 600
+	option mtu 1350
+	option sndwnd 128
+	option rcvwnd 512
+	option nocomp 1
+	option sockbuf 4194304
+	option smuxver 1
+	option smuxbuf 4194304
+	option streambuf 2097152
+	option keepalive 10
+	option quiet 1
+	option gogc 20
+	option user nobody
diff -uprN a/package/own/kcptun/files/kcptun.init b/package/own/kcptun/files/kcptun.init
--- a/package/own/kcptun/files/kcptun.init	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/kcptun/files/kcptun.init	2022-06-11 13:45:29.247638272 +0800
@@ -0,0 +1,174 @@
+#!/bin/sh /etc/rc.common
+#
+# Copyright (C) 2019 Chao Liu <expiron18@gmail.com>
+#
+# This is free software, licensed under the GNU General Public License v3.
+# See /LICENSE for more information.
+#
+
+USE_PROCD=1
+START=99
+
+confdir=/var/etc/kcptun
+bindir=/usr/bin
+
+mkjson_server_conf() {
+	[ "$disabled" = 0 ] || return 1
+	[ -n "$listen" ] || return 1
+	[ -n "$target" ] || return 1
+	[ -n "$target_port" ] || return 1
+	json_add_string listen ":$listen"
+	json_add_string target "$target:$target_port"
+	json_add_boolean pprof "$pprof"
+}
+
+mkjson_client_conf() {
+	[ "$disabled" = 0 ] || return 1
+	[ -n "$local_port" ] || return 1
+	[ -n "$server" ] || return 1
+	[ -n "$server_port" ] || return 1
+	json_add_string localaddr "$bind_address:$local_port"
+	json_add_string remoteaddr "$server:$server_port"
+	[ -z "$conn" ] || json_add_int conn "$conn"
+	[ -z "$autoexpire" ] || json_add_int autoexpire "$autoexpire"
+	[ -z "$scavengettl" ] || json_add_int scavengettl "$scavengettl"
+}
+
+kcptun() {
+	local cfg="$1"
+	local cfgtype="$2"
+	local bin="$bindir/kcptun-$cfgtype"
+	local confjson="$confdir/$cfgtype.$cfg.json"
+
+	[ -x "$bin" ] || return
+	eval "$("validate_${cfgtype}_section" "$cfg" validate_mklocal)"
+	"validate_${cfgtype}_section" "$cfg" || return
+	[ "$disabled" = 0 ] || return
+
+	json_init
+	mkjson_${cfgtype}_conf || return
+	[ -z "$crypt" ] || json_add_string crypt "$crypt"
+	[ -z "$key" ] || json_add_string key "$key"
+	[ -z "$mode" ] || json_add_string mode "$mode"
+	[ -z "$mtu" ] || json_add_int mtu "$mtu"
+	[ -z "$sndwnd" ] || json_add_int sndwnd "$sndwnd"
+	[ -z "$rcvwnd" ] || json_add_int rcvwnd "$rcvwnd"
+	[ -z "$datashard" ] || json_add_int datashard "$datashard"
+	[ -z "$parityshard" ] || json_add_int parityshard "$parityshard"
+	[ -z "$dscp" ] || json_add_int dscp "$dscp"
+	json_add_boolean nocomp "$nocomp"
+	[ -z "$sockbuf" ] || json_add_int sockbuf "$sockbuf"
+	[ -z "$smuxver" ] || json_add_int smuxver "$smuxver"
+	[ -z "$smuxbuf" ] || json_add_int smuxbuf "$smuxbuf"
+	[ -z "$streambuf" ] || json_add_int streambuf "$streambuf"
+	[ -z "$keepalive" ] || json_add_int keepalive "$keepalive"
+	[ -z "$snmplog" ] || json_add_string snmplog "$snmplog"
+	[ -z "$snmpperiod" ] || json_add_int snmpperiod "$snmpperiod"
+	json_add_boolean quiet "$quiet"
+	json_dump -i > "$confjson"
+
+	procd_open_instance "$cfgtype.$cfg"
+	procd_set_param command "$bin" -c "$confjson"
+	[ -z "$gogc" ] || procd_set_param env GOGC="$gogc"
+	[ -z "$syslog" ] || procd_set_param stderr 1
+	[ -z "$user" ] || procd_set_param user "$user"
+	procd_set_param file "$confjson"
+	procd_set_param respawn
+	procd_close_instance
+}
+
+start_service() {
+	local cfgtype
+
+	mkdir -p "$confdir"
+	config_load kcptun
+	for cfgtype in server client; do
+		config_foreach kcptun "$cfgtype" "$cfgtype"
+	done
+}
+
+stop_service() {
+	rm -rf "$confdir"
+}
+
+service_triggers() {
+	procd_add_reload_interface_trigger wan
+	procd_add_reload_trigger kcptun
+	procd_open_validate
+	validate_server_section
+	validate_client_section
+	procd_close_validate
+}
+
+validate_mklocal() {
+	local tuple opts
+
+	shift 2
+	for tuple in "$@"; do
+		opts="${tuple%%:*} $opts"
+	done
+	[ -z "$opts" ] || echo "local $opts"
+}
+
+validate() {
+	uci_validate_section kcptun "$@"
+}
+
+validate_common_options() {
+	local cfgtype="$1"; shift
+	local cfg="$1"; shift
+	local func="$1"; shift
+	local crypt_methods='"aes", "aes-128", "aes-192", "salsa20", "blowfish", "twofish", "cast5", "3des", "tea", "xtea", "xor", "sm4", "none"'
+	local mode_profiles='"fast3", "fast2", "fast", "normal", "manual"'
+
+	"${func:-validate}" "$cfgtype" "$cfg" "$@" \
+		'disabled:bool:0' \
+		'key:string' \
+		"crypt:or($crypt_methods)" \
+		"mode:or($mode_profiles)" \
+		'mtu:uinteger' \
+		'sndwnd:uinteger' \
+		'rcvwnd:uinteger' \
+		'datashard:uinteger' \
+		'parityshard:uinteger' \
+		'dscp:uinteger' \
+		'nocomp:bool' \
+		'sockbuf:uinteger' \
+		'smuxver:uinteger' \
+		'smuxbuf:uinteger' \
+		'streambuf:uinteger' \
+		'keepalive:uinteger' \
+		'snmplog:string' \
+		'snmpperiod:uinteger' \
+		'quiet:bool' \
+		'gogc:uinteger' \
+		'syslog:bool:1' \
+		'user:string:nobody'
+}
+
+validate_server_options() {
+	validate_common_options server "$@" \
+		'listen:port' \
+		'target:host' \
+		'target_port:port' \
+		'pprof:bool'
+}
+
+validate_client_options() {
+	validate_common_options client "$@" \
+		'bind_address:ipaddr' \
+		'local_port:port' \
+		'server:host' \
+		'server_port:port' \
+		'conn:uinteger' \
+		'autoexpire:uinteger' \
+		'scavengettl:uinteger'
+}
+
+validate_server_section() {
+	validate_server_options "$1" "$2"
+}
+
+validate_client_section() {
+	validate_client_options "$1" "$2"
+}
diff -uprN a/package/own/kcptun/Makefile b/package/own/kcptun/Makefile
--- a/package/own/kcptun/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/kcptun/Makefile	2022-06-11 13:45:29.247638272 +0800
@@ -0,0 +1,77 @@
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=kcptun
+PKG_VERSION:=20210922
+PKG_RELEASE:=$(AUTORELEASE)
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=https://codeload.github.com/xtaci/kcptun/tar.gz/v${PKG_VERSION}?
+PKG_SOURCE_DATE:=2021-09-22
+PKG_HASH:=f6a08f0fe75fa85d15f9c0c28182c69a5ad909229b4c230a8cbe38f91ba2d038
+
+PKG_MAINTAINER:=Dengfeng Liu <liudf0716@gmail.com>, Chao Liu <expiron18@gmail.com>
+PKG_LICENSE:=MIT
+PKG_LICENSE_FILES:=LICENSE.md
+
+PKG_BUILD_DEPENDS:=golang/host
+PKG_BUILD_PARALLEL:=1
+PKG_USE_MIPS16:=0
+
+GO_PKG:=github.com/xtaci/kcptun
+
+GO_PKG_LDFLAGS:=-s -w
+GO_PKG_LDFLAGS_X:=main.VERSION=$(PKG_VERSION)
+
+include $(INCLUDE_DIR)/package.mk
+include $(TOPDIR)/feeds/packages/lang/golang/golang-package.mk
+
+define Package/kcptun-config
+  SECTION:=net
+  CATEGORY:=Network
+  SUBMENU:=Web Servers/Proxies
+  TITLE:=Kcptun Config Scripts
+  URL:=https://github.com/xtaci/kcptun
+  DEPENDS:=$(GO_ARCH_DEPENDS)
+endef
+
+define Package/kcptun-config/conffiles
+/etc/config/kcptun
+endef
+
+define Package/kcptun-config/install
+	$(INSTALL_DIR) $(1)/etc/config
+	$(INSTALL_CONF) ./files/kcptun.config $(1)/etc/config/kcptun
+	$(INSTALL_DIR) $(1)/etc/init.d
+	$(INSTALL_BIN) ./files/kcptun.init $(1)/etc/init.d/kcptun
+endef
+
+define Package/kcptun/Default
+  define Package/kcptun-$(1)
+    SECTION:=net
+    CATEGORY:=Network
+    SUBMENU:=Web Servers/Proxies
+    TITLE:=KCP-based Secure Tunnel $(1)
+    URL:=https://github.com/xtaci/kcptun
+    DEPENDS:=+kcptun-config
+  endef
+
+  define Package/kcptun-$(1)/description
+    kcptun is a Stable & Secure Tunnel Based On KCP with N:M Multiplexing.
+This package only contains kcptun $(1).
+  endef
+
+  define Package/kcptun-$(1)/install
+		$$(call GoPackage/Package/Install/Bin,$$(PKG_INSTALL_DIR))
+
+		$$(INSTALL_DIR) $$(1)/usr/bin
+		$$(INSTALL_BIN) $$(PKG_INSTALL_DIR)/usr/bin/$(1) $$(1)/usr/bin/kcptun-$(1)
+  endef
+endef
+
+$(eval $(call BuildPackage,kcptun-config))
+KCPTUN_COMPONENTS:=server client
+$(foreach component,$(KCPTUN_COMPONENTS), \
+  $(eval $(call Package/kcptun/Default,$(component))) \
+  $(eval $(call GoBinPackage,kcptun-$(component))) \
+  $(eval $(call BuildPackage,kcptun-$(component))) \
+)
diff -uprN a/package/own/kcptun/README.md b/package/own/kcptun/README.md
--- a/package/own/kcptun/README.md	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/kcptun/README.md	2022-06-11 13:45:29.247638272 +0800
@@ -0,0 +1,54 @@
+# UCI Configuration
+Most option names are the same as those used in json config files: [`server.json`](https://github.com/xtaci/kcptun/blob/master/examples/server.json) and [`local.json`](https://github.com/xtaci/kcptun/blob/master/examples/local.json). Please check `validate_xxx_options` func definition of the [service script](files/kcptun.init) and kcptun's own [documentation](https://github.com/xtaci/kcptun) for supported options and expected value types. And a [sample config file](files/kcptun.config) is also provided for reference.
+
+A `kcptun` config file can contain two types of config section: `server` and `client`, one of which represents a server or client instance. A `server` section can contain one or more options in [Common options](#common-options) and [Server options](#server-options). And a `client` section can contain one or more options in [Common options](#common-options) and [Client options](#client-options).
+
+Every section has a `disabled` option to temporarily turn off the instance.
+
+## [Common options](#common-options)
+| Name | Type | Option | Description |
+| ---- | ---- | ------ | ----------- |
+| disabled | boolean |  | disable current config section when set to 1 (default: 0) |
+| key | string | --key | pre-shared secret between client and server (default: "it's a secrect") |
+| crypt | enum | --crypt | aes, aes-128, aes-192, salsa20, blowfish, twofish, cast5, 3des, tea, xtea, xor, sm4, none (default: "aes") |
+| mode | enum | --mode | profiles: fast3, fast2, fast, normal, manual (default: "fast") |
+| mtu | integer | --mtu | set maximum transmission unit for UDP packets (default: 1350) |
+| sndwnd | integer | --sndwnd | set send window size(num of packets) (default: 1024 for server, 128 for client) |
+| rcvwnd | integer | --rcvwnd | set receive window size(num of packets) (default: 1024 for server, 512 for client) |
+| datashard | integer | --datashard, --ds | set reed-solomon erasure coding - datashard (default: 10) |
+| parityshard | integer | --parityshard, --ps | set reed-solomon erasure coding - parityshard (default: 3) |
+| dscp | integer | --dscp | set DSCP(6bit) (default: 0) |
+| nocomp | boolean | --nocomp | disable compression |
+| sockbuf | integer | --sockbuf | per-socket buffer in bytes (default: 4194304) |
+| smuxver | integer | --smuxver | specify smux version, available 1,2 (default: 1) |
+| smuxbuf | integer | --smuxbuf | the overall de-mux buffer in bytes (default: 4194304) |
+| streambuf | integer | --streambuf | per stream receive buffer in bytes, for smux v2+ (default: 2097152) |
+| keepalive | integer | --keepalive | seconds between heartbeats (default: 10) |
+| snmplog | string | --snmplog | collect snmp to file, aware of timeformat in golang, like: ./snmp-20060102.log |
+| snmpperiod | integer | --snmpperiod | snmp collect period, in seconds (default: 60) |
+| quiet | boolean | --quiet | suppress the 'stream open/close' messages |
+| gogc | integer |  | set GOGC environment variable, see [Memory Control](https://github.com/xtaci/kcptun#memory-control). |
+| syslog | boolean |  | redirect logs to syslog when set to 1, implemented by [procd](https://openwrt.org/docs/guide-developer/procd-init-scripts#service_parameters). (default: 0) |
+| user | string |  | run as another user, implemented by [procd](https://openwrt.org/docs/guide-developer/procd-init-scripts#service_parameters). |
+
+### Limitation
+* As kcptun outputs all logs to stderr by default, you may receive lots of **LOG_ERR** level message when set syslog to 1.
+
+## [Server options](#server-options)
+| Name | Type | Option | Description |
+| ---- | ---- | ------ | ----------- |
+| listen | port number | --listen, -l | kcp server listen port (default: ":29900") |
+| target | host | --target, -t | target server address (default: "127.0.0.1:12948") |
+| target_port | port number | --target, -t | target server port (default: "127.0.0.1:12948") |
+| pprof | boolean | --pprof | start profiling server on :6060 |
+
+## [Client options](#client-options)
+| Name | Type | Option | Description |
+| ---- | ---- | ------ | ----------- |
+| bind_address | IP address | --localaddr, -l | local listen address (default: ":12948") |
+| local_port | port number | --localaddr, -l | local listen port (default: ":12948") |
+| server | host | --remoteaddr, -r | kcp server address (default: "vps:29900") |
+| server_port | port number | --remoteaddr, -r | kcp server port (default: "vps:29900") |
+| conn | integer | --conn | set num of UDP connections to server (default: 1) |
+| autoexpire | integer | --autoexpire | set auto expiration time(in seconds) for a single UDP connection, 0 to disable (default: 0) |
+| scavengettl | integer | --scavengettl | set how long an expired connection can live(in sec), -1 to disable (default: 600) |
diff -uprN a/package/own/microsocks/Makefile b/package/own/microsocks/Makefile
--- a/package/own/microsocks/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/microsocks/Makefile	2022-06-11 13:45:29.247638272 +0800
@@ -0,0 +1,37 @@
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=microsocks
+PKG_VERSION=1.0.2
+PKG_RELEASE:=2
+
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE_URL:=https://codeload.github.com/rofl0r/microsocks/tar.gz/v$(PKG_VERSION)?
+PKG_HASH:=5ece77c283e71f73b9530da46302fdb4f72a0ae139aa734c07fe532407a6211a
+
+PKG_LICENSE:=MIT
+PKG_LICENSE_FILES:=COPYING
+PKG_MAINTAINER:=lean
+
+PKG_BUILD_PARALLEL:=1
+PKG_INSTALL:=1
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/microsocks
+	SECTION:=net
+	CATEGORY:=Network
+	SUBMENU:=Web Servers/Proxies
+	TITLE:=microsocks for OpenWRT
+	DEPENDS:=+libpthread
+endef
+
+define Package/microsocks/description
+	microsocks is a Tiny Proxy in C.
+endef
+
+define Package/microsocks/install
+	$(INSTALL_DIR) $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/microsocks $(1)/usr/bin/microsocks
+endef
+
+$(eval $(call BuildPackage,microsocks))
diff -uprN a/package/own/redsocks2/Makefile b/package/own/redsocks2/Makefile
--- a/package/own/redsocks2/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/package/own/redsocks2/Makefile	2022-06-11 13:45:29.251638069 +0800
@@ -0,0 +1,53 @@
+#
+# Copyright (C) 2014 OpenWrt-dist
+#
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+#
+
+include $(TOPDIR)/rules.mk
+
+
+PKG_NAME:=redsocks2
+PKG_VERSION:=0.67
+PKG_RELEASE:=4
+
+PKG_SOURCE_PROTO:=git
+PKG_SOURCE_URL:=https://github.com/semigodking/redsocks.git
+PKG_SOURCE_SUBDIR:=$(PKG_NAME)-$(PKG_VERSION)
+PKG_SOURCE_VERSION:=d94c245ea47859cda5b4b7373308589206b97bdc
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION)-$(PKG_SOURCE_VERSION).tar.gz
+PKG_MAINTAINER:=semigodking <semigodking@gmail.com>
+PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)/$(BUILD_VARIANT)/$(PKG_NAME)-$(PKG_VERSION)
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/redsocks2
+	SECTION:=net
+	CATEGORY:=Network
+	SUBMENU:=Web Servers/Proxies
+	TITLE:=Redirect any TCP connection to a SOCKS or HTTPS proxy server
+	URL:=https://github.com/semigodking/redsocks
+	DEPENDS:=+libevent2 +libopenssl
+endef
+
+define Package/redsocks2/description
+This is a modified version of original redsocks. \
+The name is changed to be REDSOCKS2 since this release to distinguish with original redsocks. \
+This variant is useful for anti-GFW (Great Fire Wall).
+endef
+
+define Package/redsocks2/conffiles
+/etc/config/redsocks2
+endef
+
+define Build/Compile
+	$(call Build/Compile/Default,DISABLE_SHADOWSOCKS=true)
+endef
+
+define Package/redsocks2/install
+	$(INSTALL_DIR) $(1)/usr/sbin
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/redsocks2 $(1)/usr/sbin
+endef
+
+$(eval $(call BuildPackage,redsocks2))
