diff -uprN c/feeds/luci/applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js d/feeds/luci/applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js
--- c/feeds/luci/applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js	2024-01-06 20:23:53.585014376 +0800
+++ d/feeds/luci/applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js	1970-01-01 08:00:00.000000000 +0800
@@ -1,1162 +0,0 @@
-'use strict';
-'require ui';
-'require view';
-'require dom';
-'require poll';
-'require uci';
-'require rpc';
-'require fs';
-'require form';
-'require tools.widgets as widgets';
-
-return view.extend({
-
-	NextUpdateStrings : {
-		'Verify' : _("Verify"),
-		'Run once' : _("Run once"),
-		'Disabled' : _("Disabled"),
-		'Stopped' : _("Stopped")
-	},
-
-	time_res : {
-		seconds : 1,
-		minutes : 60,
-		hours : 3600,
-	},
-
-	callGetLogServices: rpc.declare({
-		object: 'luci.ddns',
-		method: 'get_services_log',
-		params: [ 'service_name' ],
-		expect: {  },
-	}),
-
-	callInitAction: rpc.declare({
-		object: 'luci',
-		method: 'setInitAction',
-		params: [ 'name', 'action' ],
-		expect: { result: false }
-	}),
-
-	callDDnsGetStatus: rpc.declare({
-		object: 'luci.ddns',
-		method: 'get_ddns_state',
-		expect: {  }
-	}),
-
-	callDDnsGetEnv: rpc.declare({
-		object: 'luci.ddns',
-		method: 'get_env',
-		expect: {  }
-	}),
-
-	callDDnsGetServicesStatus: rpc.declare({
-		object: 'luci.ddns',
-		method: 'get_services_status',
-		expect: {  }
-	}),
-
-	services: {},
-
-	/*
-	 * Services list is gen by 3 different source:
-	 * 1. /usr/share/ddns/default contains the service installed by opkg
-	 * 2. /usr/share/ddns/custom contains any service installed by the
-	 *    user or the ddns script (for example when service are
-	 *    downloaded)
-	 * 3. /usr/share/ddns/list contains all the service that can be
-	 *    downloaded by using the ddns script ('service on demand' feature)
-	 *
-	 * (Special services that requires a dedicated package ARE NOT
-	 * supported by the 'service on demand' feature)
-	 */
-	callGenServiceList: function(m, ev) {
-		return Promise.all([
-			L.resolveDefault(fs.list('/usr/share/ddns/default'), []),
-			L.resolveDefault(fs.list('/usr/share/ddns/custom'), []),
-			L.resolveDefault(fs.read('/usr/share/ddns/list'), null)
-		]).then(L.bind(function (data) {
-			var default_service = data[0],
-				custom_service = data[1],
-				list_service = data[2] && data[2].split("\n") || [],
-				_this = this;
-
-			this.services = {};
-
-			default_service.forEach(function (service) {
-				_this.services[service.name.replace('.json','')] = true
-			});
-
-			custom_service.forEach(function (service) {
-				_this.services[service.name.replace('.json','')] = true
-			});
-
-			list_service.forEach(function (service) {
-				if (!_this.services[service])
-					_this.services[service] = false;
-			});
-		}, this))
-	},
-
-	/*
-	* Check if the service is supported.
-	* If the script doesn't find any json assume a 'service on demand' install.
-	* If a json is found check if the ip type is supported.
-	* Invalidate the service_name if is not supported.
-	*/
-	handleCheckService : function(s, service_name, ipv6, ev, section_id) {
-
-		var value = service_name.formvalue(section_id);
-		s.service_supported = null;
-		service_name.triggerValidation(section_id);
-
-		return this.handleGetServiceData(value)
-			.then(L.bind(function (service_data) {
-				if (value != '-' && service_data) {
-					service_data = JSON.parse(service_data);
-					if (ipv6.formvalue(section_id) == "1" && !service_data.ipv6) {
-						s.service_supported = false;
-						return;
-					}
-				}
-				s.service_supported = true;
-			}, service_name))
-			.then(L.bind(service_name.triggerValidation, service_name, section_id))
-	},
-
-	handleGetServiceData: function(service) {
-		return Promise.all([
-			L.resolveDefault(fs.read('/usr/share/ddns/custom/'+service+'.json'), null),
-			L.resolveDefault(fs.read('/usr/share/ddns/default/'+service+'.json'), null)
-		]).then(function(data) {
-			return data[0] || data[1] || null;
-		})
-	},
-
-	handleInstallService: function(m, service_name, section_id, section, _this, ev) {
-		var service = service_name.formvalue(section_id)
-		return fs.exec('/usr/bin/ddns', ['service', 'install', service])
-			.then(L.bind(_this.callGenServiceList, _this))
-			.then(L.bind(m.render, m))
-			.then(L.bind(this.renderMoreOptionsModal, this, section))
-			.catch(function(e) { ui.addNotification(null, E('p', e.message)) });
-	},
-
-	handleRefreshServicesList: function(m, ev) {
-		return fs.exec('/usr/bin/ddns', ['service', 'update'])
-			.then(L.bind(this.load, this))
-			.then(L.bind(this.render, this))
-			.catch(function(e) { ui.addNotification(null, E('p', e.message)) });
-	},
-
-	handleReloadDDnsRule: function(m, section_id, ev) {
-		return fs.exec('/usr/lib/ddns/dynamic_dns_lucihelper.sh',
-							[ '-S', section_id, '--', 'start' ])
-			.then(L.bind(m.load, m))
-			.then(L.bind(m.render, m))
-			.catch(function(e) { ui.addNotification(null, E('p', e.message)) });
-	},
-
-	HandleStopDDnsRule: function(m, section_id, ev) {
-		return fs.exec('/usr/lib/ddns/dynamic_dns_lucihelper.sh',
-							[ '-S', section_id, '--', 'start' ])
-			.then(L.bind(m.render, m))
-			.catch(function(e) { ui.addNotification(null, E('p', e.message)) });
-	},
-
-	handleToggleDDns: function(m, ev) {
-		return this.callInitAction('ddns', 'enabled')
-			.then(L.bind(function (action) { return this.callInitAction('ddns', action ? 'disable' : 'enable')}, this))
-			.then(L.bind(function (action) { return this.callInitAction('ddns', action ? 'stop' : 'start')}, this))
-			.then(L.bind(m.render, m))
-			.catch(function(e) { ui.addNotification(null, E('p', e.message)) });
-	},
-
-	handleRestartDDns: function(m, ev) {
-		return this.callInitAction('ddns', 'restart')
-			.then(L.bind(m.render, m));
-	},
-
-	poll_status: function(map, data) {
-		var status = data[1] || [], service = data[0] || [], rows = map.querySelectorAll('.cbi-section-table-row[data-sid]'),
-			section_id, cfg_detail_ip, cfg_update, cfg_status, host, ip, last_update,
-			next_update, service_status, reload, cfg_enabled, stop,
-			ddns_enabled = map.querySelector('[data-name="_enabled"]').querySelector('.cbi-value-field'),
-			ddns_toggle = map.querySelector('[data-name="_toggle"]').querySelector('button'),
-			services_list = map.querySelector('[data-name="_services_list"]').querySelector('.cbi-value-field');
-
-		ddns_toggle.innerHTML = status['_enabled'] ? _('Stop DDNS') : _('Start DDNS')
-		services_list.innerHTML = status['_services_list'];
-
-		dom.content(ddns_enabled, function() {
-			return E([], [
-				E('div', {}, status['_enabled'] ? _('DDNS Autostart enabled') : [
-					_('DDNS Autostart disabled'),
-					E('div', { 'class' : 'cbi-value-description' },
-					_("Currently DDNS updates are not started at boot or on interface events.") + "<br />" +
-					_("This is the default if you run DDNS scripts by yourself (i.e. via cron with force_interval set to '0')"))
-				]),]);
-		});
-
-		for (var i = 0; i < rows.length; i++) {
-			section_id = rows[i].getAttribute('data-sid');
-			cfg_detail_ip = rows[i].querySelector('[data-name="_cfg_detail_ip"]');
-			cfg_update = rows[i].querySelector('[data-name="_cfg_update"]');
-			cfg_status = rows[i].querySelector('[data-name="_cfg_status"]');
-			reload = rows[i].querySelector('.cbi-section-actions .reload');
-			stop = rows[i].querySelector('.cbi-section-actions .stop');
-			cfg_enabled = uci.get('ddns', section_id, 'enabled');
-
-			reload.disabled = (status['_enabled'] == 0 || cfg_enabled == 0);
-
-			host = uci.get('ddns', section_id, 'lookup_host') || _('Configuration Error');
-			ip =  _('No Data');
-			last_update = _('Never');
-			next_update = _('Unknown');
-			service_status = '<b>' + _('Not Running') + '</b>';
-
-			if (service[section_id]) {
-				stop.disabled = (!service[section_id].pid || (service[section_id].pid && cfg_enabled == '1'));
-				if (service[section_id].ip)
-					ip = service[section_id].ip;
-				if (service[section_id].last_update)
-					last_update = service[section_id].last_update;
-				if (service[section_id].next_update)
-					next_update = this.NextUpdateStrings[service[section_id].next_update] || service[section_id].next_update;
-				if (service[section_id].pid)
-					service_status = '<b>' + _('Running') + '</b> : ' + service[section_id].pid;
-			}
-
-			cfg_detail_ip.innerHTML = host + '<br />' + ip;
-			cfg_update.innerHTML = last_update + '<br />' + next_update;
-			cfg_status.innerHTML = service_status;
-		}
-
-		return;
-	},
-
-	load: function() {
-		return Promise.all([
-			this.callDDnsGetServicesStatus(),
-			this.callDDnsGetStatus(),
-			this.callDDnsGetEnv(),
-			this.callGenServiceList(),
-			uci.load('ddns')
-		]);
-	},
-
-	render: function(data) {
-		var resolved = data[0] || [];
-		var status = data[1] || [];
-		var env = data[2] || [];
-		var logdir = uci.get('ddns', 'global', 'ddns_logdir') || "/var/log/ddns";
-
-		var _this = this;
-
-		var m, s, o;
-
-		m = new form.Map('ddns', _('Dynamic DNS'));
-
-		s = m.section(form.NamedSection, 'global', 'ddns',);
-
-		s.tab('info', _('Information'));
-		s.tab('global', _('Global Settings'));
-
-		o = s.taboption('info', form.DummyValue, '_version', _('Dynamic DNS Version'));
-		o.cfgvalue = function() {
-			return status[this.option];
-		};
-
-		o = s.taboption('info', form.DummyValue, '_enabled', _('State'));
-		o.cfgvalue = function() {
-			var res = status[this.option];
-			if (!res) {
-				this.description = _("Currently DDNS updates are not started at boot or on interface events.") + "<br />" +
-				_("This is the default if you run DDNS scripts by yourself (i.e. via cron with force_interval set to '0')")
-			}
-			return res ? _('DDNS Autostart enabled') : _('DDNS Autostart disabled')
-		};
-
-		o = s.taboption('info', form.Button, '_toggle');
-		o.title      = '&#160;';
-		o.inputtitle = _((status['_enabled'] ? 'stop' : 'start').toUpperCase() + ' DDns');
-		o.inputstyle = 'apply';
-		o.onclick = L.bind(this.handleToggleDDns, this, m);
-
-		o = s.taboption('info', form.Button, '_restart');
-		o.title      = '&#160;';
-		o.inputtitle = _('Restart DDns');
-		o.inputstyle = 'apply';
-		o.onclick = L.bind(this.handleRestartDDns, this, m);
-
-		o = s.taboption('info', form.DummyValue, '_services_list', _('Services list last update'));
-		o.cfgvalue = function() {
-			return status[this.option];
-		};
-
-		o = s.taboption('info', form.Button, '_refresh_services');
-		o.title      = '&#160;';
-		o.inputtitle = _('Update DDns Services List');
-		o.inputstyle = 'apply';
-		o.onclick = L.bind(this.handleRefreshServicesList, this, m);
-
-		// DDns hints
-
-		if (!env['has_ipv6']) {
-			o = s.taboption('info', form.DummyValue, '_no_ipv6');
-			o.rawhtml  = true;
-			o.title = '<b>' + _("IPv6 not supported") + '</b>';
-			o.cfgvalue = function() { return _("IPv6 is currently not (fully) supported by this system") + "<br />" +
-			_("Please follow the instructions on OpenWrt's homepage to enable IPv6 support") + "<br />" +
-			_("or update your system to the latest OpenWrt Release")};
-		}
-
-		if (!env['has_ssl']) {
-			o = s.taboption('info', form.DummyValue, '_no_https');
-			o.titleref = L.url("admin", "system", "opkg")
-			o.rawhtml  = true;
-			o.title = '<b>' + _("HTTPS not supported") + '</b>';
-			o.cfgvalue = function() { return _("Neither GNU Wget with SSL nor cURL installed to support secure updates via HTTPS protocol.") +
-			"<br />- " +
-			_("You should install 'wget' or 'curl' or 'uclient-fetch' with 'libustream-*ssl' package.") +
-			"<br />- " +
-			_("In some versions cURL/libcurl in OpenWrt is compiled without proxy support.")};
-		}
-
-		if (!env['has_bindnet']) {
-			o = s.taboption('info', form.DummyValue, '_no_bind_network');
-			o.titleref = L.url("admin", "system", "opkg")
-			o.rawhtml  = true;
-			o.title = '<b>' + _("Binding to a specific network not supported") + '</b>';
-			o.cfgvalue = function() { return _("Neither GNU Wget with SSL nor cURL installed to select a network to use for communication.") +
-			"<br />- " +
-			_("You should install 'wget' or 'curl' package.") +
-			"<br />- " +
-			_("GNU Wget will use the IP of given network, cURL will use the physical interface.") +
-			"<br />- " +
-			_("In some versions cURL/libcurl in OpenWrt is compiled without proxy support.")};
-		}
-
-		if (!env['has_proxy']) {
-			o = s.taboption('info', form.DummyValue, '_no_proxy');
-			o.titleref = L.url("admin", "system", "opkg")
-			o.rawhtml  = true;
-			o.title = '<b>' + _("cURL without Proxy Support") + '</b>';
-			o.cfgvalue = function() { return _("cURL is installed, but libcurl was compiled without proxy support.") +
-			"<br />- " +
-			_("You should install 'wget' or 'uclient-fetch' package or replace libcurl.") +
-			"<br />- " +
-			_("In some versions cURL/libcurl in OpenWrt is compiled without proxy support.")};
-		}
-
-		if (!env['has_forceip']) {
-			o = s.taboption('info', form.DummyValue, '_no_force_ip');
-			o.titleref = L.url("admin", "system", "opkg")
-			o.rawhtml  = true;
-			o.title = '<b>' + _("Force IP Version not supported") + '</b>';
-			o.cfgvalue = function() { return _("BusyBox's nslookup and Wget do not support to specify " +
-				"the IP version to use for communication with DDNS Provider!") +
-				"<br />- " + _("You should install 'wget' or 'curl' or 'uclient-fetch' package.")
-			};
-		}
-
-		if (!env['has_bindhost']) {
-			o = s.taboption('info', form.DummyValue, '_no_dnstcp');
-			o.titleref = L.url("admin", "system", "opkg")
-			o.rawhtml  = true;
-			o.title = '<b>' + _("DNS requests via TCP not supported") + '</b>';
-			o.cfgvalue = function() { return _("BusyBox's nslookup and hostip do not support to specify to use TCP " +
-				"instead of default UDP when requesting DNS server!") +
-				"<br />- " +
-				_("You should install 'bind-host' or 'knot-host' or 'drill' package for DNS requests.")};
-		}
-
-		if (!env['has_dnsserver']) {
-			o = s.taboption('info', form.DummyValue, '_no_dnsserver');
-			o.titleref = L.url("admin", "system", "opkg")
-			o.rawhtml  = true;
-			o.title = '<b>' + _("Using specific DNS Server not supported") + '</b>';
-			o.cfgvalue = function() { return _("BusyBox's nslookup in the current compiled version " +
-			"does not handle given DNS Servers correctly!") +
-		"<br />- " +
-		_("You should install 'bind-host' or 'knot-host' or 'drill' or 'hostip' package, " +
-			"if you need to specify a DNS server to detect your registered IP.")};
-		}
-
-		if (env['has_ssl'] && !env['has_cacerts']) {
-			o = s.taboption('info', form.DummyValue, '_no_certs');
-			o.titleref = L.url("admin", "system", "opkg")
-			o.rawhtml  = true;
-			o.title = '<b>' + _("No certificates found") + '</b>';
-			o.cfgvalue = function() { return _("If using secure communication you should verify server certificates!") +
-			"<br />- " +
-			_("Install 'ca-certificates' package or needed certificates " +
-				"by hand into /etc/ssl/certs default directory")};
-		}
-
-		// Advanced Configuration Section
-
-		o = s.taboption('global', form.Flag, 'upd_privateip', _("Allow non-public IP's"));
-		o.description = _("Non-public and by default blocked IP's") + ':'
-		+ '<br /><strong>IPv4: </strong>'
-		+ '0/8, 10/8, 100.64/10, 127/8, 169.254/16, 172.16/12, 192.168/16'
-		+ '<br /><strong>IPv6: </strong>'
-		+ '::/32, f000::/4"';
-		o.default = "0";
-		o.optional = true;
-
-		o = s.taboption('global', form.Value, 'ddns_dateformat', _('Date format'));
-		o.description = '<a href="http://www.cplusplus.com/reference/ctime/strftime/" target="_blank">'
-			+ _("For supported codes look here")
-			+ '</a><br />' +
-			_('Current setting: ') + '<b>' + status['_curr_dateformat'] + '</b>';
-		o.default = "%F %R"
-		o.optional = true;
-		o.rmempty = true;
-
-		o = s.taboption('global', form.Value, 'ddns_rundir', _('Status directory'));
-		o.description = _('Directory contains PID and other status information for each running section.');
-		o.default = "/var/run/ddns";
-		o.optional = true;
-		o.rmempty = true;
-
-		o = s.taboption('global', form.Value, 'ddns_logdir', _('Log directory'));
-		o.description = _('Directory contains Log files for each running section.');
-		o.default = "/var/log/ddns";
-		o.optional = true;
-		o.rmempty = true;
-		o.validate = function(section_id, formvalue) {
-			if (formvalue.indexOf('../') !== -1)
-				return _('"../" not allowed in path for Security Reason.')
-
-			return true;
-		}
-
-		o = s.taboption('global', form.Value, 'ddns_loglines', _('Log length'));
-		o.description = _('Number of last lines stored in log files');
-		o.datatype = 'min(1)';
-		o.default = '250';
-
-		if (env['has_wget'] && env['has_curl']) {
-
-			o = s.taboption('global', form.Flag, 'use_curl', _('Use cURL'));
-			o.description = _('If Wget and cURL package are installed, Wget is used for communication by default.');
-			o.default = "0";
-			o.optional = true;
-			o.rmempty = true;
-
-		}
-
-		o = s.taboption('global', form.Value, 'cacert', _('Ca Certs path'));
-		o.description = _('Ca Certs path that will be used to download services data. Set IGNORE to skip certificate validation.');
-		o.placeholder = 'IGNORE';
-
-		o = s.taboption('global', form.Value, 'services_url', _('Services URL Download'));
-		o.description = _('Url used to download services file. By default is the master openwrt ddns package repo.');
-		o.placeholder = 'https://raw.githubusercontent.com/openwrt/packages/master/net/ddns-scripts/files';
-
-		// DDns services
-		s = m.section(form.GridSection, 'service', _('Services'));
-		s.anonymous = true;
-		s.addremove = true;
-		s.addbtntitle = _('Add new services...');
-
-		s.anonymous = true;
-		s.addremove = true;
-		s.sortable  = true;
-
-		s.handleCreateDDnsRule = function(m, name, service_name, ipv6, ev) {
-			var section_id = name.isValid('_new_') ? name.formvalue('_new_') : null,
-				service_value = service_name.isValid('_new_') ? service_name.formvalue('_new_') : null,
-				ipv6_value = ipv6.isValid('_new_') ? ipv6.formvalue('_new_') : null;
-
-			if (section_id == null || section_id == '' || service_value == null || section_id == '' || ipv6_value == null || ipv6_value == '')
-				return;
-
-			return m.save(function() {
-				uci.add('ddns', 'service', section_id);
-				uci.set('ddns', section_id, 'service_name', service_value);
-				uci.set('ddns', section_id, 'use_ipv6', ipv6_value);
-			}).then(L.bind(m.children[1].renderMoreOptionsModal, m.children[1], section_id));
-		};
-
-		s.handleAdd = function(ev) {
-			var m2 = new form.Map('ddns'),
-				s2 = m2.section(form.NamedSection, '_new_'),
-				name, ipv6, service_name;
-
-			s2.render = function() {
-				return Promise.all([
-					{},
-					this.renderUCISection('_new_')
-				]).then(this.renderContents.bind(this));
-			};
-
-			name = s2.option(form.Value, 'name', _('Name'));
-			name.rmempty = false;
-			name.datatype = 'uciname';
-			name.placeholder = _('New DDns Service…');
-			name.validate = function(section_id, value) {
-				if (uci.get('ddns', value) != null)
-					return _('The service name is already used');
-
-				return true;
-			};
-
-			ipv6 = s2.option( form.ListValue, 'use_ipv6',
-				_("IP address version"),
-				_("Defines which IP address 'IPv4/IPv6' is send to the DDNS provider"));
-			ipv6.default = '0';
-			ipv6.value("0", _("IPv4-Address"))
-			if (env["has_ipv6"]) {
-				ipv6.value("1", _("IPv6-Address"))
-			}
-
-			service_name = s2.option(form.ListValue, 'service_name',
-					String.format('%s', _("DDNS Service provider")));
-			service_name.value('-',"-- " + _("custom") + " --");
-			for (var elem in _this.services)
-				service_name.value(elem);
-			service_name.validate = function(section_id, value) {
-				if (value == '') return _("Select a service");
-				if (s2.service_supported == null) return _("Checking the service support...");
-				if (!s2.service_supported) return _("Service doesn't support this ip type");
-				return true;
-			};
-
-			ipv6.onchange = L.bind(_this.handleCheckService, _this, s2, service_name, ipv6);
-			service_name.onchange = L.bind(_this.handleCheckService, _this, s2, service_name, ipv6);
-
-			m2.render().then(L.bind(function(nodes) {
-				ui.showModal(_('Add new services...'), [
-					nodes,
-					E('div', { 'class': 'right' }, [
-						E('button', {
-							'class': 'btn',
-							'click': ui.hideModal
-						}, _('Cancel')), ' ',
-						E('button', {
-							'class': 'cbi-button cbi-button-positive important',
-							'click': ui.createHandlerFn(this, 'handleCreateDDnsRule', m, name, service_name, ipv6)
-						}, _('Create service'))
-					])
-				], 'cbi-modal');
-
-				nodes.querySelector('[id="%s"] input[type="text"]'.format(name.cbid('_new_'))).focus();
-			}, this));
-		};
-
-		s.renderRowActions = function(section_id) {
-			var tdEl = this.super('renderRowActions', [ section_id, _('Edit') ]),
-				cfg_enabled = uci.get('ddns', section_id, 'enabled'),
-				reload_opt = {
-					'class': 'cbi-button cbi-button-neutral reload',
-					'click': ui.createHandlerFn(_this, 'handleReloadDDnsRule', m, section_id),
-					'title': _('Reload this service'),
-				},
-				stop_opt = {
-					'class': 'cbi-button cbi-button-neutral stop',
-					'click': ui.createHandlerFn(_this, 'HandleStopDDnsRule', m, section_id),
-					'title': _('Stop this service'),
-				};
-
-			if (status['_enabled'] == 0 || cfg_enabled == 0)
-				reload_opt['disabled'] = 'disabled';
-
-			if (!resolved[section_id] || !resolved[section_id].pid ||
-					(resolved[section_id].pid && cfg_enabled == '1'))
-				stop_opt['disabled'] = 'disabled';
-
-			dom.content(tdEl.lastChild, [
-				E('button', stop_opt, _('Stop')),
-				E('button', reload_opt, _('Reload')),
-				tdEl.lastChild.childNodes[0],
-				tdEl.lastChild.childNodes[1],
-				tdEl.lastChild.childNodes[2]
-			]);
-
-			return tdEl;
-		};
-
-		s.modaltitle = function(section_id) {
-			return _('DDns Service') + ' » ' + section_id;
-		};
-
-		s.addModalOptions = function(s, section_id) {
-
-			var service = uci.get('ddns', section_id, 'service_name') || '-',
-				ipv6 = uci.get('ddns', section_id, 'use_ipv6'), service_name, use_ipv6;
-
-			return _this.handleGetServiceData(service).then(L.bind(function (service_data) {
-				s.service_available = true;
-				s.service_supported = true;
-
-				if (service != '-') {
-					if (!service_data)
-						s.service_available = false;
-					else {
-						service_data = JSON.parse(service_data);
-						if (ipv6 == "1" && !service_data.ipv6)
-							s.service_supported = false;
-					}
-				}
-
-				s.tab('basic', _('Basic Settings'));
-				s.tab('advanced', _('Advanced Settings'));
-				s.tab('timer', _('Timer Settings'));
-				s.tab('logview', _('Log File Viewer'));
-
-				o = s.taboption('basic', form.Flag, 'enabled',
-					_('Enabled'),
-					_("If this service section is disabled it could not be started.")
-					+ "<br />" +
-					_("Neither from LuCI interface nor from console."));
-				o.modalonly = true;
-				o.rmempty  = false;
-				o.default = '1';
-
-				o = s.taboption('basic', form.Value, 'lookup_host',
-					_("Lookup Hostname"),
-					_("Hostname/FQDN to validate, if IP update happen or necessary"));
-				o.rmempty = false;
-				o.placeholder = "myhost.example.com";
-				o.datatype = 'and(minlength(3),hostname("strict"))';
-				o.modalonly = true;
-
-				use_ipv6 = s.taboption('basic', form.ListValue, 'use_ipv6',
-					_("IP address version"),
-					_("Defines which IP address 'IPv4/IPv6' is send to the DDNS provider"));
-				use_ipv6.default = '0';
-				use_ipv6.modalonly = true;
-				use_ipv6.rmempty  = false;
-				use_ipv6.value("0", _("IPv4-Address"))
-				if (env["has_ipv6"]) {
-					use_ipv6.value("1", _("IPv6-Address"))
-				}
-
-				service_name = s.taboption('basic', form.ListValue, 'service_name',
-					String.format('%s', _("DDNS Service provider")));
-				service_name.modalonly = true;
-				service_name.value('-',"-- " + _("custom") + " --");
-				for (var elem in _this.services)
-					service_name.value(elem);
-				service_name.cfgvalue = function(section_id) {
-					return uci.get('ddns', section_id, 'service_name') || '-';
-				};
-				service_name.write = function(section_id, service) {
-					if (service != '-') {
-						uci.set('ddns', section_id, 'update_url', null);
-						uci.set('ddns', section_id, 'update_script', null);
-						return uci.set('ddns', section_id, 'service_name', service);
-					}
-					return uci.set('ddns', section_id, 'service_name', null);
-				};
-				service_name.validate = function(section_id, value) {
-					if (value == '') return _("Select a service");
-					if (s.service_available == null) return _("Checking the service support...");
-					if (!s.service_available) return _('Service not installed');
-					if (!s.service_supported) return _("Service doesn't support this ip type");
-					return true;
-				};
-
-				service_name.onchange = L.bind(_this.handleCheckService, _this, s, service_name, use_ipv6);
-				use_ipv6.onchange = L.bind(_this.handleCheckService, _this, s, service_name, use_ipv6);
-
-				if (!s.service_available) {
-					o = s.taboption('basic', form.Button, '_download_service');
-					o.modalonly  = true;
-					o.title      = _('Service not installed');
-					o.inputtitle = _('Install Service');
-					o.inputstyle = 'apply';
-					o.onclick = L.bind(_this.handleInstallService,
-						this, m, service_name, section_id, s.section, _this)
-				}
-
-				if (!s.service_supported) {
-					o = s.taboption('basic', form.DummyValue, '_not_supported', '&nbsp');
-					o.cfgvalue = function () {
-						return _("Service doesn't support this ip type")
-					};
-				}
-
-				var service_switch = s.taboption('basic', form.Button, '_switch_proto');
-				service_switch.modalonly  = true;
-				service_switch.title      = _('Really switch service?');
-				service_switch.inputtitle = _('Switch service');
-				service_switch.inputstyle = 'apply';
-				service_switch.onclick = L.bind(function(ev) {
-					if (!s.service_supported) return;
-
-					return s.map.save()
-						.then(L.bind(m.load, m))
-						.then(L.bind(m.render, m))
-						.then(L.bind(this.renderMoreOptionsModal, this, s.section));
-				}, this);
-
-				if (s.service_available && s.service_supported) {
-
-					o = s.taboption('basic', form.Value, 'update_url',
-						_("Custom update-URL"),
-						_("Update URL to be used for updating your DDNS Provider.")
-						+ "<br />" +
-						_("Follow instructions you will find on their WEB page."));
-					o.modalonly = true;
-					o.rmempty = true;
-					o.optional = true;
-					o.depends("service_name","-");
-					o.validate = function(section_id, value) {
-						var other = this.section.children.filter(function(o) { return o.option == 'update_script' })[0].formvalue(section_id);
-
-						if ((value == "" && other == "") || (value != "" && other != "")) {
-							return _("Insert a Update Script OR a Update URL");
-						}
-
-						return true;
-					};
-
-					o = s.taboption('basic', form.Value, 'update_script',
-						_("Custom update-script"),
-						_("Custom update script to be used for updating your DDNS Provider."));
-					o.modalonly = true;
-					o.rmempty = true;
-					o.optional = true;
-					o.depends("service_name","-");
-					o.validate = function(section_id, value) {
-						var other = this.section.children.filter(function(o) { return o.option == 'update_url' })[0].formvalue(section_id);
-
-						if ((value == "" && other == "") || (value != "" && other != "")) {
-							return _("Insert a Update Script OR a Update URL");
-						}
-
-						return true;
-					};
-
-					o = s.taboption('basic', form.Value, 'domain',
-						_("Domain"),
-						_("Replaces [DOMAIN] in Update-URL (URL-encoded)"));
-					o.modalonly = true;
-					o.rmempty = false;
-
-					o = s.taboption('basic', form.Value, 'username',
-						_("Username"),
-						_("Replaces [USERNAME] in Update-URL (URL-encoded)"));
-					o.modalonly = true;
-					o.rmempty = false;
-
-					o = s.taboption('basic', form.Value, 'password',
-						_("Password"),
-						_("Replaces [PASSWORD] in Update-URL (URL-encoded)"));
-					o.password = true;
-					o.modalonly = true;
-					o.rmempty = false;
-
-					o = s.taboption('basic', form.Value, 'param_enc',
-						_("Optional Encoded Parameter"),
-						_("Optional: Replaces [PARAMENC] in Update-URL (URL-encoded)"));
-					o.optional = true;
-					o.modalonly = true;
-
-					o = s.taboption('basic', form.Value, 'param_opt',
-						_("Optional Parameter"),
-						_("Optional: Replaces [PARAMOPT] in Update-URL (NOT URL-encoded)"));
-					o.optional = true;
-					o.modalonly = true;
-
-					if (env['has_ssl']) {
-						o = s.taboption('basic', form.Flag, 'use_https',
-							_("Use HTTP Secure"),
-							_("Enable secure communication with DDNS provider"));
-						o.optional = true;
-						o.modalonly = true;
-
-						o = s.taboption('basic', form.Value, 'cacert',
-							_("Path to CA-Certificate"),
-							_("directory or path/file")
-							+ "<br />" +
-							_("or")
-							+ '<b>' + " IGNORE " + '</b>' +
-							_("to run HTTPS without verification of server certificates (insecure)"));
-						o.modalonly = true;
-						o.depends("use_https", "1");
-						o.placeholder = "/etc/ssl/certs";
-						o.rmempty = false;
-					};
-
-
-					o = s.taboption('advanced', form.ListValue, 'ip_source',
-						_("IP address source"),
-						_("Defines the source to read systems IP-Address from, that will be send to the DDNS provider"));
-					o.modalonly = true;
-					o.default = "network";
-					o.value("network", _("Network"));
-					o.value("web", _("URL"));
-					o.value("interface", _("Interface"));
-					o.value("script", _("Script"));
-					o.write = function(section_id, formvalue) {
-						switch(formvalue) {
-							case 'network':
-								uci.set('ddns', section_id, "ip_url",null);
-								uci.set('ddns', section_id, "ip_interface",null);
-								uci.set('ddns', section_id, "ip_script",null);
-								break;
-							case 'web':
-								uci.set('ddns', section_id, "ip_network",null);
-								uci.set('ddns', section_id, "ip_interface",null);
-								uci.set('ddns', section_id, "ip_script",null);
-								break;
-							case 'interface':
-								uci.set('ddns', section_id, "ip_network",null);
-								uci.set('ddns', section_id, "ip_url",null);
-								uci.set('ddns', section_id, "ip_script",null);
-								break;
-							case 'script':
-								uci.set('ddns', section_id, "ip_network",null);
-								uci.set('ddns', section_id, "ip_url",null);
-								uci.set('ddns', section_id, "ip_interface",null);
-								break;
-							default:
-								break;
-						};
-
-						return uci.set('ddns', section_id, 'ip_source', formvalue )
-					};
-
-					o = s.taboption('advanced', widgets.NetworkSelect, 'ip_network',
-						_("Network"),
-						_("Defines the network to read systems IP-Address from"));
-					o.depends('ip_source','network');
-					o.modalonly = true;
-					o.default = 'wan';
-					o.multiple = false;
-
-					o = s.taboption('advanced', form.Value, 'ip_url',
-						_("URL to detect"),
-						_("Defines the Web page to read systems IP-Address from.")
-						+ '<br />' +
-						String.format('%s %s', _('Example for IPv4'), ': http://checkip.dyndns.com')
-						+ '<br />' +
-						String.format('%s %s', _('Example for IPv6'), ': http://checkipv6.dyndns.com'));
-					o.depends("ip_source", "web")
-					o.modalonly = true;
-
-					o = s.taboption('advanced', widgets.DeviceSelect, 'ip_interface',
-						_("Interface"),
-						_("Defines the interface to read systems IP-Address from"));
-					o.modalonly = true;
-					o.depends("ip_source", "interface")
-					o.multiple = false;
-					o.default = 'wan';
-
-					o = s.taboption('advanced', form.Value, 'ip_script',
-						_("Script"),
-						_("User defined script to read systems IP-Address"));
-					o.modalonly = true;
-					o.depends("ip_source", "script")
-					o.placeholder = "/path/to/script.sh"
-
-					o = s.taboption('advanced', widgets.DeviceSelect, 'interface',
-						_("Event Network"),
-						_("Network on which the ddns-updater scripts will be started"));
-					o.modalonly = true;
-					o.multiple = false;
-					o.default = 'wan';
-					o.depends("ip_source", "web");
-					o.depends("ip_source", "script");
-
-					o = s.taboption('advanced', form.DummyValue, '_interface',
-						_("Event Network"),
-						_("Network on which the ddns-updater scripts will be started"));
-					o.depends("ip_source", "interface");
-					o.depends("ip_source", "network");
-					o.forcewrite = true;
-					o.modalonly = true;
-					o.cfgvalue = function(section_id) {
-						return uci.get('ddns', section_id, 'interface') || _('This will be autoset to the selected interface');
-					};
-					o.write = function(section_id) {
-						var opt = this.section.children.filter(function(o) { return o.option == 'ip_source' })[0].formvalue(section_id);
-						var val = this.section.children.filter(function(o) { return o.option == 'ip_'+opt })[0].formvalue(section_id);
-						return uci.set('ddns', section_id, 'interface', val);
-					};
-
-					if (env['has_bindnet']) {
-						o = s.taboption('advanced', widgets.ZoneSelect, 'bind_network',
-							_("Bind Network"),
-							_('OPTIONAL: Network to use for communication')
-							+ '<br />' +
-							_("Network on which the ddns-updater scripts will be started"));
-						o.depends("ip_source", "web");
-						o.optional = true;
-						o.rmempty = true;
-						o.modalonly = true;
-					}
-
-					if (env['has_forceip']) {
-						o = s.taboption('advanced', form.Flag, 'force_ipversion',
-							_("Force IP Version"),
-							_('OPTIONAL: Force the usage of pure IPv4/IPv6 only communication.'));
-						o.optional = true;
-						o.rmempty = true;
-						o.modalonly = true;
-					}
-
-					if (env['has_dnsserver']) {
-						o = s.taboption("advanced", form.Value, "dns_server",
-							_("DNS-Server"),
-							_("OPTIONAL: Use non-default DNS-Server to detect 'Registered IP'.")
-							+ "<br />" +
-							_("Format: IP or FQDN"));
-						o.placeholder = "mydns.lan"
-						o.optional = true;
-						o.rmempty = true;
-						o.modalonly = true;
-					}
-
-					if (env['has_bindhost']) {
-						o = s.taboption("advanced", form.Flag, "force_dnstcp",
-							_("Force TCP on DNS"),
-							_("OPTIONAL: Force the use of TCP instead of default UDP on DNS requests."));
-						o.optional = true;
-						o.rmempty = true;
-						o.modalonly = true;
-					}
-
-					if (env['has_proxy']) {
-						o = s.taboption("advanced", form.Value, "proxy",
-							_("PROXY-Server"),
-							_("OPTIONAL: Proxy-Server for detection and updates.")
-							+ "<br />" +
-							String.format('%s: <b>%s</b>', _("Format"), "[user:password@]proxyhost:port")
-							+ "<br />" +
-							String.format('%s: <b>%s</b>', _("IPv6 address must be given in square brackets"), "[2001:db8::1]:8080"));
-						o.optional = true;
-						o.rmempty = true;
-						o.modalonly = true;
-					}
-
-					o = s.taboption("advanced", form.ListValue, "use_syslog",
-						_("Log to syslog"),
-						_("Writes log messages to syslog. Critical Errors will always be written to syslog."));
-					o.modalonly = true;
-					o.default = "2"
-					o.optional = true;
-					o.value("0", _("No logging"))
-					o.value("1", _("Info"))
-					o.value("2", _("Notice"))
-					o.value("3", _("Warning"))
-					o.value("4", _("Error"))
-
-					o = s.taboption("advanced", form.Flag, "use_logfile",
-						_("Log to file"));
-					o.default = '1';
-					o.optional = true;
-					o.modalonly = true;
-					o.cfgvalue = function(section_id) {
-						this.description = _("Writes detailed messages to log file. File will be truncated automatically.") + "<br />" +
-						_("File") + ': "' + logdir + '/' + section_id + '.log"';
-						return uci.get('ddns', section_id, 'use_logfile');
-					};
-
-
-					o = s.taboption("timer", form.Value, "check_interval",
-						_("Check Interval"));
-					o.placeholder = "30";
-					o.modalonly = true;
-					o.datatype = 'uinteger';
-					o.validate = function(section_id, formvalue) {
-						var unit = this.section.children.filter(function(o) { return o.option == 'check_unit' })[0].formvalue(section_id),
-							time_to_sec = _this.time_res[unit || 'minutes'] * formvalue;
-
-						if (formvalue && time_to_sec < 300)
-							return _('Values below 5 minutes == 300 seconds are not supported');
-
-						return true;
-					};
-
-					o = s.taboption("timer", form.ListValue, "check_unit",
-						_('Check Unit'),
-						_("Interval unit to check for changed IP"));
-					o.modalonly = true;
-					o.default  = "minutes"
-					o.value("seconds", _("seconds"));
-					o.value("minutes", _("minutes"));
-					o.value("hours", _("hours"));
-
-					o = s.taboption("timer", form.Value, "force_interval",
-						_("Force Interval"),
-						_("Interval to force updates send to DDNS Provider")
-						+ "<br />" +
-						_("Setting this parameter to 0 will force the script to only run once"));
-					o.placeholder = "72";
-					o.optional = true;
-					o.modalonly = true;
-					o.datatype = 'uinteger';
-					o.validate = function(section_id, formvalue) {
-
-						if (!formvalue)
-							return true;
-
-						var check_unit = this.section.children.filter(function(o) { return o.option == 'check_unit' })[0].formvalue(section_id),
-							check_val = this.section.children.filter(function(o) { return o.option == 'check_interval' })[0].formvalue(section_id),
-							force_unit = this.section.children.filter(function(o) { return o.option == 'force_unit' })[0].formvalue(section_id),
-							check_to_sec = _this.time_res[check_unit || 'minutes'] * ( check_val || '30'),
-							force_to_sec = _this.time_res[force_unit || 'minutes'] * formvalue;
-
-						if (force_to_sec != 0 && force_to_sec < check_to_sec)
-							return _("Values lower 'Check Interval' except '0' are not supported");
-
-						return true;
-					};
-
-					o = s.taboption("timer", form.ListValue, "force_unit",
-						_('Force Unit'),
-						_("Interval unit to force updates send to DDNS Provider"));
-					o.modalonly = true;
-					o.optional = true;
-					o.default  = "minutes"
-					o.value("minutes", _("minutes"));
-					o.value("hours", _("hours"));
-					o.value("days", _("days"));
-
-					o = s.taboption("timer", form.Value, "retry_count",
-						_("Error Retry Counter"),
-						_("On Error the script will stop execution after given number of retrys")
-						+ "<br />" +
-						_("The default setting of '0' will retry infinite."));
-					o.placeholder = "0";
-					o.optional = true;
-					o.modalonly = true;
-					o.datatype = 'uinteger';
-
-					o = s.taboption("timer", form.Value, "retry_interval",
-						_("Error Retry Interval"),
-						_("On Error the script will stop execution after given number of retrys")
-						+ "<br />" +
-						_("The default setting of '0' will retry infinite."));
-					o.placeholder = "60";
-					o.optional = true;
-					o.modalonly = true;
-					o.datatype = 'uinteger';
-
-					o = s.taboption("timer", form.ListValue, "retry_unit",
-						_('Retry Unit'),
-						_("On Error the script will retry the failed action after given time"));
-					o.modalonly = true;
-					o.optional = true;
-					o.default  = "seconds"
-					o.value("seconds", _("seconds"));
-					o.value("minutes", _("minutes"));
-
-					o = s.taboption('logview', form.Button, '_read_log');
-					o.title      = '';
-					o.depends('use_logfile','1');
-					o.modalonly = true;
-					o.inputtitle = _('Read / Reread log file');
-					o.inputstyle = 'apply';
-					o.onclick = L.bind(function(ev, section_id) {
-						return _this.callGetLogServices(section_id).then(L.bind(log_box.update_log, log_box));
-					}, this);
-
-					var log_box = s.taboption("logview", form.DummyValue, "_logview");
-					log_box.depends('use_logfile','1');
-					log_box.modalonly = true;
-
-					log_box.update_log = L.bind(function(view, log_data) {
-						return document.getElementById('log_area').textContent = log_data.result;
-					}, o, this);
-
-					log_box.render = L.bind(function() {
-						return E([
-							E('p', {}, _('This is the current content of the log file in ') + logdir + ' for this service.'),
-							E('p', {}, E('textarea', { 'style': 'width:100%', 'rows': 20, 'readonly' : 'readonly', 'id' : 'log_area' }, _('Please press [Read] button') ))
-						]);
-					}, o, this);
-				}
-
-				for (var i = 0; i < s.children.length; i++) {
-					o = s.children[i];
-					switch (o.option) {
-					case '_switch_proto':
-						o.depends({ service_name : service, use_ipv6: ipv6, "!reverse": true })
-						continue;
-					case 'enabled':
-					case 'service_name':
-					case 'use_ipv6':
-					case 'update_script':
-					case 'update_url':
-					case 'lookup_host':
-						continue;
-
-					default:
-						if (o.deps.length)
-							for (var j = 0; j < o.deps.length; j++) {
-								o.deps[j].service_name = service;
-								o.deps[j].use_ipv6 = ipv6;
-							}
-						else
-							o.depends({service_name: service, use_ipv6: ipv6 });
-					}
-				}
-			}, this)
-		)};
-
-		o = s.option(form.DummyValue, '_cfg_status', _('Status'));
-		o.modalonly = false;
-		o.textvalue = function(section_id) {
-			var text = '<b>' + _('Not Running') + '</b>';
-
-			if (resolved[section_id] && resolved[section_id].pid)
-				text = '<b>' + _('Running') + '</b> : ' + resolved[section_id].pid;
-
-			return text;
-		};
-
-		o = s.option(form.DummyValue, '_cfg_name', _('Name'));
-		o.modalonly = false;
-		o.textvalue = function(section_id) {
-			return '<b>' + section_id + '</b>';
-		};
-
-		o = s.option(form.DummyValue, '_cfg_detail_ip', _('Lookup Hostname') + "<br />" + _('Registered IP'));
-		o.rawhtml   = true;
-		o.modalonly = false;
-		o.textvalue = function(section_id) {
-			var host = uci.get('ddns', section_id, 'lookup_host') || _('Configuration Error'),
-				ip = _('No Data');
-			if (resolved[section_id] && resolved[section_id].ip)
-				ip = resolved[section_id].ip;
-
-			return host + '<br />' + ip;
-		};
-
-		o = s.option(form.Flag, 'enabled', _('Enabled'));
-		o.rmempty  = false;
-		o.editable = true;
-		o.modalonly = false;
-
-		o = s.option(form.DummyValue, '_cfg_update', _('Last Update') + "<br />" + _('Next Update'));
-		o.rawhtml   = true;
-		o.modalonly = false;
-		o.textvalue = function(section_id) {
-			var last_update = _('Never'), next_update = _('Unknown');
-			if (resolved[section_id]) {
-				if (resolved[section_id].last_update)
-					last_update = resolved[section_id].last_update;
-				if (resolved[section_id].next_update)
-					next_update = _this.NextUpdateStrings[resolved[section_id].next_update] || resolved[section_id].next_update;
-			}
-
-			return  last_update + '<br />' + next_update;
-		};
-
-		return m.render().then(L.bind(function(m, nodes) {
-			poll.add(L.bind(function() {
-				return Promise.all([
-					this.callDDnsGetServicesStatus(),
-					this.callDDnsGetStatus()
-				]).then(L.bind(this.poll_status, this, nodes));
-			}, this), 5);
-			return nodes;
-		}, this, m));
-	}
-});
diff -uprN c/feeds/luci/applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js d/feeds/luci/applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js
--- c/feeds/luci/applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js	2024-01-06 20:23:53.585014376 +0800
+++ d/feeds/luci/applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js	1970-01-01 08:00:00.000000000 +0800
@@ -1,47 +0,0 @@
-'use strict';
-'require baseclass';
-'require rpc';
-'require uci';
-
-return baseclass.extend({
-	title: _('Dynamic DNS'),
-
-	callDDnsGetServicesStatus: rpc.declare({
-		object: 'luci.ddns',
-		method: 'get_services_status',
-		expect: {  }
-	}),
-
-	load: function() {
-		return Promise.all([
-			this.callDDnsGetServicesStatus(),
-			uci.load('ddns')
-		]);
-	},
-
-	render: function(data) {
-		var services = data[0];
-
-		var table = E('table', { 'class': 'table' }, [
-			E('tr', { 'class': 'tr table-titles' }, [
-				E('th', { 'class': 'th' }, _('Configuration')),
-				E('th', { 'class': 'th' }, _('Next Update')),
-				E('th', { 'class': 'th' }, _('Lookup Hostname')),
-				E('th', { 'class': 'th' }, _('Registered IP')),
-				E('th', { 'class': 'th' }, _('Network'))
-			])
-		]);
-
-		cbi_update_table(table, Object.keys(services).map(function(key, index) {
-			return [
-				key,
-				services[key].next_update ? _(services[key].next_update) : _('Unknown'),
-				uci.get('ddns',key,'lookup_host'),
-				services[key].ip ? services[key].ip : _('No Data'),
-				(uci.get('ddns',key,'use_ipv6') == '1' ? 'IPv6' : 'IPv4') + ' / ' + uci.get('ddns',key,'interface')
-			];
-		}), E('em', _('There is no service configured.')));
-
-		return E([table]);
-	}
-});
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/controller/ddns.lua d/feeds/luci/applications/luci-app-ddns/luasrc/controller/ddns.lua
--- c/feeds/luci/applications/luci-app-ddns/luasrc/controller/ddns.lua	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/controller/ddns.lua	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,339 @@
+-- Copyright 2008 Steven Barth <steven@midlink.org>
+-- Copyright 2008 Jo-Philipp Wich <jow@openwrt.org>
+-- Copyright 2013 Manuel Munz <freifunk at somakoma dot de>
+-- Copyright 2014-2018 Christian Schoenebeck <christian dot schoenebeck at gmail dot com>
+-- Licensed to the public under the Apache License 2.0.
+
+module("luci.controller.ddns", package.seeall)
+
+local NX   = require "nixio"
+local NXFS = require "nixio.fs"
+local DISP = require "luci.dispatcher"
+local HTTP = require "luci.http"
+local I18N = require "luci.i18n" 		-- not globally avalible here
+local IPKG = require "luci.model.ipkg"
+local SYS  = require "luci.sys"
+local UCI  = require "luci.model.uci"
+local UTIL = require "luci.util"
+local DDNS = require "luci.tools.ddns"		-- ddns multiused functions
+
+luci_helper = "/usr/lib/ddns/dynamic_dns_lucihelper.sh"
+
+local srv_name    = "ddns-scripts"
+local srv_ver_min = "2.7.7"			-- minimum version of service required
+local app_name    = "luci-app-ddns"
+local app_title   = "Dynamic DNS"
+local app_version = "2.4.9-1"
+
+local translate = I18N.translate
+
+function index()
+	local nxfs	= require "nixio.fs"		-- global definitions not available
+	local sys	= require "luci.sys"		-- in function index()
+	local muci	= require "luci.model.uci"
+
+	-- no config create an empty one
+	if not nxfs.access("/etc/config/ddns") then
+		nxfs.writefile("/etc/config/ddns", "")
+	end
+
+	-- preset new option "lookup_host" if not already defined
+	local uci = muci.cursor()
+	local commit = false
+	uci:foreach("ddns", "service", function (s)
+		if not s["lookup_host"] and s["domain"] then
+			uci:set("ddns", s[".name"], "lookup_host", s["domain"])
+			commit = true
+		end
+	end)
+	if commit then uci:commit("ddns") end
+	uci:unload("ddns")
+
+	entry( {"admin", "services", "ddns"}, cbi("ddns/overview"), _("Dynamic DNS"), 59)
+	entry( {"admin", "services", "ddns", "detail"}, cbi("ddns/detail"), nil ).leaf = true
+	entry( {"admin", "services", "ddns", "hints"}, cbi("ddns/hints",
+		{hideapplybtn=true, hidesavebtn=true, hideresetbtn=true}), nil ).leaf = true
+	entry( {"admin", "services", "ddns", "global"}, cbi("ddns/global"), nil ).leaf = true
+	entry( {"admin", "services", "ddns", "logview"}, call("logread") ).leaf = true
+	entry( {"admin", "services", "ddns", "startstop"}, post("startstop") ).leaf = true
+	entry( {"admin", "services", "ddns", "status"}, call("status") ).leaf = true
+end
+
+-- Application specific information functions
+function app_description()
+	local tmp = {}
+	tmp[#tmp+1] =	translate("Dynamic DNS allows that your router can be reached with \
+								a fixed hostname while having a dynamically changing IP address.")
+	tmp[#tmp+1] =	[[<br />]]
+	tmp[#tmp+1] =	translate("OpenWrt Wiki") .. ": "
+	tmp[#tmp+1] =	[[<a href="https://openwrt.org/docs/guide-user/services/ddns/client" target="_blank">]]
+	tmp[#tmp+1] =	translate("DDNS Client Documentation")
+	tmp[#tmp+1] =	[[</a>]]
+	tmp[#tmp+1] =	" --- "
+	tmp[#tmp+1] =	[[<a href="https://openwrt.org/docs/guide-user/base-system/ddns" target="_blank">]]
+	tmp[#tmp+1] =	translate("DDNS Client Configuration")
+	tmp[#tmp+1] =	[[</a>]]
+	
+	return table.concat(tmp)
+end
+function app_title_back()
+	local tmp = {}
+	tmp[#tmp+1] = 	[[<a href="]]
+	tmp[#tmp+1] =	DISP.build_url("admin", "services", "ddns")
+	tmp[#tmp+1] =	[[">]]
+	tmp[#tmp+1] =	  translate(app_title)
+	tmp[#tmp+1] = 	[[</a>]]
+	return table.concat(tmp)
+end
+
+-- Standardized application/service functions
+function app_title_main()
+	local tmp = {}
+	tmp[#tmp+1] = 	[[<a href="javascript:alert(']]
+	tmp[#tmp+1] = 		 translate("Version Information")
+	tmp[#tmp+1] = 		 [[\n\n]] .. app_name
+	tmp[#tmp+1] = 		 [[\n]] .. translate("Version") .. [[: ]] .. app_version
+	tmp[#tmp+1] = 		 [[\n\n]] .. srv_name .. [[ ]] .. translate("required") .. [[:]]
+	tmp[#tmp+1] = 		 [[\n]] .. translate("Version") .. [[: ]]
+	tmp[#tmp+1] = 			 srv_ver_min .. [[ ]] .. translate("or higher")
+	tmp[#tmp+1] = 		 [[\n\n]] .. srv_name .. [[ ]] .. translate("installed") .. [[:]]
+	tmp[#tmp+1] = 		 [[\n]] .. translate("Version") .. [[: ]]
+	tmp[#tmp+1] = 			 (service_version() or translate("NOT installed"))
+	tmp[#tmp+1] = 		 [[\n\n]]
+	tmp[#tmp+1] = 	 [[')">]]
+	tmp[#tmp+1] = 	 translate(app_title)
+	tmp[#tmp+1] = 	 [[</a>]]
+		
+	return table.concat(tmp)
+end
+
+function service_version()
+	
+	local srv_ver_cmd = luci_helper .. " -V | awk {'print $2'} "
+	local ver
+
+	if IPKG then
+		ver = IPKG.info(srv_name)[srv_name].Version
+	else
+		ver = UTIL.exec(srv_ver_cmd)
+	end
+	
+	if ver and #ver > 0 then return ver or nil end
+	
+end
+
+function service_ok()
+	return	IPKG.compare_versions((service_version() or "0"), ">=", srv_ver_min)
+end
+
+-- internal function to read all sections status and return data array
+local function _get_status()
+	local uci	 = UCI.cursor()
+	local service	 = SYS.init.enabled("ddns") and 1 or 0
+	local url_start	 = DISP.build_url("admin", "system", "startup")
+	local data	 = {}	-- Array to transfer data to javascript
+
+	data[#data+1] 	= {
+		enabled	   = service,		-- service enabled
+		url_up	   = url_start,		-- link to enable DDS (System-Startup)
+	}
+
+	uci:foreach("ddns", "service", function (s)
+
+		-- Get section we are looking at
+		-- and enabled state
+		local section	= s[".name"]
+		local enabled	= tonumber(s["enabled"]) or 0
+		local datelast	= "_empty_"	-- formatted date of last update
+		local datenext	= "_empty_"	-- formatted date of next update
+		local datenextstat = nil
+
+		-- get force seconds
+		local force_seconds = DDNS.calc_seconds(
+				tonumber(s["force_interval"]) or 72 ,
+				s["force_unit"] or "hours" )
+		-- get/validate pid and last update
+		local pid      = DDNS.get_pid(section)
+		local uptime   = SYS.uptime()
+		local lasttime = DDNS.get_lastupd(section)
+		if lasttime > uptime then 	-- /var might not be linked to /tmp
+			lasttime = 0 		-- and/or not cleared on reboot
+		end
+
+		-- no last update happen
+		if lasttime == 0 then
+			datelast = "_never_"
+
+		-- we read last update
+		else
+			-- calc last update
+			--             sys.epoch - sys uptime   + lastupdate(uptime)
+			local epoch = os.time() - uptime + lasttime
+			-- use linux date to convert epoch
+			datelast = DDNS.epoch2date(epoch)
+			-- calc and fill next update
+			datenext = DDNS.epoch2date(epoch + force_seconds)
+		end
+
+		-- process running but update needs to happen
+		-- problems if force_seconds > uptime
+		force_seconds = (force_seconds > uptime) and uptime or force_seconds
+		if pid > 0 and ( lasttime + force_seconds - uptime ) <= 0 then
+			datenext = "_verify_"
+			datenextstat = translate("Verify")
+
+		-- run once
+		elseif force_seconds == 0 then
+			datenext = "_runonce_"
+			datenextstat = translate("Run once")
+
+		-- no process running and NOT enabled
+		elseif pid == 0 and enabled == 0 then
+			datenext  = "_disabled_"
+			datenextstat = translate("Disabled")
+
+		-- no process running and enabled
+		elseif pid == 0 and enabled ~= 0 then
+			datenext = "_stopped_"
+			datenextstat = translate("Stopped")
+		end
+
+		-- get/set monitored interface and IP version
+		local iface	= s["interface"] or "wan"
+		local use_ipv6	= tonumber(s["use_ipv6"]) or 0
+		local ipv = (use_ipv6 == 1) and "IPv6" or "IPv4"
+		iface = ipv .. " / " .. iface
+
+		-- try to get registered IP
+		local lookup_host = s["lookup_host"] or "_nolookup_"
+
+		local chk_sec  = DDNS.calc_seconds(
+					tonumber(s["check_interval"]) or 10,
+					s["check_unit"] or "minutes" )
+		local reg_ip = DDNS.get_regip(section, chk_sec)
+		
+		if reg_ip == "NOFILE" then
+			local dnsserver	= s["dns_server"] or ""
+			local force_ipversion = tonumber(s["force_ipversion"] or 0)
+			local force_dnstcp = tonumber(s["force_dnstcp"] or 0)
+			local is_glue = tonumber(s["is_glue"] or 0)
+			local command = luci_helper .. [[ -]]
+			if (use_ipv6 == 1) then command = command .. [[6]] end
+			if (force_ipversion == 1) then command = command .. [[f]] end
+			if (force_dnstcp == 1) then command = command .. [[t]] end
+			if (is_glue == 1) then command = command .. [[g]] end
+			command = command .. [[l ]] .. lookup_host
+			command = command .. [[ -S ]] .. section
+			if (#dnsserver > 0) then command = command .. [[ -d ]] .. dnsserver end
+			command = command .. [[ -- get_registered_ip]]
+			reg_ip = SYS.exec(command)
+		end
+
+		-- fill transfer array
+		data[#data+1]	= {
+			section  = section,
+			enabled  = enabled,
+			iface    = iface,
+			lookup   = lookup_host,
+			reg_ip   = reg_ip,
+			pid      = pid,
+			datelast = datelast,
+			datenext = datenext,
+			datenextstat = datenextstat
+		}
+	end)
+
+	uci:unload("ddns")
+	return data
+end
+
+-- called by XHR.get from detail_logview.htm
+function logread(section)
+	-- read application settings
+	local uci	= UCI.cursor()
+	local ldir	= uci:get("ddns", "global", "ddns_logdir") or "/var/log/ddns"
+	local lfile	= ldir .. "/" .. section .. ".log"
+	local ldata	= NXFS.readfile(lfile)
+
+	if not ldata or #ldata == 0 then
+		ldata="_nodata_"
+	end
+	uci:unload("ddns")
+	HTTP.write(ldata)
+end
+
+-- called by XHR.get from overview_status.htm
+function startstop(section, enabled)
+	local uci  = UCI.cursor()
+	local pid  = DDNS.get_pid(section)
+	local data = {}		-- Array to transfer data to javascript
+
+	-- if process running we want to stop and return
+	if pid > 0 then
+		local tmp = NX.kill(pid, 15)	-- terminate
+		NX.nanosleep(2)	-- 2 second "show time"
+		-- status changed so return full status
+		data = _get_status()
+		HTTP.prepare_content("application/json")
+		HTTP.write_json(data)
+		return
+	end
+
+	-- read uncommitted changes
+	-- we don't save and commit data from other section or other options
+	-- only enabled will be done
+	local exec	  = true
+	local changed     = uci:changes("ddns")
+	for k_config, v_section in pairs(changed) do
+		-- security check because uci.changes only gets our config
+		if k_config ~= "ddns" then
+			exec = false
+			break
+		end
+		for k_section, v_option in pairs(v_section) do
+			-- check if only section of button was changed
+			if k_section ~= section then
+				exec = false
+				break
+			end
+			for k_option, v_value in pairs(v_option) do
+				-- check if only enabled was changed
+				if k_option ~= "enabled" then
+					exec = false
+					break
+				end
+			end
+		end
+	end
+
+	-- we can not execute because other
+	-- uncommitted changes pending, so exit here
+	if not exec then
+		HTTP.write("_uncommitted_")
+		return
+	end
+
+	-- save enable state
+	uci:set("ddns", section, "enabled", ( (enabled == "true") and "1" or "0") )
+	uci:save("ddns")
+	uci:commit("ddns")
+	uci:unload("ddns")
+
+	-- start ddns-updater for section
+	local command = "%s -S %s -- start" %{ luci_helper, UTIL.shellquote(section) }
+	os.execute(command)
+	NX.nanosleep(3)	-- 3 seconds "show time"
+
+	-- status changed so return full status
+	data = _get_status()
+	HTTP.prepare_content("application/json")
+	HTTP.write_json(data)
+end
+
+-- called by XHR.poll from overview_status.htm
+function status()
+	local data = _get_status()
+	HTTP.prepare_content("application/json")
+	HTTP.write_json(data)
+end
+
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua d/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua
--- c/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,1504 @@
+-- Copyright 2008 Steven Barth <steven@midlink.org>
+-- Copyright 2008 Jo-Philipp Wich <jow@openwrt.org>
+-- Copyright 2013 Manuel Munz <freifunk at somakoma dot de>
+-- Copyright 2014-2016 Christian Schoenebeck <christian dot schoenebeck at gmail dot com>
+-- Licensed to the public under the Apache License 2.0.
+
+local NX   = require "nixio"
+local NXFS = require "nixio.fs"
+local SYS  = require "luci.sys"
+local UTIL = require "luci.util"
+local HTTP = require "luci.http"
+local DISP = require "luci.dispatcher"
+local WADM = require "luci.tools.webadmin"
+local DTYP = require "luci.cbi.datatypes"
+local CTRL = require "luci.controller.ddns"	-- this application's controller
+local DDNS = require "luci.tools.ddns"		-- ddns multiused functions
+
+-- takeover arguments -- #######################################################
+local section = arg[1]
+
+-- html constants -- ###########################################################
+local font_red	= "<font color='red'>"
+local font_off	= "</font>"
+local bold_on	= "<strong>"
+local bold_off	= "</strong>"
+
+-- error text constants -- #####################################################
+local err_ipv6_plain = translate("IPv6 not supported") .. " - " ..
+		translate("please select 'IPv4' address version")
+local err_ipv6_basic = bold_on ..
+			font_red ..
+				translate("IPv6 not supported") ..
+			font_off ..
+			"<br />" .. translate("please select 'IPv4' address version") ..
+		 bold_off
+local err_ipv6_other = bold_on ..
+			font_red ..
+				translate("IPv6 not supported") ..
+			font_off ..
+			"<br />" .. translate("please select 'IPv4' address version in") .. " " ..
+			[[<a href="]] ..
+					DISP.build_url("admin", "services", "ddns", "detail", section) ..
+					"?tab.dns." .. section .. "=basic" ..
+				[[">]] ..
+				translate("Basic Settings") ..
+			[[</a>]] ..
+		 bold_off
+
+function err_tab_basic(self)
+	return translate("Basic Settings") .. " - " .. self.title .. ": "
+end
+function err_tab_adv(self)
+	return translate("Advanced Settings") .. " - " .. self.title .. ": "
+end
+function err_tab_timer(self)
+	return translate("Timer Settings") .. " - " .. self.title .. ": "
+end
+
+-- read services/services_ipv6 files -- ########################################
+local services4 = { }		-- IPv4 --
+local fd4 = io.open("/etc/ddns/services", "r")
+if fd4 then
+	local ln, s, t
+	repeat
+		ln = fd4:read("*l")
+		s  = ln and ln:match('^%s*".*')	-- only handle lines beginning with "
+		s  = s  and  s:gsub('"','')	-- remove "
+		t  = s  and UTIL.split(s,"(%s+)",nil,true)	-- split on whitespaces
+		if t then services4[t[1]]=t[2] end
+	until not ln
+	fd4:close()
+end
+
+local services6 = { }		-- IPv6 --
+local fd6 = io.open("/etc/ddns/services_ipv6", "r")
+if fd6 then
+	local ln, s, t
+	repeat
+		ln = fd6:read("*l")
+		s  = ln and ln:match('^%s*".*')	-- only handle lines beginning with "
+		s  = s  and  s:gsub('"','')	-- remove "
+		t  = s  and UTIL.split(s,"(%s+)",nil,true)	-- split on whitespaces
+		if t then services6[t[1]]=t[2] end
+	until not ln
+	fd6:close()
+end
+
+-- multi-used functions -- ####################################################
+-- function to verify settings around ip_source
+-- will use dynamic_dns_lucihelper to check if
+-- local IP can be read
+local function _verify_ip_source()
+	-- section is globally defined here be calling argument (see above)
+	local _arg
+
+	local _ipv6   = usev6:formvalue(section)
+	local _source = (_ipv6 == "1")
+			and src6:formvalue(section)
+			or  src4:formvalue(section)
+
+	local command = CTRL.luci_helper .. [[ -]]
+	if (_ipv6 == "1")  then command = command .. [[6]] end
+
+	if _source == "network" then
+		_arg = (_ipv6 == "1")
+			and ipn6:formvalue(section)
+			or  ipn4:formvalue(section)
+		command = command .. [[n ]] .. UTIL.shellquote(_arg)
+	elseif _source == "web" then
+		_arg = (_ipv6 == "1")
+			and iurl6:formvalue(section)
+			or  iurl4:formvalue(section)
+		command = command .. [[u ]] .. UTIL.shellquote(_arg)
+
+		-- proxy only needed for checking url
+		_arg = (pxy) and pxy:formvalue(section) or ""
+		if (_arg and #_arg > 0) then
+			command = command .. [[ -p ]] .. UTIL.shellquote(_arg)
+		end
+	elseif _source == "interface" then
+		command = command .. [[i ]] .. UTIL.shellquote(ipi:formvalue(section))
+	elseif _source == "script" then
+		command = command .. [[s ]] .. UTIL.shellquote(ips:formvalue(section))
+	end
+	command = command .. [[ -- get_local_ip]]
+	return (SYS.call(command) == 0)
+end
+
+-- function to check if option is used inside url or script
+-- return -1 on error, 0 NOT required, 1 required
+local function _option_used(option, urlscript)
+	local surl	-- search string for url
+	local ssh	-- search string for script
+	local required	-- option used inside url or script
+
+	if     option == "domain"    then surl, ssh = '%[DOMAIN%]', '%$domain'
+	elseif option == "username"  then surl, ssh = '%[USERNAME%]', '%$username'
+	elseif option == "password"  then surl, ssh = '%[PASSWORD%]', '%$password'
+	elseif option == "param_enc" then surl, ssh = '%[PARAMENC%]', '%$param_enc'
+	elseif option == "param_opt" then surl, ssh = '%[PARAMOPT%]', '%$param_opt'
+	else
+		error("undefined option")
+		return -1	-- return on error
+	end
+
+	local required = false
+	-- handle url
+	if urlscript:find('http') then
+		required = ( urlscript:find(surl) )
+	-- handle script
+	else
+		if not urlscript:find("/") then
+			-- might be inside ddns-scripts directory
+			urlscript = "/usr/lib/ddns/" .. urlscript
+		end
+		-- problem with script exit here
+		if not NXFS.access(urlscript) then return -1 end
+
+		local f = io.input(urlscript)
+		-- still problem with script exit here
+		if not f then return -1 end
+		for l in f:lines() do
+			repeat
+				if l:find('^#') then break end  -- continue on comment lines
+				required = ( l:find(surl) or l:find(ssh) )
+			until true
+			if required then break end
+		end
+		f:close()
+	end
+	return (required and 1 or 0)
+end
+
+-- function to verify if option is valid
+local function _option_validate(self, value, optional)
+	-- section is globally defined here be calling argument (see above)
+	local fusev6 = usev6:formvalue(section) or "0"
+	local fsvc4  = svc4:formvalue(section) or "-"
+	local fsvc6  = svc6:formvalue(section) or "-"
+	local urlsh, used
+
+	-- IP-Version dependent custom service selected
+	if (fusev6 == "0" and fsvc4 == "-") or
+	   (fusev6 == "1" and fsvc6 == "-") then
+		-- read custom url
+		urlsh = uurl:formvalue(section) or ""
+		-- no url then read custom script
+		if (#urlsh == 0) then
+			urlsh = ush:formvalue(section) or ""
+		end
+	-- IPv4 read from services4 table
+	elseif (fusev6 == "0") then
+		urlsh = services4[fsvc4] or ""
+	-- IPv6 read from services6 table
+	else
+		urlsh = services6[fsvc6] or ""
+	end
+	-- problem with url or script exit here
+	-- error handled somewhere else
+	if (#urlsh == 0) then return "" end
+
+	used = _option_used(self.option, urlsh)
+	-- on error or not used return empty string
+	if used < 1 then return "" end
+	-- needed but no data then return error
+	if not value or (#value == 0) then
+		if optional then return nil end						 
+		return nil, err_tab_basic(self) .. translate("missing / required")
+	end
+	return value
+end
+
+-- cbi-map definition -- #######################################################
+local m 	= Map("ddns")
+m.title		= CTRL.app_title_back()
+m.description	= CTRL.app_description()
+m.redirect	= DISP.build_url("admin", "services", "ddns")
+
+m.on_after_commit = function(self)
+	if self.changed then	-- changes ?
+		local pid = DDNS.get_pid(section)
+		if pid > 0 then	-- running ?
+			local tmp = NX.kill(pid, 1)	-- send SIGHUP
+		end
+	end
+end
+
+-- provider switch was requested, save and reload page
+if m:formvalue("cbid.ddns.%s._switch" % section) then	-- section == arg[1]
+	local fsvc
+	local fusev6 = m:formvalue("cbid.ddns.%s.use_ipv6" % section) or "0"
+	if fusev6 == "1" then
+		fsvc = m:formvalue("cbid.ddns.%s.ipv6_service_name" % section) or ""
+	else
+		fsvc = m:formvalue("cbid.ddns.%s.ipv4_service_name" % section) or ""
+	end
+
+	if fusev6 ~= (m:get(section, "use_ipv6") or "0") then	-- IPv6 was changed
+		m:set(section, "use_ipv6", fusev6)		-- save it
+	end
+
+	if fsvc ~= "-" then					-- NOT "custom"
+		m:set(section, "service_name", fsvc)		-- save it
+	else							-- else
+		m:del(section, "service_name")			-- delete it
+	end
+	m.uci:save(m.config)
+
+	-- reload page
+	HTTP.redirect( DISP.build_url("admin", "services", "ddns", "detail", section) )
+	return
+end
+
+-- read application settings -- ################################################
+-- log directory
+local logdir = m.uci:get(m.config, "global", "ddns_logdir") or "/var/log/ddns"
+
+-- cbi-section definition -- ###################################################
+local ns = m:section( NamedSection, section, "service",
+	translate("Details for") .. ([[: <strong>%s</strong>]] % section),
+	translate("Configure here the details for selected Dynamic DNS service.") )
+ns.instance = section	-- arg [1]
+ns:tab("basic", translate("Basic Settings"), nil )
+ns:tab("advanced", translate("Advanced Settings"), nil )
+ns:tab("timer", translate("Timer Settings"), nil )
+ns:tab("logview", translate("Log File Viewer"), nil )
+
+-- TAB: Basic  #####################################################################################
+-- enabled -- #################################################################
+en = ns:taboption("basic", Flag, "enabled",
+	translate("Enabled"),
+	translate("If this service section is disabled it could not be started." .. "<br />" ..
+		"Neither from LuCI interface nor from console") )
+en.orientation = "horizontal"
+
+-- IPv4/IPv6 - lookup_host -- #################################################
+luh = ns:taboption("basic", Value, "lookup_host",
+		translate("Lookup Hostname"),
+		translate("Hostname/FQDN to validate, if IP update happen or necessary") )
+luh.rmempty	= false
+luh.placeholder = "myhost.example.com"
+function luh.validate(self, value)
+	if not value
+	or not (#value > 0)
+	or not DTYP.hostname(value) then
+		return nil, err_tab_basic(self) .. translate("invalid FQDN / required - Sample") .. ": 'myhost.example.com'"
+	else
+		return UTIL.trim(value)
+	end
+end
+function luh.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- use_ipv6 -- ################################################################
+
+--We call it globally as it's called 11 times even outside specific function, saves 11 os.execute slow command!
+local has_ipv6 = DDNS.env_info("has_ipv6") 
+
+usev6 = ns:taboption("basic", ListValue, "use_ipv6",
+	translate("IP address version"),
+	translate("Defines which IP address 'IPv4/IPv6' is send to the DDNS provider") )
+usev6.widget  = "radio"
+usev6.default = "0"
+usev6:value("0", translate("IPv4-Address") )
+function usev6.cfgvalue(self, section)
+	local value = AbstractValue.cfgvalue(self, section) or "0"
+	if has_ipv6 or (value == "1" and not has_ipv6) then
+		self:value("1", translate("IPv6-Address") )
+	end
+	if value == "1" and not has_ipv6 then
+		self.description = err_ipv6_basic
+	end
+	return value
+end
+function usev6.validate(self, value)
+	if (value == "1" and has_ipv6) or value == "0" then
+		return value
+	end
+	return nil, err_tab_basic(self) .. err_ipv6_plain
+end
+function usev6.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4 - service_name -- #####################################################
+svc4 = ns:taboption("basic", ListValue, "ipv4_service_name",
+	translate("DDNS Service provider") .. " [IPv4]" )
+svc4.default	= "-"
+svc4:depends("use_ipv6", "0")	-- only show on IPv4
+function svc4.cfgvalue(self, section)
+	local v =  DDNS.read_value(self, section, "service_name")
+	if v and (#v > 0) then
+		for s, u in UTIL.kspairs(services4) do
+			if v == s then return v end
+		end
+	end
+	return "-"
+end
+function svc4.validate(self, value)
+	if usev6:formvalue(section) ~= "1" then	-- do only on IPv4
+		return value
+	else
+		return ""	-- suppress validate error
+	end
+end
+function svc4.write(self, section, value)
+	if usev6:formvalue(section) ~= "1" then	-- do only IPv4 here
+		self.map:del(section, self.option)	-- to be shure
+		if value ~= "-" then			-- and write "service_name
+			self.map:del(section, "update_url")	-- delete update_url
+			self.map:del(section, "update_script")	-- delete update_script
+			return self.map:set(section, "service_name", value)
+		else
+			return self.map:del(section, "service_name")
+		end
+	end
+end
+function svc4.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv6 - service_name -- #####################################################
+svc6 = ns:taboption("basic", ListValue, "ipv6_service_name",
+	translate("DDNS Service provider") .. " [IPv6]" )
+svc6.default	= "-"
+svc6:depends("use_ipv6", "1")	-- only show on IPv6
+if not has_ipv6 then
+	svc6.description = err_ipv6_basic
+end
+function svc6.cfgvalue(self, section)
+	local v =  DDNS.read_value(self, section, "service_name")
+	if v and (#v > 0) then
+		for s, u in UTIL.kspairs(services4) do
+			if v == s then return v end
+		end
+	end
+	return "-"
+end
+function svc6.validate(self, value)
+	if usev6:formvalue(section) == "1" then	-- do only on IPv6
+		if has_ipv6 then return value end
+		return nil, err_tab_basic(self) .. err_ipv6_plain
+	else
+		return ""	-- suppress validate error
+	end
+end
+function svc6.write(self, section, value)
+	if usev6:formvalue(section) == "1" then		-- do only when IPv6
+		self.map:del(section, self.option)	-- delete "ipv6_service_name" helper
+		if value ~= "-" then			-- and write "service_name
+			self.map:del(section, "update_url")	-- delete update_url
+			self.map:del(section, "update_script")	-- delete update_script
+			return self.map:set(section, "service_name", value)
+		else
+			return self.map:del(section, "service_name")
+		end
+	end
+end
+function svc6.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4/IPv6 - change Provider -- #############################################
+svs		= ns:taboption("basic", Button, "_switch")
+svs.title      = translate("Really change DDNS provider?")
+svs.inputtitle = translate("Change provider")
+svs.inputstyle = "apply"
+
+-- IPv4/IPv6 - update_url -- ##################################################
+uurl = ns:taboption("basic", Value, "update_url",
+	translate("Custom update-URL"),
+	translate("Update URL to be used for updating your DDNS Provider." .. "<br />" ..
+		"Follow instructions you will find on their WEB page.") )
+function uurl.validate(self, value)
+	local fush   = ush:formvalue(section)
+	local fusev6 = usev6:formvalue(section)
+
+	if (fusev6 ~= "1" and svc4:formvalue(section) ~= "-") or
+	   (fusev6 == "1" and svc6:formvalue(section) ~= "-") then
+		return ""	-- suppress validate error
+	elseif not value or (#value == 0) then
+		if not fush or (#fush == 0) then
+			return nil, err_tab_basic(self) .. translate("missing / required")
+		else
+			return ""	-- suppress validate error / update_script is given
+		end
+	elseif (#fush > 0) then
+		return nil, err_tab_basic(self) .. translate("either url or script could be set")
+	end
+
+	local url = DDNS.parse_url(value)
+	if not url.scheme == "http" then
+		return nil, err_tab_basic(self) .. translate("must start with 'http://'")
+	elseif not url.query then
+		return nil, err_tab_basic(self) .. "<QUERY> " .. translate("missing / required")
+	elseif not url.host then
+		return nil, err_tab_basic(self) .. "<HOST> " .. translate("missing / required")
+	elseif SYS.call([[nslookup ]] .. UTIL.shellquote(url.host) .. [[ >/dev/null 2>&1]]) ~= 0 then
+		return nil, err_tab_basic(self) .. translate("can not resolve host: ") .. url.host
+	end
+
+	return value
+end
+function uurl.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4/IPv6 - update_script -- ###############################################
+ush = ns:taboption("basic", Value, "update_script",
+	translate("Custom update-script"),
+	translate("Custom update script to be used for updating your DDNS Provider.") )
+function ush.validate(self, value)
+	local fuurl  = uurl:formvalue(section)
+	local fusev6 = usev6:formvalue(section)
+
+	if (fusev6 ~= "1" and svc4:formvalue(section) ~= "-") or
+	   (fusev6 == "1" and svc6:formvalue(section) ~= "-") then
+		return ""	-- suppress validate error
+	elseif not value or (#value == 0) then
+		if not fuurl or (#fuurl == 0) then
+			return nil, err_tab_basic(self) .. translate("missing / required")
+		else
+			return ""	-- suppress validate error / update_url is given
+		end
+	elseif (#fuurl > 0) then
+		return nil, err_tab_basic(self) .. translate("either url or script could be set")
+	elseif not NXFS.access(value) then
+		return nil, err_tab_basic(self) .. translate("File not found")
+	end
+	return value
+end
+function ush.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4/IPv6 - domain -- ######################################################
+dom = ns:taboption("basic", Value, "domain",
+		translate("Domain"),
+		translate("Replaces [DOMAIN] in Update-URL") )
+dom.placeholder = "myhost.example.com"
+function dom.validate(self, value)
+	return _option_validate(self, value)
+end
+function dom.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4/IPv6 - username -- ####################################################
+user = ns:taboption("basic", Value, "username",
+		translate("Username"),
+		translate("Replaces [USERNAME] in Update-URL (URL-encoded)") )
+function user.validate(self, value)
+	return _option_validate(self, value)
+end
+function user.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4/IPv6 - password -- ####################################################
+pw = ns:taboption("basic", Value, "password",
+		translate("Password"),
+		translate("Replaces [PASSWORD] in Update-URL (URL-encoded)") )
+pw.password = true
+function pw.validate(self, value)
+	return _option_validate(self, value)
+end
+function pw.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4/IPv6 - param_enc -- ###################################################
+pe = ns:taboption("basic", Value, "param_enc",
+		translate("Optional Encoded Parameter"),
+		translate("Optional: Replaces [PARAMENC] in Update-URL (URL-encoded)") )
+function pe.validate(self, value)
+	return _option_validate(self, value, true)
+end
+function pe.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4/IPv6 - param_opt -- ###################################################
+po = ns:taboption("basic", Value, "param_opt",
+		translate("Optional Parameter"),
+		translate("Optional: Replaces [PARAMOPT] in Update-URL (NOT URL-encoded)") )
+function po.validate(self, value)
+	return _option_validate(self, value, true)
+end
+function po.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- handled service dependent show/display -- ##################################
+-- IPv4 --
+local cv4 = svc4:cfgvalue(section)
+if cv4 ~= "-" then
+	svs:depends ("ipv4_service_name", "-" )	-- show only if "-"
+	ush:depends ("ipv4_service_name", "?")
+	uurl:depends("ipv4_service_name", "?")
+else
+	uurl:depends("ipv4_service_name", "-")
+	ush:depends ("ipv4_service_name", "-")
+	dom:depends("ipv4_service_name", "-" )
+	user:depends("ipv4_service_name", "-" )
+	pw:depends("ipv4_service_name", "-" )
+	pe:depends("ipv4_service_name", "-" )
+	po:depends("ipv4_service_name", "-" )
+end
+for s, u in UTIL.kspairs(services4) do
+	svc4:value(s)	-- fill DropDown-List
+	if cv4 ~= s then
+		svs:depends("ipv4_service_name", s )
+	else
+		dom:depends ("ipv4_service_name", ((_option_used(dom.option, u) == 1) and s or "?") )
+		user:depends("ipv4_service_name", ((_option_used(user.option, u) == 1) and s or "?") )
+		pw:depends  ("ipv4_service_name", ((_option_used(pw.option, u) == 1) and s or "?") )
+		pe:depends  ("ipv4_service_name", ((_option_used(pe.option, u) == 1) and s or "?") )
+		po:depends  ("ipv4_service_name", ((_option_used(po.option, u) == 1) and s or "?") )
+	end
+end
+svc4:value("-", translate("-- custom --") )
+
+-- IPv6 --
+local cv6 = svc6:cfgvalue(section)
+if cv6 ~= "-" then
+	svs:depends ("ipv6_service_name", "-" )
+	uurl:depends("ipv6_service_name", "?")
+	ush:depends ("ipv6_service_name", "?")
+else
+	uurl:depends("ipv6_service_name", "-")
+	ush:depends ("ipv6_service_name", "-")
+	dom:depends("ipv6_service_name", "-" )
+	user:depends("ipv6_service_name", "-" )
+	pw:depends("ipv6_service_name", "-" )
+	pe:depends("ipv6_service_name", "-" )
+	po:depends("ipv6_service_name", "-" )
+end
+for s, u in UTIL.kspairs(services6) do
+	svc6:value(s)	-- fill DropDown-List
+	if cv6 ~= s then
+		svs:depends("ipv6_service_name", s )
+	else
+		dom:depends ("ipv6_service_name", ((_option_used(dom.option, u) == 1) and s or "?") )
+		user:depends("ipv6_service_name", ((_option_used(user.option, u) == 1) and s or "?") )
+		pw:depends  ("ipv6_service_name", ((_option_used(pw.option, u) == 1) and s or "?") )
+		pe:depends  ("ipv6_service_name", ((_option_used(pe.option, u) == 1) and s or "?") )
+		po:depends  ("ipv6_service_name", ((_option_used(po.option, u) == 1) and s or "?") )
+	end
+end
+svc6:value("-", translate("-- custom --") )
+
+-- IPv4/IPv6 - use_https -- ###################################################
+
+--We call it globally as it's called 4 times outside specific function.
+local has_ssl = DDNS.env_info("has_ssl")
+
+if has_ssl or ( ( m:get(section, "use_https") or "0" ) == "1" ) then
+	https = ns:taboption("basic", Flag, "use_https",
+		translate("Use HTTP Secure") )
+	https.orientation = "horizontal"
+	function https.cfgvalue(self, section)
+		local value = AbstractValue.cfgvalue(self, section)
+		if not has_ssl and value == "1" then
+			self.description = bold_on .. font_red ..
+				translate("HTTPS not supported") .. font_off .. "<br />" ..
+				translate("please disable") .. " !" .. bold_off
+		else
+			self.description = translate("Enable secure communication with DDNS provider")
+		end
+		return value
+	end
+	function https.validate(self, value)
+		if (value == "1" and has_ssl ) or value == "0" then return value end
+		return nil, err_tab_basic(self) .. translate("HTTPS not supported") .. " !"
+	end
+	function https.write(self, section, value)
+		if value == "1" then
+			return self.map:set(section, self.option, value)
+		else
+			self.map:del(section, "cacert")
+			return self.map:del(section, self.option)
+		end
+	end
+end
+
+-- IPv4/IPv6 - cacert -- ######################################################
+if has_ssl then
+	cert = ns:taboption("basic", Value, "cacert",
+		translate("Path to CA-Certificate"),
+		translate("directory or path/file") .. "<br />" ..
+		translate("or") .. bold_on .. " IGNORE " .. bold_off ..
+		translate("to run HTTPS without verification of server certificates (insecure)") )
+	cert:depends("use_https", "1")
+	cert.placeholder = "/etc/ssl/certs"
+	cert.forcewrite = true
+	function cert.validate(self, value)
+		if https:formvalue(section) ~= "1" then
+			return ""	-- suppress validate error if NOT https
+		end
+		if value then	-- otherwise errors in datatype check
+			if DTYP.directory(value)
+			or DTYP.file(value)
+			or (value == "IGNORE")
+			or (#value == 0) then
+				return value
+			end
+		end
+		return nil, err_tab_basic(self) ..
+			translate("file or directory not found or not 'IGNORE'") .. " !"
+	end
+	function cert.parse(self, section, novld)
+		DDNS.value_parse(self, section, novld)
+	end
+end
+
+-- TAB: Advanced  #################################################################################
+-- IPv4 - ip_source -- ########################################################
+src4 = ns:taboption("advanced", ListValue, "ipv4_source",
+	translate("IP address source") .. " [IPv4]",
+	translate("Defines the source to read systems IPv4-Address from, that will be send to the DDNS provider") )
+src4:depends("use_ipv6", "0")	-- IPv4 selected
+src4.default = "network"
+src4:value("network", translate("Network"))
+src4:value("web", translate("URL"))
+src4:value("interface", translate("Interface"))
+src4:value("script", translate("Script"))
+function src4.cfgvalue(self, section)
+	return DDNS.read_value(self, section, "ip_source")
+end
+function src4.validate(self, value)
+	if usev6:formvalue(section) == "1" then
+		return ""	-- ignore on IPv6 selected
+	elseif not _verify_ip_source() then
+		return nil, err_tab_adv(self) ..
+			translate("can not detect local IP. Please select a different Source combination")
+	else
+		return value
+	end
+end
+function src4.write(self, section, value)
+	if usev6:formvalue(section) == "1" then
+		return true	-- ignore on IPv6 selected
+	elseif value == "network" then
+		self.map:del(section, "ip_url")		-- delete not need parameters
+		self.map:del(section, "ip_interface")
+		self.map:del(section, "ip_script")
+	elseif value == "web" then
+		self.map:del(section, "ip_network")	-- delete not need parameters
+		self.map:del(section, "ip_interface")
+		self.map:del(section, "ip_script")
+	elseif value == "interface" then
+		self.map:del(section, "ip_network")	-- delete not need parameters
+		self.map:del(section, "ip_url")
+		self.map:del(section, "ip_script")
+	elseif value == "script" then
+		self.map:del(section, "ip_network")
+		self.map:del(section, "ip_url")		-- delete not need parameters
+		self.map:del(section, "ip_interface")
+	end
+	self.map:del(section, self.option)		 -- delete "ipv4_source" helper
+	return self.map:set(section, "ip_source", value) -- and write "ip_source
+end
+function src4.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv6 - ip_source -- ########################################################
+src6 = ns:taboption("advanced", ListValue, "ipv6_source",
+	translate("IP address source") .. " [IPv6]",
+	translate("Defines the source to read systems IPv6-Address from, that will be send to the DDNS provider") )
+src6:depends("use_ipv6", 1)	-- IPv6 selected
+src6.default = "network"
+src6:value("network", translate("Network"))
+src6:value("web", translate("URL"))
+src6:value("interface", translate("Interface"))
+src6:value("script", translate("Script"))
+if not has_ipv6 then
+	src6.description = err_ipv6_other
+end
+function src6.cfgvalue(self, section)
+	return DDNS.read_value(self, section, "ip_source")
+end
+function src6.validate(self, value)
+	if usev6:formvalue(section) ~= "1" then
+		return ""	-- ignore on IPv4 selected
+	elseif not has_ipv6 then
+		return nil, err_tab_adv(self) .. err_ipv6_plain
+	elseif not _verify_ip_source() then
+		return nil, err_tab_adv(self) ..
+			translate("can not detect local IP. Please select a different Source combination")
+	else
+		return value
+	end
+end
+function src6.write(self, section, value)
+	if usev6:formvalue(section) ~= "1" then
+		return true	-- ignore on IPv4 selected
+	elseif value == "network" then
+		self.map:del(section, "ip_url")		-- delete not need parameters
+		self.map:del(section, "ip_interface")
+		self.map:del(section, "ip_script")
+	elseif value == "web" then
+		self.map:del(section, "ip_network")	-- delete not need parameters
+		self.map:del(section, "ip_interface")
+		self.map:del(section, "ip_script")
+	elseif value == "interface" then
+		self.map:del(section, "ip_network")	-- delete not need parameters
+		self.map:del(section, "ip_url")
+		self.map:del(section, "ip_script")
+	elseif value == "script" then
+		self.map:del(section, "ip_network")
+		self.map:del(section, "ip_url")		-- delete not need parameters
+		self.map:del(section, "ip_interface")
+	end
+	self.map:del(section, self.option)		 -- delete "ipv4_source" helper
+	return self.map:set(section, "ip_source", value) -- and write "ip_source
+end
+function src6.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4 - ip_network (default "wan") -- #######################################
+ipn4 = ns:taboption("advanced", ListValue, "ipv4_network",
+	translate("Network") .. " [IPv4]",
+	translate("Defines the network to read systems IPv4-Address from") )
+ipn4:depends("ipv4_source", "network")
+ipn4.default = "wan"
+WADM.cbi_add_networks(ipn4)
+function ipn4.cfgvalue(self, section)
+	return DDNS.read_value(self, section, "ip_network")
+end
+function ipn4.validate(self, value)
+	if usev6:formvalue(section) == "1"
+	 or src4:formvalue(section) ~= "network" then
+		-- ignore if IPv6 selected OR
+		-- ignore everything except "network"
+		return ""
+	else
+		return value
+	end
+end
+function ipn4.write(self, section, value)
+	if usev6:formvalue(section) == "1"
+	 or src4:formvalue(section) ~= "network" then
+		-- ignore if IPv6 selected OR
+		-- ignore everything except "network"
+		return true
+	else
+		-- set also as "interface" for monitoring events changes/hot-plug
+		self.map:set(section, "interface", value)
+		self.map:del(section, self.option)		  -- delete "ipv4_network" helper
+		return self.map:set(section, "ip_network", value) -- and write "ip_network"
+	end
+end
+function ipn4.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv6 - ip_network (default "wan6") -- ######################################
+ipn6 = ns:taboption("advanced", ListValue, "ipv6_network",
+	translate("Network") .. " [IPv6]" )
+ipn6:depends("ipv6_source", "network")
+ipn6.default = "wan6"
+WADM.cbi_add_networks(ipn6)
+if has_ipv6 then
+	ipn6.description = translate("Defines the network to read systems IPv6-Address from")
+else
+	ipn6.description = err_ipv6_other
+end
+function ipn6.cfgvalue(self, section)
+	return DDNS.read_value(self, section, "ip_network")
+end
+function ipn6.validate(self, value)
+	if usev6:formvalue(section) ~= "1"
+	 or src6:formvalue(section) ~= "network" then
+		-- ignore if IPv4 selected OR
+		-- ignore everything except "network"
+		return ""
+	elseif has_ipv6 then
+		return value
+	else
+		return nil, err_tab_adv(self) .. err_ipv6_plain
+	end
+end
+function ipn6.write(self, section, value)
+	if usev6:formvalue(section) ~= "1"
+	 or src6:formvalue(section) ~= "network" then
+		-- ignore if IPv4 selected OR
+		-- ignore everything except "network"
+		return true
+	else
+		-- set also as "interface" for monitoring events changes/hotplug
+		self.map:set(section, "interface", value)
+		self.map:del(section, self.option)		  -- delete "ipv6_network" helper
+		return self.map:set(section, "ip_network", value) -- and write "ip_network"
+	end
+end
+function ipn6.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4 - ip_url (default "checkip.dyndns.com") -- ############################
+iurl4 = ns:taboption("advanced", Value, "ipv4_url",
+	translate("URL to detect") .. " [IPv4]",
+	translate("Defines the Web page to read systems IPv4-Address from") )
+iurl4:depends("ipv4_source", "web")
+iurl4.default = "http://checkip.dyndns.com"
+function iurl4.cfgvalue(self, section)
+	return DDNS.read_value(self, section, "ip_url")
+end
+function iurl4.validate(self, value)
+	if usev6:formvalue(section) == "1"
+	 or src4:formvalue(section) ~= "web" then
+		-- ignore if IPv6 selected OR
+		-- ignore everything except "web"
+		return ""
+	elseif not value or #value == 0 then
+		return nil, err_tab_adv(self) .. translate("missing / required")
+	end
+
+	local url = DDNS.parse_url(value)
+	if not (url.scheme == "http" or url.scheme == "https") then
+		return nil, err_tab_adv(self) .. translate("must start with 'http://'")
+	elseif not url.host then
+		return nil, err_tab_adv(self) .. "<HOST> " .. translate("missing / required")
+	elseif SYS.call([[nslookup ]] .. UTIL.shellquote(url.host) .. [[>/dev/null 2>&1]]) ~= 0 then
+		return nil, err_tab_adv(self) .. translate("can not resolve host: ") .. url.host
+	else
+		return value
+	end
+end
+function iurl4.write(self, section, value)
+	if usev6:formvalue(section) == "1"
+	 or src4:formvalue(section) ~= "web" then
+		-- ignore if IPv6 selected OR
+		-- ignore everything except "web"
+		return true
+	else
+		self.map:del(section, self.option)		-- delete "ipv4_url" helper
+		return self.map:set(section, "ip_url", value)	-- and write "ip_url"
+	end
+end
+function iurl4.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv6 - ip_url (default "checkipv6.dyndns.com") -- ##########################
+iurl6 = ns:taboption("advanced", Value, "ipv6_url",
+	translate("URL to detect") .. " [IPv6]" )
+iurl6:depends("ipv6_source", "web")
+iurl6.default = "http://checkipv6.dyndns.com"
+if has_ipv6 then
+	iurl6.description = translate("Defines the Web page to read systems IPv6-Address from")
+else
+	iurl6.description = err_ipv6_other
+end
+function iurl6.cfgvalue(self, section)
+	return DDNS.read_value(self, section, "ip_url")
+end
+function iurl6.validate(self, value)
+	if usev6:formvalue(section) ~= "1"
+	 or src6:formvalue(section) ~= "web" then
+		-- ignore if IPv4 selected OR
+		-- ignore everything except "web"
+		return ""
+	elseif not has_ipv6 then
+		return nil, err_tab_adv(self) .. err_ipv6_plain
+	elseif not value or #value == 0 then
+		return nil, err_tab_adv(self) .. translate("missing / required")
+	end
+
+	local url = DDNS.parse_url(value)
+	if not (url.scheme == "http" or url.scheme == "https") then
+		return nil, err_tab_adv(self) .. translate("must start with 'http://'")
+	elseif not url.host then
+		return nil, err_tab_adv(self) .. "<HOST> " .. translate("missing / required")
+	elseif SYS.call([[nslookup ]] .. UTIL.shellquote(url.host) .. [[>/dev/null 2>&1]]) ~= 0 then
+		return nil, err_tab_adv(self) .. translate("can not resolve host: ") .. url.host
+	else
+		return value
+	end
+end
+function iurl6.write(self, section, value)
+	if usev6:formvalue(section) ~= "1"
+	 or src6:formvalue(section) ~= "web" then
+		-- ignore if IPv4 selected OR
+		-- ignore everything except "web"
+		return true
+	else
+		self.map:del(section, self.option)		-- delete "ipv6_url" helper
+		return self.map:set(section, "ip_url", value)	-- and write "ip_url"
+	end
+end
+function iurl6.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4 + IPv6 - ip_interface -- ##############################################
+ipi = ns:taboption("advanced", ListValue, "ip_interface",
+	translate("Interface"),
+	translate("Defines the interface to read systems IP-Address from") )
+ipi:depends("ipv4_source", "interface")	-- IPv4
+ipi:depends("ipv6_source", "interface")	-- or IPv6
+for _, v in pairs(SYS.net.devices()) do
+	-- show only interface set to a network
+	-- and ignore loopback
+	net = WADM.iface_get_network(v)
+	if net and net ~= "loopback" then
+		ipi:value(v)
+	end
+end
+function ipi.validate(self, value)
+	local fusev6 = usev6:formvalue(section)
+	if (fusev6 ~= "1" and src4:formvalue(section) ~= "interface")
+	or (fusev6 == "1" and src6:formvalue(section) ~= "interface") then
+		return ""
+	else
+		return value
+	end
+end
+function ipi.write(self, section, value)
+	local fusev6 = usev6:formvalue(section)
+	if (fusev6 ~= "1" and src4:formvalue(section) ~= "interface")
+	or (fusev6 == "1" and src6:formvalue(section) ~= "interface") then
+		return true
+	else
+		-- get network from device to
+		-- set also as "interface" for monitoring events changes/hotplug
+		local net = WADM.iface_get_network(value)
+		self.map:set(section, "interface", net)
+		return self.map:set(section, self.option, value)
+	end
+end
+function ipi.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4 + IPv6 - ip_script -- #################################################
+ips = ns:taboption("advanced", Value, "ip_script",
+	translate("Script"),
+	translate("User defined script to read systems IP-Address") )
+ips:depends("ipv4_source", "script")	-- IPv4
+ips:depends("ipv6_source", "script")	-- or IPv6
+ips.placeholder = "/path/to/script.sh"
+function ips.validate(self, value)
+	local fusev6 = usev6:formvalue(section)
+	local split
+	if value then split = UTIL.split(value, " ") end
+
+	if (fusev6 ~= "1" and src4:formvalue(section) ~= "script")
+	or (fusev6 == "1" and src6:formvalue(section) ~= "script") then
+		return ""
+	elseif not value or not (#value > 0) or not NXFS.access(split[1], "x") then
+		return nil, err_tab_adv(self) ..
+			translate("not found or not executable - Sample: '/path/to/script.sh'")
+	else
+		return value
+	end
+end
+function ips.write(self, section, value)
+	local fusev6 = usev6:formvalue(section)
+	if (fusev6 ~= "1" and src4:formvalue(section) ~= "script")
+	or (fusev6 == "1" and src6:formvalue(section) ~= "script") then
+		return true
+	else
+		return self.map:set(section, self.option, value)
+	end
+end
+function ips.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv4 - interface - default "wan" -- ########################################
+-- event network to monitor changes/hotplug/dynamic_dns_updater.sh
+-- only needs to be set if "ip_source"="web" or "script"
+-- if "ip_source"="network" or "interface" we use their network
+eif4 = ns:taboption("advanced", ListValue, "ipv4_interface",
+	translate("Event Network") .. " [IPv4]",
+	translate("Network on which the ddns-updater scripts will be started") )
+eif4:depends("ipv4_source", "web")
+eif4:depends("ipv4_source", "script")
+eif4.default = "wan"
+WADM.cbi_add_networks(eif4)
+function eif4.cfgvalue(self, section)
+	return DDNS.read_value(self, section, "interface")
+end
+function eif4.validate(self, value)
+	local fsrc4 = src4:formvalue(section) or ""
+	if usev6:formvalue(section) == "1"
+	 or fsrc4 == "network"
+	 or fsrc4 == "interface" then
+		return ""	-- ignore IPv6, network, interface
+	else
+		return value
+	end
+end
+function eif4.write(self, section, value)
+	local fsrc4 = src4:formvalue(section) or ""
+	if usev6:formvalue(section) == "1"
+	 or fsrc4 == "network"
+	 or fsrc4 == "interface" then
+		return true	-- ignore IPv6, network, interface
+	else
+		self.map:del(section, self.option)		 -- delete "ipv4_interface" helper
+		return self.map:set(section, "interface", value) -- and write "interface"
+	end
+end
+function eif4.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- IPv6 - interface - default "wan6" -- #######################################
+-- event network to monitor changes/hotplug
+-- only needs to be set if "ip_source"="web" or "script"
+-- if "ip_source"="network" or "interface" we use their network
+eif6 = ns:taboption("advanced", ListValue, "ipv6_interface",
+	translate("Event Network") .. " [IPv6]" )
+eif6:depends("ipv6_source", "web")
+eif6:depends("ipv6_source", "script")
+eif6.default = "wan6"
+WADM.cbi_add_networks(eif6)
+if not has_ipv6 then
+	eif6.description = err_ipv6_other
+else
+	eif6.description = translate("Network on which the ddns-updater scripts will be started")
+end
+function eif6.cfgvalue(self, section)
+	return DDNS.read_value(self, section, "interface")
+end
+function eif6.validate(self, value)
+	local fsrc6 = src6:formvalue(section) or ""
+	if usev6:formvalue(section) ~= "1"
+	 or fsrc6 == "network"
+	 or fsrc6 == "interface" then
+		return ""	-- ignore IPv4, network, interface
+	elseif not has_ipv6 then
+		return nil, err_tab_adv(self) .. err_ipv6_plain
+	else
+		return value
+	end
+end
+function eif6.write(self, section, value)
+	local fsrc6 = src6:formvalue(section) or ""
+	if usev6:formvalue(section) ~= "1"
+	 or fsrc6 == "network"
+	 or fsrc6 == "interface" then
+		return true	-- ignore IPv4, network, interface
+	else
+		self.map:del(section, self.option)		 -- delete "ipv6_interface" helper
+		return self.map:set(section, "interface", value) -- and write "interface"
+	end
+end
+function eif6.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end 
+
+-- IPv4/IPv6 - bind_network -- ################################################
+
+local has_bindnet = DDNS.env_info("has_bindnet")
+
+if has_bindnet or ( ( m:get(section, "bind_network") or "" ) ~= "" ) then
+	bnet = ns:taboption("advanced", ListValue, "bind_network",
+		translate("Bind Network") )
+	bnet:depends("ipv4_source", "web")
+	bnet:depends("ipv6_source", "web")
+	bnet.default = ""
+	bnet:value("", translate("-- default --"))
+	WADM.cbi_add_networks(bnet)
+	function bnet.cfgvalue(self, section)
+		local value = AbstractValue.cfgvalue(self, section)
+		if not has_bindnet and value ~= "" then
+			self.description = bold_on .. font_red ..
+				translate("Binding to a specific network not supported") .. font_off .. "<br />" ..
+				translate("please set to 'default'") .. " !" .. bold_off
+		else
+			self.description = translate("OPTIONAL: Network to use for communication") ..
+				"<br />" .. translate("Casual users should not change this setting")
+		end
+		return value
+	end
+	function bnet.validate(self, value)
+		if ( (value ~= "") and has_bindnet ) or (value == "") then return value end
+		return nil, err_tab_adv(self) .. translate("Binding to a specific network not supported") .. " !"
+	end
+	function bnet.parse(self, section, novld)
+		DDNS.value_parse(self, section, novld)
+	end
+end
+
+-- IPv4 + IPv6 - force_ipversion -- ###########################################
+-- optional to force wget/curl and host to use only selected IP version
+-- command parameter "-4" or "-6"
+
+local has_forceip = DDNS.env_info("has_forceip")
+
+if has_forceip or ( ( m:get(section, "force_ipversion") or "0" ) ~= "0" ) then
+	fipv = ns:taboption("advanced", Flag, "force_ipversion",
+		translate("Force IP Version") )
+	fipv.orientation = "horizontal"
+	function fipv.cfgvalue(self, section)
+		local value = AbstractValue.cfgvalue(self, section)
+		if not has_forceip and value ~= "0" then
+			self.description = bold_on .. font_red ..
+				translate("Force IP Version not supported") .. font_off .. "<br />" ..
+				translate("please disable") .. " !" .. bold_off
+		else
+			self.description = translate("OPTIONAL: Force the usage of pure IPv4/IPv6 only communication.")
+		end
+		return value
+	end
+	function fipv.validate(self, value)
+		if (value == "1" and has_forceip) or value == "0" then return value end
+		return nil, err_tab_adv(self) .. translate("Force IP Version not supported")
+	end
+end
+
+-- IPv4 + IPv6 - dns_server -- ################################################
+-- optional DNS Server to use resolving my IP
+
+local has_dnsserver = DDNS.env_info("has_dnsserver")
+
+if has_dnsserver or ( ( m:get(section, "dns_server") or "" ) ~= "" ) then
+	dns = ns:taboption("advanced", Value, "dns_server",
+		translate("DNS-Server"),
+		translate("OPTIONAL: Use non-default DNS-Server to detect 'Registered IP'.") .. "<br />" ..
+		translate("Format: IP or FQDN"))
+	dns.placeholder = "mydns.lan"
+	function dns.validate(self, value)
+		-- if .datatype is set, then it is checked before calling this function
+		if not value or (#value == 0) then
+			return ""	-- ignore on empty
+		elseif not has_dnsserver then
+			return nil, err_tab_adv(self) .. translate("Specifying a DNS-Server is not supported")
+		elseif not DTYP.host(value) then
+			return nil, err_tab_adv(self) .. translate("use hostname, FQDN, IPv4- or IPv6-Address")
+		else
+			local ipv6  = usev6:formvalue(section) or "0"
+			local force = fipv:formvalue(section)  or "0"
+			local command = CTRL.luci_helper .. [[ -]]
+			if (ipv6 == 1)  then command = command .. [[6]] end
+			if (force == 1) then command = command .. [[f]] end
+			command = command .. [[d ]] .. UTIL.shellquote(value) .. [[ -- verify_dns]]
+
+			local ret = SYS.call(command)
+			if     ret == 0 then return value	-- everything OK
+			elseif ret == 2 then return nil, err_tab_adv(self) .. translate("nslookup can not resolve host")
+			elseif ret == 3 then return nil, err_tab_adv(self) .. translate("nc (netcat) can not connect")
+			elseif ret == 4 then return nil, err_tab_adv(self) .. translate("Forced IP Version don't matched")
+			else                 return nil, err_tab_adv(self) .. translate("unspecific error")
+			end
+		end
+	end
+	function dns.parse(self, section, novld)
+		DDNS.value_parse(self, section, novld)
+	end
+end
+
+-- IPv4 + IPv6 - force_dnstcp -- ##############################################
+
+local has_bindhost = DDNS.env_info("has_bindhost")
+
+if has_bindhost or ( ( m:get(section, "force_dnstcp") or "0" ) ~= "0" ) then
+	tcp = ns:taboption("advanced", Flag, "force_dnstcp",
+		translate("Force TCP on DNS") )
+	tcp.orientation = "horizontal"
+	function tcp.cfgvalue(self, section)
+		local value = AbstractValue.cfgvalue(self, section)
+		if not has_bindhost and value ~= "0" then
+			self.description = bold_on .. font_red ..
+				translate("DNS requests via TCP not supported") .. font_off .. "<br />" ..
+				translate("please disable") .. " !" .. bold_off
+		else
+			self.description = translate("OPTIONAL: Force the use of TCP instead of default UDP on DNS requests.")
+		end
+		return value
+	end
+	function tcp.validate(self, value)
+		if (value == "1" and has_bindhost ) or value == "0" then
+			return value
+		end
+		return nil, err_tab_adv(self) .. translate("DNS requests via TCP not supported")
+	end
+end
+
+-- IPv4 + IPv6 - proxy -- #####################################################
+-- optional Proxy to use for http/https requests  [user:password@]proxyhost[:port]
+
+local has_proxy = DDNS.env_info("has_proxy")
+
+if has_proxy or ( ( m:get(section, "proxy") or "" ) ~= "" ) then
+	pxy = ns:taboption("advanced", Value, "proxy",
+		translate("PROXY-Server") )
+	pxy.placeholder="user:password@myproxy.lan:8080"
+	function pxy.cfgvalue(self, section)
+		local value = AbstractValue.cfgvalue(self, section)
+		if not has_proxy and value ~= "" then
+			self.description = bold_on .. font_red ..
+				translate("PROXY-Server not supported") .. font_off .. "<br />" ..
+				translate("please remove entry") .. "!" .. bold_off
+		else
+			self.description = translate("OPTIONAL: Proxy-Server for detection and updates.") .. "<br />" ..
+				translate("Format") .. ": " .. bold_on .. "[user:password@]proxyhost:port" .. bold_off .. "<br />" ..
+				translate("IPv6 address must be given in square brackets") .. ": " ..
+				bold_on .. " [2001:db8::1]:8080" .. bold_off
+		end
+		return value
+	end
+	function pxy.validate(self, value)
+		-- if .datatype is set, then it is checked before calling this function
+		if not value or (#value == 0) then
+			return ""	-- ignore on empty
+		elseif has_proxy then
+			local ipv6  = usev6:formvalue(section) or "0"
+			local force = fipv:formvalue(section) or "0"
+			local command = CTRL.luci_helper .. [[ -]]
+			if (ipv6 == 1)  then command = command .. [[6]] end
+			if (force == 1) then command = command .. [[f]] end
+			command = command .. [[p ]] .. UTIL.shellquote(value) .. [[ -- verify_proxy]]
+			local ret = SYS.call(command)
+			if     ret == 0 then return value
+			elseif ret == 2 then return nil, err_tab_adv(self) .. translate("nslookup can not resolve host")
+			elseif ret == 3 then return nil, err_tab_adv(self) .. translate("nc (netcat) can not connect")
+			elseif ret == 4 then return nil, err_tab_adv(self) .. translate("Forced IP Version don't matched")
+			elseif ret == 5 then return nil, err_tab_adv(self) .. translate("proxy port missing")
+			else                 return nil, err_tab_adv(self) .. translate("unspecific error")
+			end
+		else
+			return nil, err_tab_adv(self) .. translate("PROXY-Server not supported")
+		end
+	end
+	function pxy.parse(self, section, novld)
+		DDNS.value_parse(self, section, novld)
+	end
+end
+
+-- use_syslog -- ##############################################################
+slog = ns:taboption("advanced", ListValue, "use_syslog",
+	translate("Log to syslog"),
+	translate("Writes log messages to syslog. Critical Errors will always be written to syslog.") )
+slog.default = "2"
+slog:value("0", translate("No logging"))
+slog:value("1", translate("Info"))
+slog:value("2", translate("Notice"))
+slog:value("3", translate("Warning"))
+slog:value("4", translate("Error"))
+function slog.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- use_logfile -- #############################################################
+logf = ns:taboption("advanced", Flag, "use_logfile",
+	translate("Log to file"),
+	translate("Writes detailed messages to log file. File will be truncated automatically.") .. "<br />" ..
+	translate("File") .. [[: "]] .. logdir .. [[/]] .. section .. [[.log"]] )
+logf.orientation = "horizontal"
+logf.default     = "1"		-- if not defined write to log by default
+
+-- TAB: Timer  ####################################################################################
+-- check_interval -- ##########################################################
+ci = ns:taboption("timer", Value, "check_interval",
+	translate("Check Interval") )
+ci.template = "ddns/detail_value"
+ci.default  = "10"
+function ci.validate(self, value)
+	if not DTYP.uinteger(value)
+	or tonumber(value) < 1 then
+		return nil, err_tab_timer(self) .. translate("minimum value 5 minutes == 300 seconds")
+	end
+
+	local secs = DDNS.calc_seconds(value, cu:formvalue(section))
+	if secs >= 300 then
+		return value
+	else
+		return nil, err_tab_timer(self) .. translate("minimum value 5 minutes == 300 seconds")
+	end
+end
+function ci.write(self, section, value)
+	-- remove when default
+	local secs = DDNS.calc_seconds(value, cu:formvalue(section))
+	if secs ~= 600 then	--default 10 minutes
+		return self.map:set(section, self.option, value)
+	else
+		self.map:del(section, "check_unit")
+		return self.map:del(section, self.option)
+	end
+end
+function ci.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- check_unit -- ##############################################################
+cu = ns:taboption("timer", ListValue, "check_unit", "not displayed, but needed otherwise error",
+	translate("Interval to check for changed IP" .. "<br />" ..
+		"Values below 5 minutes == 300 seconds are not supported") )
+cu.template = "ddns/detail_lvalue"
+cu.default  = "minutes"
+cu:value("seconds", translate("seconds"))
+cu:value("minutes", translate("minutes"))
+cu:value("hours", translate("hours"))
+--cu:value("days", translate("days"))
+function cu.write(self, section, value)
+	-- remove when default
+	local secs = DDNS.calc_seconds(ci:formvalue(section), value)
+	if secs ~= 600 then	--default 10 minutes
+		return self.map:set(section, self.option, value)
+	else
+		return true
+	end
+end
+function cu.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- force_interval (modified) -- ###############################################
+fi = ns:taboption("timer", Value, "force_interval",
+	translate("Force Interval") )
+fi.template = "ddns/detail_value"
+fi.default  = "72" 	-- see dynamic_dns_updater.sh script
+--fi.rmempty = false	-- validate ourselves for translatable error messages
+function fi.validate(self, value)
+	if not DTYP.uinteger(value)
+	or tonumber(value) < 0 then
+		return nil, err_tab_timer(self) .. translate("minimum value '0'")
+	end
+
+	local force_s = DDNS.calc_seconds(value, fu:formvalue(section))
+	if force_s == 0 then
+		return value
+	end
+
+	local ci_value = ci:formvalue(section)
+	if not DTYP.uinteger(ci_value) then
+		return ""	-- ignore because error in check_interval above
+	end
+
+	local check_s = DDNS.calc_seconds(ci_value, cu:formvalue(section))
+	if force_s >= check_s then
+		return value
+	end
+
+	return nil, err_tab_timer(self) .. translate("must be greater or equal 'Check Interval'")
+end
+function fi.write(self, section, value)
+	-- simulate rmempty=true remove default
+	local secs = DDNS.calc_seconds(value, fu:formvalue(section))
+	if secs ~= 259200 then	--default 72 hours == 3 days
+		return self.map:set(section, self.option, value)
+	else
+		self.map:del(section, "force_unit")
+		return self.map:del(section, self.option)
+	end
+end
+function fi.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- force_unit -- ##############################################################
+fu = ns:taboption("timer", ListValue, "force_unit", "not displayed, but needed otherwise error",
+	translate("Interval to force updates send to DDNS Provider" .. "<br />" ..
+		"Setting this parameter to 0 will force the script to only run once" .. "<br />" ..
+		"Values lower 'Check Interval' except '0' are not supported") )
+fu.template = "ddns/detail_lvalue"
+fu.default  = "hours"
+--fu.rmempty  = false	-- want to control write process
+--fu:value("seconds", translate("seconds"))
+fu:value("minutes", translate("minutes"))
+fu:value("hours", translate("hours"))
+fu:value("days", translate("days"))
+function fu.write(self, section, value)
+	-- simulate rmempty=true remove default
+	local secs = DDNS.calc_seconds(fi:formvalue(section), value)
+	if secs ~= 259200 and secs ~= 0 then	--default 72 hours == 3 days
+		return self.map:set(section, self.option, value)
+	else
+		return true
+	end
+end
+function fu.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- retry_count -- #############################################################
+rc = ns:taboption("timer", Value, "retry_count")
+rc.title	= translate("Error Retry Counter")
+rc.description	= translate("On Error the script will stop execution after given number of retrys")
+		.. "<br />"
+		.. translate("The default setting of '0' will retry infinite.")
+rc.default	= "0"
+function rc.validate(self, value)
+	if not DTYP.uinteger(value) then
+		return nil, err_tab_timer(self) .. translate("minimum value '0'")
+	else
+		return value
+	end
+end
+function rc.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- retry_interval -- ##########################################################
+ri = ns:taboption("timer", Value, "retry_interval",
+	translate("Error Retry Interval") )
+ri.template = "ddns/detail_value"
+ri.default  = "60"
+function ri.validate(self, value)
+	if not DTYP.uinteger(value)
+	or tonumber(value) < 1 then
+		return nil, err_tab_timer(self) .. translate("minimum value '1'")
+	else
+		return value
+	end
+end
+function ri.write(self, section, value)
+	-- simulate rmempty=true remove default
+	local secs = DDNS.calc_seconds(value, ru:formvalue(section))
+	if secs ~= 60 then	--default 60seconds
+		return self.map:set(section, self.option, value)
+	else
+		self.map:del(section, "retry_unit")
+		return self.map:del(section, self.option)
+	end
+end
+function ri.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- retry_unit -- ##############################################################
+ru = ns:taboption("timer", ListValue, "retry_unit", "not displayed, but needed otherwise error",
+	translate("On Error the script will retry the failed action after given time") )
+ru.template = "ddns/detail_lvalue"
+ru.default  = "seconds"
+--ru.rmempty  = false	-- want to control write process
+ru:value("seconds", translate("seconds"))
+ru:value("minutes", translate("minutes"))
+--ru:value("hours", translate("hours"))
+--ru:value("days", translate("days"))
+function ru.write(self, section, value)
+	-- simulate rmempty=true remove default
+	local secs = DDNS.calc_seconds(ri:formvalue(section), value)
+	if secs ~= 60 then	--default 60seconds
+		return self.map:set(section, self.option, value)
+	else
+		return true -- will be deleted by retry_interval
+	end
+end
+function ru.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- TAB: LogView  ##################################################################################
+lv = ns:taboption("logview", DummyValue, "_logview")
+lv.template = "ddns/detail_logview"
+lv.inputtitle = translate("Read / Reread log file")
+lv.rows = 50
+function lv.cfgvalue(self, section)
+	local lfile=logdir .. "/" .. section .. ".log"
+	if NXFS.access(lfile) then
+		return lfile .. "\n" .. translate("Please press [Read] button")
+	end
+	return lfile .. "\n" .. translate("File not found or empty")
+end
+
+return m
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua d/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua
--- c/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,121 @@
+-- Copyright 2014 Christian Schoenebeck <christian dot schoenebeck at gmail dot com>
+-- Licensed to the public under the Apache License 2.0.
+
+local NX   = require "nixio"
+local NXFS = require "nixio.fs"
+local DISP = require "luci.dispatcher"
+local SYS  = require "luci.sys"
+local CTRL = require "luci.controller.ddns"	-- this application's controller
+local DDNS = require "luci.tools.ddns"		-- ddns multiused functions
+
+-- cbi-map definition -- #######################################################
+local m = Map("ddns")
+m.title		= CTRL.app_title_back()
+m.description	= CTRL.app_description()
+m.redirect	= DISP.build_url("admin", "services", "ddns")
+
+function m.commit_handler(self)
+	if self.changed then	-- changes ?
+		local command = CTRL.luci_helper .. " -- reload"
+		os.execute(command)	-- reload configuration
+	end
+end
+
+-- cbi-section definition -- ###################################################
+local ns = m:section( NamedSection, "global", "ddns",
+	translate("Global Settings"),
+	translate("Configure here the details for all Dynamic DNS services including this LuCI application.") 
+	.. [[<br /><strong>]]
+	.. translate("It is NOT recommended for casual users to change settings on this page.")
+	.. [[</strong><br />]]
+	.. [[<a href="https://openwrt.org/docs/guide-user/base-system/ddns#section_ddns" target="_blank">]]
+	.. translate("For detailed information about parameter settings look here.")
+	.. [[</a>]]
+	)
+
+-- section might not exist
+function ns.cfgvalue(self, section)
+	if not self.map:get(section) then
+		self.map:set(section, nil, self.sectiontype)
+	end
+	return self.map:get(section)
+end
+
+-- upd_privateip  -- ###########################################################
+local ali	= ns:option(Flag, "upd_privateip")
+ali.title	= translate("Allow non-public IP's")
+ali.description = translate("Non-public and by default blocked IP's") .. ":"
+		.. [[<br /><strong>IPv4: </strong>]]
+		.. "0/8, 10/8, 100.64/10, 127/8, 169.254/16, 172.16/12, 192.168/16"
+		.. [[<br /><strong>IPv6: </strong>]]
+		.. "::/32, f000::/4"
+ali.default	= "0"
+
+-- ddns_dateformat  -- #########################################################
+local df	= ns:option(Value, "ddns_dateformat")
+df.title	= translate("Date format")
+df.description	= [[<a href="http://www.cplusplus.com/reference/ctime/strftime/" target="_blank">]]
+		.. translate("For supported codes look here") 
+		.. [[</a>]]
+df.template	= "ddns/global_value"
+df.default	= "%F %R"
+df.date_string	= ""
+function df.cfgvalue(self, section)
+	local value = AbstractValue.cfgvalue(self, section) or self.default
+	local epoch = os.time()
+	self.date_string = DDNS.epoch2date(epoch, value)
+	return value
+end
+function df.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- ddns_rundir  -- #############################################################
+local rd	= ns:option(Value, "ddns_rundir")
+rd.title	= translate("Status directory")
+rd.description	= translate("Directory contains PID and other status information for each running section")
+rd.default	= "/var/run/ddns"
+-- no need to validate. if empty default is used everything else created by dns-scripts
+function rd.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- ddns_logdir  -- #############################################################
+local ld	= ns:option(Value, "ddns_logdir")
+ld.title	= translate("Log directory")
+ld.description	= translate("Directory contains Log files for each running section")
+ld.default	= "/var/log/ddns"
+-- no need to validate. if empty default is used everything else created by dns-scripts
+function ld.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- ddns_loglines  -- ###########################################################
+local ll	= ns:option(Value, "ddns_loglines")
+ll.title	= translate("Log length")
+ll.description	= translate("Number of last lines stored in log files")
+ll.default	= "250"
+function ll.validate(self, value)
+	local n = tonumber(value)
+	if not n or math.floor(n) ~= n or n < 1 then
+		return nil, self.title .. ": " .. translate("minimum value '1'")
+	end
+	return value
+end
+function ll.parse(self, section, novld)
+	DDNS.value_parse(self, section, novld)
+end
+
+-- use_curl  -- ################################################################
+if (SYS.call([[ grep -i "\+ssl" /usr/bin/wget >/dev/null 2>&1 ]]) == 0) 
+and NXFS.access("/usr/bin/curl") then
+	local pc	= ns:option(Flag, "use_curl")
+	pc.title	= translate("Use cURL")
+	pc.description	= translate("If both cURL and GNU Wget are installed, Wget is used by default.")
+		.. [[<br />]]
+		.. translate("To use cURL activate this option.")
+	pc.orientation	= "horizontal"
+	pc.default	= "0"
+end
+
+return m
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua d/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua
--- c/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,166 @@
+-- Copyright 2014-2016 Christian Schoenebeck <christian dot schoenebeck at gmail dot com>
+-- Licensed to the public under the Apache License 2.0.
+
+local DISP = require "luci.dispatcher"
+local SYS  = require "luci.sys"
+local CTRL = require "luci.controller.ddns"	-- this application's controller
+local DDNS = require "luci.tools.ddns"		-- ddns multiused functions
+
+-- html constants
+font_red = [[<font color="red">]]
+font_off = [[</font>]]
+bold_on  = [[<strong>]]
+bold_off = [[</strong>]]
+
+-- cbi-map definition -- #######################################################
+m = Map("ddns")
+m.title		= CTRL.app_title_back()
+m.description	= CTRL.app_description()
+m.redirect	= DISP.build_url("admin", "services", "ddns")
+
+-- SimpleSection definition -- #################################################
+-- show Hints to optimize installation and script usage
+s = m:section( SimpleSection,
+	translate("Hints"),
+	translate("Below a list of configuration tips for your system to run Dynamic DNS updates without limitations") )
+
+-- ddns-scripts needs to be updated for full functionality
+if not CTRL.service_ok() then
+	local so = s:option(DummyValue, "_update_needed")
+	so.titleref = DISP.build_url("admin", "system", "opkg")
+	so.rawhtml  = true
+	so.title = font_red .. bold_on ..
+		translate("Software update required") .. bold_off .. font_off
+	so.value = translate("The currently installed 'ddns-scripts' package did not support all available settings.") ..
+			"<br />" ..
+			translate("Please update to the current version!")
+end
+
+-- DDNS Service disabled
+if not SYS.init.enabled("ddns") then
+	local se = s:option(DummyValue, "_not_enabled")
+	se.titleref = DISP.build_url("admin", "system", "startup")
+	se.rawhtml  = true
+	se.title = bold_on ..
+		translate("DDNS Autostart disabled") .. bold_off
+	se.value = translate("Currently DDNS updates are not started at boot or on interface events." .. "<br />" ..
+			"This is the default if you run DDNS scripts by yourself (i.e. via cron with force_interval set to '0')" )
+end
+
+-- No IPv6 support
+if not DDNS.env_info("has_ipv6") then
+	local v6 = s:option(DummyValue, "_no_ipv6")
+	v6.titleref = 'http://www.openwrt.org" target="_blank'
+	v6.rawhtml  = true
+	v6.title = bold_on ..
+		translate("IPv6 not supported") .. bold_off
+	v6.value = translate("IPv6 is currently not (fully) supported by this system" .. "<br />" ..
+			"Please follow the instructions on OpenWrt's homepage to enable IPv6 support" .. "<br />" ..
+			"or update your system to the latest OpenWrt Release")
+end
+
+-- No HTTPS support
+if not DDNS.env_info("has_ssl") then
+	local sl = s:option(DummyValue, "_no_https")
+	sl.titleref = DISP.build_url("admin", "system", "opkg")
+	sl.rawhtml  = true
+	sl.title = bold_on ..
+		translate("HTTPS not supported") .. bold_off
+	sl.value = translate("Neither GNU Wget with SSL nor cURL installed to support secure updates via HTTPS protocol.") ..
+			"<br />- " ..
+			translate("You should install 'wget' or 'curl' or 'uclient-fetch' with 'libustream-*ssl' package.") ..
+			"<br />- " ..
+			translate("In some versions cURL/libcurl in OpenWrt is compiled without proxy support.")
+end
+
+-- No bind_network
+if not DDNS.env_info("has_bindnet") then
+	local bn = s:option(DummyValue, "_no_bind_network")
+	bn.titleref = DISP.build_url("admin", "system", "opkg")
+	bn.rawhtml  = true
+	bn.title = bold_on ..
+		translate("Binding to a specific network not supported") .. bold_off
+	bn.value = translate("Neither GNU Wget with SSL nor cURL installed to select a network to use for communication.") ..
+			"<br />- " ..
+			translate("You should install 'wget' or 'curl' package.") ..
+			"<br />- " ..
+			translate("GNU Wget will use the IP of given network, cURL will use the physical interface.") ..
+			"<br />- " ..
+			translate("In some versions cURL/libcurl in OpenWrt is compiled without proxy support.")
+end
+
+-- currently only cURL possibly without proxy support
+if not DDNS.env_info("has_proxy") then
+	local px = s:option(DummyValue, "_no_proxy")
+	px.titleref = DISP.build_url("admin", "system", "opkg")
+	px.rawhtml  = true
+	px.title = bold_on ..
+		translate("cURL without Proxy Support") .. bold_off
+	px.value = translate("cURL is installed, but libcurl was compiled without proxy support.") ..
+			"<br />- " ..
+			translate("You should install 'wget' or 'uclient-fetch' package or replace libcurl.") ..
+			"<br />- " ..
+			translate("In some versions cURL/libcurl in OpenWrt is compiled without proxy support.")
+end
+
+-- "Force IP Version not supported"
+if not DDNS.env_info("has_forceip") then
+	local fi = s:option(DummyValue, "_no_force_ip")
+	fi.titleref = DISP.build_url("admin", "system", "opkg")
+	fi.rawhtml  = true
+	fi.title = bold_on ..
+		translate("Force IP Version not supported") .. bold_off
+	local value = translate("BusyBox's nslookup and Wget do not support to specify " ..
+				"the IP version to use for communication with DDNS Provider!")
+	if not (DDNS.env_info("has_wgetssl") or DDNS.env_info("has_curl") or DDNS.env_info("has_fetch")) then
+		value = value .. "<br />- " ..
+			translate("You should install 'wget' or 'curl' or 'uclient-fetch' package.")
+	end
+	if not DDNS.env_info("has_bindhost") then
+		value = value .. "<br />- " ..
+			translate("You should install 'bind-host' or 'knot-host' or 'drill' package for DNS requests.")
+	end
+	fi.value = value
+end
+
+-- "DNS requests via TCP not supported"
+if not DDNS.env_info("has_bindhost") then
+	local dt = s:option(DummyValue, "_no_dnstcp")
+	dt.titleref = DISP.build_url("admin", "system", "opkg")
+	dt.rawhtml  = true
+	dt.title = bold_on ..
+		translate("DNS requests via TCP not supported") .. bold_off
+	dt.value = translate("BusyBox's nslookup and hostip do not support to specify to use TCP " ..
+				"instead of default UDP when requesting DNS server!") ..
+			"<br />- " ..
+			translate("You should install 'bind-host' or 'knot-host' or 'drill' package for DNS requests.")
+end
+
+-- nslookup compiled with musl produce problems when using
+if not DDNS.env_info("has_dnsserver") then
+	local ds = s:option(DummyValue, "_no_dnsserver")
+	ds.titleref = DISP.build_url("admin", "system", "opkg")
+	ds.rawhtml  = true
+	ds.title = bold_on ..
+		translate("Using specific DNS Server not supported") .. bold_off
+	ds.value = translate("BusyBox's nslookup in the current compiled version " ..
+				"does not handle given DNS Servers correctly!") ..
+			"<br />- " ..
+			translate("You should install 'bind-host' or 'knot-host' or 'drill' or 'hostip' package, " ..
+				"if you need to specify a DNS server to detect your registered IP.")
+end
+
+-- certificates installed
+if DDNS.env_info("has_ssl") and not DDNS.env_info("has_cacerts") then
+	local ca = s:option(DummyValue, "_no_certs")
+	ca.titleref = DISP.build_url("admin", "system", "opkg")
+	ca.rawhtml  = true
+	ca.title = bold_on ..
+		translate("No certificates found") .. bold_off
+	ca.value = translate("If using secure communication you should verify server certificates!") ..
+			"<br />- " ..
+			translate("Install 'ca-certificates' package or needed certificates " ..
+				"by hand into /etc/ssl/certs default directory")
+end
+
+return m
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua d/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua
--- c/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,249 @@
+-- Copyright 2014-2018 Christian Schoenebeck <christian dot schoenebeck at gmail dot com>
+-- Licensed to the public under the Apache License 2.0.
+
+local DISP = require "luci.dispatcher"
+local HTTP = require "luci.http"
+local SYS  = require "luci.sys"
+local CTRL = require "luci.controller.ddns"	-- this application's controller
+local DDNS = require "luci.tools.ddns"		-- ddns multiused functions
+
+local show_hints = not (DDNS.env_info("has_ipv6")		-- IPv6 support
+				   and  DDNS.env_info("has_ssl")		-- HTTPS support
+				   and  DDNS.env_info("has_proxy")		-- Proxy support
+				   and  DDNS.env_info("has_bindhost")	-- DNS TCP support
+				   and  DDNS.env_info("has_forceip")	-- Force IP version
+				   and  DDNS.env_info("has_dnsserver")	-- DNS server support
+				   and  DDNS.env_info("has_bindnet")	-- Bind to network/interface
+				   and  DDNS.env_info("has_cacerts")	-- certificates installed at /etc/ssl/certs
+		)
+local not_enabled = not SYS.init.enabled("ddns")
+local need_update = not CTRL.service_ok()
+
+-- html constants
+font_red = [[<font color="red">]]
+font_off = [[</font>]]
+bold_on  = [[<strong>]]
+bold_off = [[</strong>]]
+
+-- cbi-map definition -- #######################################################
+m = Map("ddns")
+m.title		= CTRL.app_title_main()
+m.description	= CTRL.app_description()
+
+m.on_after_commit = function(self)
+	if self.changed then	-- changes ?
+		local command = CTRL.luci_helper
+		if SYS.init.enabled("ddns") then	-- ddns service enabled, restart all
+			command = command .. " -- restart"
+			os.execute(command)
+		else	-- ddns service disabled, send SIGHUP to running
+			command = command .. " -- reload"
+			os.execute(command)
+		end
+	end
+end
+
+-- SimpleSection definition -- ##################################################
+-- with all the JavaScripts we need for "a good Show"
+a = m:section( SimpleSection )
+a.template = "ddns/overview_status"
+
+-- SimpleSection definition -- #################################################
+-- show Hints to optimize installation and script usage
+if show_hints or need_update or not_enabled then
+
+	s = m:section( SimpleSection, translate("Hints") )
+
+	-- ddns-scripts needs to be updated for full functionality
+	if need_update then
+		local dv = s:option(DummyValue, "_update_needed")
+		dv.titleref = DISP.build_url("admin", "system", "packages")
+		dv.rawhtml  = true
+		dv.title = font_red .. bold_on ..
+			translate("Software update required") .. bold_off .. font_off
+		dv.value = translate("The currently installed 'ddns-scripts' package did not support all available settings.") ..
+				"<br />" ..
+				translate("Please update to the current version!")
+	end
+
+	-- DDNS Service disabled
+	if not_enabled then
+		local dv = s:option(DummyValue, "_not_enabled")
+		dv.titleref = DISP.build_url("admin", "system", "startup")
+		dv.rawhtml  = true
+		dv.title = bold_on ..
+			translate("DDNS Autostart disabled") .. bold_off
+		dv.value = translate("Currently DDNS updates are not started at boot or on interface events." .. "<br />" ..
+				"You can start/stop each configuration here. It will run until next reboot.")
+	end
+
+	-- Show more hints on a separate page
+	if show_hints then
+		local dv = s:option(DummyValue, "_separate")
+		dv.titleref = DISP.build_url("admin", "services", "ddns", "hints")
+		dv.rawhtml  = true
+		dv.title = bold_on ..
+			translate("Show more") .. bold_off
+		dv.value = translate("Follow this link" .. "<br />" ..
+				"You will find more hints to optimize your system to run DDNS scripts with all options")
+	end
+end
+
+-- TableSection definition -- ##################################################
+ts = m:section( TypedSection, "service",
+	translate("Overview"),
+	translate("Below is a list of configured DDNS configurations and their current state.")
+	.. "<br />"
+	.. translate("If you want to send updates for IPv4 and IPv6 you need to define two separate Configurations "
+		.. "i.e. 'myddns_ipv4' and 'myddns_ipv6'")
+	.. "<br />"
+	.. [[<a href="]] .. DISP.build_url("admin", "services", "ddns", "global") .. [[">]]
+	.. translate("To change global settings click here") .. [[</a>]] )
+ts.sectionhead = translate("Configuration")
+ts.template = "cbi/tblsection"
+ts.addremove = true
+ts.extedit = DISP.build_url("admin", "services", "ddns", "detail", "%s")
+function ts.create(self, name)
+	AbstractSection.create(self, name)
+	HTTP.redirect( self.extedit:format(name) )
+end
+
+-- Lookup_Host and registered IP -- #################################################
+dom = ts:option(DummyValue, "_lookupIP",
+	translate("Lookup Hostname") .. "<br />" .. translate("Registered IP") )
+dom.template = "ddns/overview_doubleline"
+function dom.set_one(self, section)
+	local lookup = self.map:get(section, "lookup_host") or ""
+	if lookup ~= "" then
+		return lookup
+	else
+		return [[<em>]] .. translate("config error") .. [[</em>]]
+	end
+end
+function dom.set_two(self, section)
+	local chk_sec  = DDNS.calc_seconds(
+				tonumber(self.map:get(section, "check_interval")) or 10,
+				self.map:get(section, "check_unit") or "minutes" )
+	local ip = DDNS.get_regip(section, chk_sec)
+	if ip == "NOFILE" then
+		local lookup_host = self.map:get(section, "lookup_host") or ""
+		if lookup_host == "" then return "" end
+		local dnsserver = self.map:get(section, "dnsserver") or ""
+		local use_ipv6 = tonumber(self.map:get(section, "use_ipv6") or 0)
+		local force_ipversion = tonumber(self.map:get(section, "force_ipversion") or 0)
+		local force_dnstcp = tonumber(self.map:get(section, "force_dnstcp") or 0)
+		local is_glue = tonumber(self.map:get(section, "is_glue") or 0)
+		local command = CTRL.luci_helper .. [[ -]]
+		if (use_ipv6 == 1) then command = command .. [[6]] end
+		if (force_ipversion == 1) then command = command .. [[f]] end
+		if (force_dnstcp == 1) then command = command .. [[t]] end
+		if (is_glue == 1) then command = command .. [[g]] end
+		command = command .. [[l ]] .. lookup_host
+		command = command .. [[ -S ]] .. section
+		if (#dnsserver > 0) then command = command .. [[ -d ]] .. dnsserver end
+		command = command .. [[ -- get_registered_ip]]
+		ip = SYS.exec(command)
+	end
+	if ip == "" then ip = translate("no data") end
+	return ip
+end
+
+-- enabled
+ena = ts:option( Flag, "enabled",
+	translate("Enabled"))
+ena.template = "ddns/overview_enabled"
+ena.rmempty = false
+
+-- show PID and next update
+upd = ts:option( DummyValue, "_update",
+	translate("Last Update") .. "<br />" .. translate("Next Update"))
+upd.template = "ddns/overview_doubleline"
+function upd.set_one(self, section)	-- fill Last Update
+	-- get/validate last update
+	local uptime   = SYS.uptime()
+	local lasttime = DDNS.get_lastupd(section)
+	if lasttime > uptime then 	-- /var might not be linked to /tmp and cleared on reboot
+		lasttime = 0
+	end
+
+	-- no last update happen
+	if lasttime == 0 then
+		return translate("never")
+
+	-- we read last update
+	else
+		-- calc last update
+		--            os.epoch  - sys.uptime + lastupdate(uptime)
+		local epoch = os.time() - uptime + lasttime
+		-- use linux date to convert epoch
+		return DDNS.epoch2date(epoch)
+	end
+end
+function upd.set_two(self, section)	-- fill Next Update
+	-- get enabled state
+	local enabled	= tonumber(self.map:get(section, "enabled") or 0)
+	local datenext	= translate("unknown error")	-- formatted date of next update
+
+	-- get force seconds
+	local force_interval = tonumber(self.map:get(section, "force_interval") or 72)
+	local force_unit = self.map:get(section, "force_unit") or "hours"
+	local force_seconds = DDNS.calc_seconds(force_interval, force_unit)
+
+	-- get last update and get/validate PID
+	local uptime   = SYS.uptime()
+	local lasttime = DDNS.get_lastupd(section)
+	if lasttime > uptime then 	-- /var might not be linked to /tmp and cleared on reboot
+		lasttime = 0
+	end
+	local pid      = DDNS.get_pid(section)
+
+	-- calc next update
+	if lasttime > 0 then
+		local epoch = os.time() - uptime + lasttime + force_seconds
+		-- use linux date to convert epoch
+		datelast = DDNS.epoch2date(epoch)
+	end
+
+	-- process running but update needs to happen
+	if pid > 0 and ( lasttime + force_seconds - uptime ) < 0 then
+		datenext = translate("Verify")
+
+	-- run once
+	elseif force_seconds == 0 then
+		datenext = translate("Run once")
+
+	-- no process running and NOT enabled
+	elseif pid == 0 and enabled == 0 then
+		datenext  = translate("Disabled")
+
+	-- no process running and NOT
+	elseif pid == 0 and enabled ~= 0 then
+		datenext = translate("Stopped")
+	end
+
+	return datenext
+end
+
+-- start/stop button
+btn = ts:option( Button, "_startstop",
+	translate("Process ID") .. "<br />" .. translate("Start / Stop") )
+btn.template = "ddns/overview_startstop"
+function btn.cfgvalue(self, section)
+	local pid = DDNS.get_pid(section)
+	if pid > 0 then
+		btn.inputtitle	= "PID: " .. pid
+		btn.inputstyle	= "reset"
+		btn.disabled	= false
+	elseif (self.map:get(section, "enabled") or "0") ~= "0" then
+		btn.inputtitle	= translate("Start")
+		btn.inputstyle	= "apply"
+		btn.disabled	= false
+	else
+		btn.inputtitle	= "----------"
+		btn.inputstyle	= "button"
+		btn.disabled	= true
+	end
+	return true
+end
+
+return m
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/tools/ddns.lua d/feeds/luci/applications/luci-app-ddns/luasrc/tools/ddns.lua
--- c/feeds/luci/applications/luci-app-ddns/luasrc/tools/ddns.lua	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/tools/ddns.lua	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,429 @@
+-- Copyright 2014-2018 Christian Schoenebeck <christian dot schoenebeck at gmail dot com>
+-- Licensed to the public under the Apache License 2.0.
+
+module("luci.tools.ddns", package.seeall)
+
+local NX   = require "nixio"
+local NXFS = require "nixio.fs"
+local UCI  = require "luci.model.uci"
+local SYS  = require "luci.sys"
+
+function env_info(type)
+
+	if ( type == "has_ssl" ) or ( type == "has_proxy" ) or ( type == "has_forceip" )
+	    or ( type == "has_bindnet" ) or ( type == "has_fetch" )
+		or ( type == "has_wgetssl" ) or ( type == "has_curl" )
+		or ( type == "has_curlssl" ) or ( type == "has_curlpxy" )
+		or ( type == "has_fetchssl" ) or ( type == "has_bbwget" ) then
+
+		local function has_wgetssl()
+			return (SYS.call( [[which wget-ssl >/dev/null 2>&1]] ) == 0)	-- and true or nil
+		end
+
+		local function has_curlssl()
+			return (SYS.call( [[$(which curl) -V 2>&1 | grep -qF "https"]] ) == 0)
+		end
+
+		local function has_fetch()
+			return (SYS.call( [[which uclient-fetch >/dev/null 2>&1]] ) == 0)
+		end
+
+		local function has_fetchssl()
+			return NXFS.access("/lib/libustream-ssl.so")
+		end
+
+		local function has_curl()
+			return (SYS.call( [[which curl >/dev/null 2>&1]] ) == 0)
+		end
+
+		local function has_curlpxy()
+			return (SYS.call( [[grep -i "all_proxy" /usr/lib/libcurl.so* >/dev/null 2>&1]] ) == 0)
+		end
+
+		local function has_bbwget()
+			return (SYS.call( [[$(which wget) -V 2>&1 | grep -iqF "busybox"]] ) == 0)
+		end
+
+		if type == "has_wgetssl" then
+			return has_wgetssl()
+
+		elseif type == "has_curl" then
+			return has_curl()
+
+		elseif type == "has_curlssl" then
+			return has_curlssl()
+
+		elseif type == "has_curlpxy" then
+			return has_curlpxy()
+
+		elseif type == "has_fetch" then
+			return has_fetch()
+
+		elseif type == "has_fetchssl" then
+			return has_fetchssl()
+
+		elseif type == "has_bbwget" then
+			return has_bbwget()
+
+		elseif type == "has_ssl" then
+			if has_wgetssl() then return true end
+			if has_curlssl() then return true end
+			if (has_fetch() and has_fetchssl()) then return true end
+			return false
+
+		elseif type == "has_proxy" then
+			if has_wgetssl() then return true end
+			if has_curlpxy() then return true end
+			if has_fetch() then return true end
+			if has_bbwget() then return true end
+			return false
+
+		elseif type == "has_forceip" then
+			if has_wgetssl() then return true end
+			if has_curl() then return true end
+			if has_fetch() then return true end -- only really needed for transfer
+			return false
+
+		elseif type == "has_bindnet" then
+			if has_curl() then return true end
+			if has_wgetssl() then return true end
+			return false
+		end
+
+	elseif ( type == "has_dnsserver" ) or ( type == "has_bindhost" ) or ( type == "has_hostip" ) or ( type == "has_nslookup" ) then
+		local function has_bindhost()
+			if (SYS.call( [[which host >/dev/null 2>&1]] ) == 0) then return true end
+			if (SYS.call( [[which khost >/dev/null 2>&1]] ) == 0) then return true end
+			if (SYS.call( [[which drill >/dev/null 2>&1]] ) == 0) then return true end
+			return false
+		end
+
+		local function has_hostip()
+			return (SYS.call( [[which hostip >/dev/null 2>&1]] ) == 0)
+		end
+
+		local function has_nslookup()
+			return (SYS.call( [[which nslookup >/dev/null 2>&1]] ) == 0)
+		end
+
+		if type == "has_bindhost" then
+			return has_bindhost()
+		elseif type == "has_hostip" then
+			return has_hostip()
+		elseif type == "has_nslookup" then
+			return has_nslookup()
+		elseif type == "has_dnsserver" then
+			if has_bindhost() then return true end
+			if has_hostip() then return true end
+			if has_nslookup() then return true end
+			return false
+		end
+
+	elseif type == "has_ipv6" then
+		return (NXFS.access("/proc/net/ipv6_route") and NXFS.access("/usr/sbin/ip6tables"))
+
+	elseif type == "has_cacerts" then
+		--old _check_certs() local function
+		local _, v = NXFS.glob("/etc/ssl/certs/*.crt")
+		if ( v == 0 ) then _, v = NXFS.glob("/etc/ssl/certs/*.pem") end
+		return (v > 0)
+	else
+		return
+	end
+
+end
+
+-- function to calculate seconds from given interval and unit
+function calc_seconds(interval, unit)
+	if not tonumber(interval) then
+		return nil
+	elseif unit == "days" then
+		return (tonumber(interval) * 86400)	-- 60 sec * 60 min * 24 h
+	elseif unit == "hours" then
+		return (tonumber(interval) * 3600)	-- 60 sec * 60 min
+	elseif unit == "minutes" then
+		return (tonumber(interval) * 60)	-- 60 sec
+	elseif unit == "seconds" then
+		return tonumber(interval)
+	else
+		return nil
+	end
+end
+
+-- convert epoch date to given format
+function epoch2date(epoch, format)
+	if not format or #format < 2 then
+		local uci = UCI.cursor()
+		format    = uci:get("ddns", "global", "ddns_dateformat") or "%F %R"
+		uci:unload("ddns")
+	end
+	format = format:gsub("%%n", "<br />")	-- replace newline
+	format = format:gsub("%%t", "    ")	-- replace tab
+	return os.date(format, epoch)
+end
+
+-- read lastupdate from [section].update file
+function get_lastupd(section)
+	local uci   = UCI.cursor()
+	local rdir  = uci:get("ddns", "global", "ddns_rundir") or "/var/run/ddns"
+	local etime = tonumber(NXFS.readfile("%s/%s.update" % { rdir, section } ) or 0 )
+	uci:unload("ddns")
+	return etime
+end
+
+-- read registered IP from [section].ip file
+function get_regip(section, chk_sec)
+	local uci   = UCI.cursor()
+	local rdir  = uci:get("ddns", "global", "ddns_rundir") or "/var/run/ddns"
+	local ip = "NOFILE"
+	if NXFS.access("%s/%s.ip" % { rdir, section }) then
+		local ftime = NXFS.stat("%s/%s.ip" % { rdir, section }, "ctime") or 0
+		local otime = os.time()
+		-- give ddns-scripts time (9 sec) to update file
+		if otime < (ftime + chk_sec + 9) then
+			ip = NXFS.readfile("%s/%s.ip" % { rdir, section })
+		end
+	end
+	uci:unload("ddns")
+	return ip
+end
+
+-- read PID from run file and verify if still running
+function get_pid(section)
+	local uci  = UCI.cursor()
+	local rdir = uci:get("ddns", "global", "ddns_rundir") or "/var/run/ddns"
+	local pid  = tonumber(NXFS.readfile("%s/%s.pid" % { rdir, section } ) or 0 )
+	if pid > 0 and not NX.kill(pid, 0) then
+		pid = 0
+	end
+	uci:unload("ddns")
+	return pid
+end
+
+-- replacement of build-in read of UCI option
+-- modified AbstractValue.cfgvalue(self, section) from cbi.lua
+-- needed to read from other option then current value definition
+function read_value(self, section, option)
+	local value
+	if self.tag_error[section] then
+		value = self:formvalue(section)
+	else
+		value = self.map:get(section, option)
+	end
+
+	if not value then
+		return nil
+	elseif not self.cast or self.cast == type(value) then
+		return value
+	elseif self.cast == "string" then
+		if type(value) == "table" then
+			return value[1]
+		end
+	elseif self.cast == "table" then
+		return { value }
+	end
+end
+
+-- replacement of build-in parse of "Value"
+-- modified AbstractValue.parse(self, section, novld) from cbi.lua
+-- validate is called if rmempty/optional true or false
+-- before write check if forcewrite, value eq default, and more
+function value_parse(self, section, novld)
+	local fvalue = self:formvalue(section)
+	local fexist = ( fvalue and (#fvalue > 0) )	-- not "nil" and "not empty"
+	local cvalue = self:cfgvalue(section)
+	local rm_opt = ( self.rmempty or self.optional )
+	local eq_cfg					-- flag: equal cfgvalue
+
+	-- If favlue and cvalue are both tables and have the same content
+	-- make them identical
+	if type(fvalue) == "table" and type(cvalue) == "table" then
+		eq_cfg = (#fvalue == #cvalue)
+		if eq_cfg then
+			for i=1, #fvalue do
+				if cvalue[i] ~= fvalue[i] then
+					eq_cfg = false
+				end
+			end
+		end
+		if eq_cfg then
+			fvalue = cvalue
+		end
+	end
+
+	-- removed parameter "section" from function call because used/accepted nowhere
+	-- also removed call to function "transfer"
+	local vvalue, errtxt = self:validate(fvalue)
+
+	-- error handling; validate return "nil"
+	if not vvalue then
+		if novld then 		-- and "novld" set
+			return		-- then exit without raising an error
+		end
+
+		if fexist then		-- and there is a formvalue
+			self:add_error(section, "invalid", errtxt or self.title .. ": invalid")
+			return		-- so data are invalid
+		elseif not rm_opt then	-- and empty formvalue but NOT (rmempty or optional) set
+			self:add_error(section, "missing", errtxt or self.title .. ": missing")
+			return		-- so data is missing
+		elseif errtxt then
+			self:add_error(section, "invalid", errtxt)
+			return
+		end
+--		error  ("\n option: " .. self.option ..
+--			"\n fvalue: " .. tostring(fvalue) ..
+--			"\n fexist: " .. tostring(fexist) ..
+--			"\n cvalue: " .. tostring(cvalue) ..
+--			"\n vvalue: " .. tostring(vvalue) ..
+--			"\n vexist: " .. tostring(vexist) ..
+--			"\n rm_opt: " .. tostring(rm_opt) ..
+--			"\n eq_cfg: " .. tostring(eq_cfg) ..
+--			"\n eq_def: " .. tostring(eq_def) ..
+--			"\n novld : " .. tostring(novld) ..
+--			"\n errtxt: " .. tostring(errtxt) )
+	end
+
+	-- lets continue with value returned from validate
+	eq_cfg  = ( vvalue == cvalue )					-- update equal_config flag
+	local vexist = ( vvalue and (#vvalue > 0) ) and true or false	-- not "nil" and "not empty"
+	local eq_def = ( vvalue == self.default )			-- equal_default flag
+
+	-- (rmempty or optional) and (no data or equal_default)
+	if rm_opt and (not vexist or eq_def) then
+		if self:remove(section) then		-- remove data from UCI
+			self.section.changed = true	-- and push events
+		end
+		return
+	end
+
+	-- not forcewrite and no changes, so nothing to write
+	if not self.forcewrite and eq_cfg then
+		return
+	end
+
+	-- we should have a valid value here
+	assert (vvalue, "\n option: " .. self.option ..
+			"\n fvalue: " .. tostring(fvalue) ..
+			"\n fexist: " .. tostring(fexist) ..
+			"\n cvalue: " .. tostring(cvalue) ..
+			"\n vvalue: " .. tostring(vvalue) ..
+			"\n vexist: " .. tostring(vexist) ..
+			"\n rm_opt: " .. tostring(rm_opt) ..
+			"\n eq_cfg: " .. tostring(eq_cfg) ..
+			"\n eq_def: " .. tostring(eq_def) ..
+			"\n errtxt: " .. tostring(errtxt) )
+
+	-- write data to UCI; raise event only on changes
+	if self:write(section, vvalue) and not eq_cfg then
+		self.section.changed = true
+	end
+end
+
+-----------------------------------------------------------------------------
+-- copied from https://svn.nmap.org/nmap/nselib/url.lua
+-- @author Diego Nehab
+-- @author Eddie Bell <ejlbell@gmail.com>
+--[[
+    URI parsing, composition and relative URL resolution
+    LuaSocket toolkit.
+    Author: Diego Nehab
+    RCS ID: $Id: url.lua,v 1.37 2005/11/22 08:33:29 diego Exp $
+    parse_query and build_query added For nmap (Eddie Bell <ejlbell@gmail.com>)
+]]--
+---
+-- Parses a URL and returns a table with all its parts according to RFC 2396.
+--
+-- The following grammar describes the names given to the URL parts.
+-- <code>
+-- <url> ::= <scheme>://<authority>/<path>;<params>?<query>#<fragment>
+-- <authority> ::= <userinfo>@<host>:<port>
+-- <userinfo> ::= <user>[:<password>]
+-- <path> :: = {<segment>/}<segment>
+-- </code>
+--
+-- The leading <code>/</code> in <code>/<path></code> is considered part of
+-- <code><path></code>.
+-- @param url URL of request.
+-- @param default Table with default values for each field.
+-- @return A table with the following fields, where RFC naming conventions have
+--   been preserved:
+--     <code>scheme</code>, <code>authority</code>, <code>userinfo</code>,
+--     <code>user</code>, <code>password</code>, <code>host</code>,
+--     <code>port</code>, <code>path</code>, <code>params</code>,
+--     <code>query</code>, and <code>fragment</code>.
+-----------------------------------------------------------------------------
+function parse_url(url)	--, default)
+	-- initialize default parameters
+	local parsed = {}
+--	for i,v in base.pairs(default or parsed) do
+--		parsed[i] = v
+--	end
+
+	-- remove whitespace
+--	url = string.gsub(url, "%s", "")
+	-- get fragment
+	url = string.gsub(url, "#(.*)$",
+		function(f)
+			parsed.fragment = f
+			return ""
+		end)
+	-- get scheme. Lower-case according to RFC 3986 section 3.1.
+	url = string.gsub(url, "^([%w][%w%+%-%.]*)%:",
+		function(s)
+			parsed.scheme = string.lower(s);
+			return ""
+		end)
+	-- get authority
+	url = string.gsub(url, "^//([^/]*)",
+		function(n)
+			parsed.authority = n
+			return ""
+		end)
+	-- get query stringing
+	url = string.gsub(url, "%?(.*)",
+		function(q)
+			parsed.query = q
+			return ""
+		end)
+	-- get params
+	url = string.gsub(url, "%;(.*)",
+		function(p)
+			parsed.params = p
+			return ""
+		end)
+	-- path is whatever was left
+	parsed.path = url
+
+	local authority = parsed.authority
+	if not authority then
+		return parsed
+	end
+	authority = string.gsub(authority,"^([^@]*)@",
+		function(u)
+			parsed.userinfo = u;
+			return ""
+		end)
+	authority = string.gsub(authority, ":([0-9]*)$",
+		function(p)
+			if p ~= "" then
+				parsed.port = p
+			end;
+			return ""
+		end)
+	if authority ~= "" then
+		parsed.host = authority
+	end
+
+	local userinfo = parsed.userinfo
+	if not userinfo then
+		return parsed
+	end
+	userinfo = string.gsub(userinfo, ":([^:]*)$",
+		function(p)
+			parsed.password = p;
+			return ""
+		end)
+	parsed.user = userinfo
+	return parsed
+end
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/view/admin_status/index/ddns.htm d/feeds/luci/applications/luci-app-ddns/luasrc/view/admin_status/index/ddns.htm
--- c/feeds/luci/applications/luci-app-ddns/luasrc/view/admin_status/index/ddns.htm	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/view/admin_status/index/ddns.htm	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1 @@
+<%+ddns/system_status%>
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_logview.htm d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_logview.htm
--- c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_logview.htm	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_logview.htm	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,56 @@
+
+<!-- ++ BEGIN ++ Dynamic DNS ++ detail_logview.htm ++ -->
+<script type="text/javascript">//<![CDATA[
+	function onclick_logview(section, bottom)  {
+		// get elements
+		var txt = document.getElementById("cbid.ddns." + section + "._logview.txt");	// TextArea
+		if ( !txt ) { return; }	// security check
+
+		XHR.get('<%=url([[admin]], [[services]], [[ddns]], [[logview]])%>/' + section, null,
+			function(x) {
+				if (x.responseText == "_nodata_")
+					txt.value = "<%:File not found or empty%>";
+				else
+					txt.value = x.responseText;
+				if (bottom)
+					txt.scrollTop = txt.scrollHeight;
+				else
+					txt.scrollTop = 0;			}
+		);
+	}
+//]]></script>
+
+<%+cbi/valueheader%>
+
+<br />
+
+<%
+-- one button on top, one at the buttom
+%>
+<input class="cbi-button cbi-input-button" style="align: center; width: 100%" type="button" onclick="onclick_logview(this.name, false)"
+<%=
+attr("name", section) .. attr("id", cbid .. ".btn1") .. attr("value", self.inputtitle)
+%> />
+
+<br /><br />
+
+<%
+-- set a readable style taken from openwrt theme for textarea#syslog
+-- in openwrt theme there are problems with a width of 100 so we check for theme and set to lower value
+%>
+<textarea style="width: <%if media == "/luci-static/openwrt.org" then%>98.7%<%else%>100%<%end%> ; min-height: 500px; border: 3px solid #cccccc; padding: 5px; font-family: monospace; resize: none;" wrap="off" readonly="readonly"
+<%=
+attr("name", cbid .. ".txt") .. attr("id", cbid .. ".txt") .. ifattr(self.rows, "rows")
+%> >
+<%-=pcdata(self:cfgvalue(section))-%>
+</textarea>
+<br /><br />
+
+<%
+-- one button on top, one at the buttom
+%>
+<input class="cbi-button cbi-input-button" style="align: center; width: 100%" type="button" onclick="onclick_logview(this.name, true)"
+<%= attr("name", section) .. attr("id", cbid .. ".btn2") .. attr("value", self.inputtitle) %> />
+
+<%+cbi/valuefooter%>
+<!-- ++ END ++ Dynamic DNS ++ detail_logview.htm ++ -->
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_lvalue.htm d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_lvalue.htm
--- c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_lvalue.htm	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_lvalue.htm	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,23 @@
+
+<!-- ++ BEGIN ++ Dynamic DNS ++ detail_lvalue.htm ++ -->
+<!-- no value header to suppress next line -->
+&#160;
+<% if self.widget == "select" then %>
+	<select class="cbi-input-select" onchange="cbi_d_update(this.id)"<%= attr("id", cbid) .. attr("name", cbid) .. ifattr(self.size, "size") %>>
+	<% for i, key in pairs(self.keylist) do -%>
+		<option id="cbi-<%=self.config.."-"..section.."-"..self.option.."-"..key%>"<%= attr("value", key) .. ifattr(tostring(self:cfgvalue(section) or self.default) == key, "selected", "selected") %>><%=striptags(self.vallist[i])%></option>
+	<%- end %>
+	</select>
+<% elseif self.widget == "radio" then
+	local c = 0
+	for i, key in pairs(self.keylist) do
+	c = c + 1
+%>
+	<input class="cbi-input-radio" onclick="cbi_d_update(this.id)" onchange="cbi_d_update(this.id)" type="radio"<%= attr("id", cbid..c) .. attr("name", cbid) .. attr("value", key) .. ifattr((self:cfgvalue(section) or self.default) == key, "checked", "checked") %> />
+	<label<%= attr("for", cbid..c) %>></label>
+	<label<%= attr("for", cbid..c) %>><%=self.vallist[i]%></label>
+<% if c == self.size then c = 0 %><% if self.orientation == "horizontal" then %>&#160;<% else %><br /><% end %>
+<% end end %>
+<% end %>
+<%+cbi/valuefooter%>
+<!-- ++ END ++ Dynamic DNS ++ detail_lvalue.htm ++ -->
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_value.htm d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_value.htm
--- c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_value.htm	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/detail_value.htm	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,9 @@
+
+<!-- ++ BEGIN ++ Dynamic DNS ++ detail_value.htm ++ -->
+<%+cbi/valueheader%>
+	<input type="text" class="cbi-input-text" style="width: 10em;" onchange="cbi_d_update(this.id)"<%=
+		attr("name", cbid) .. attr("id", cbid) .. attr("value", self:cfgvalue(section) or self.default) ..
+		ifattr(self.size, "size") .. ifattr(self.placeholder, "placeholder")
+	%> />
+<!-- no value footer to suppress next line -->
+<!-- ++ END ++ Dynamic DNS ++ detail_value.htm ++ -->
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/global_value.htm d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/global_value.htm
--- c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/global_value.htm	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/global_value.htm	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,33 @@
+
+<!-- ++ BEGIN ++ Dynamic DNS ++ global_value.htm ++ -->
+<%+cbi/valueheader%>
+<script type="text/javascript">//<![CDATA[
+	// event handler on changed date
+	function onkeyup_date(value) {
+		var obj = document.getElementById("cbid.ddns.global.ddns_dateformat.help");
+		if ( !obj ) { return; }	// security check
+
+		if ( value == "" || value.length == 0 ) { value = "%F %R"; }
+		var now = new Date();
+		var txt = now.toLocaleFormat(value);
+		// handle newline(%n) and tab(%t) needs to be converted to HTML
+		txt = txt.replace(new RegExp('\r?\n','g'), '<br />');
+		txt = txt.replace(new RegExp('\t','g'), '&nbsp;&nbsp;&nbsp;&nbsp;');
+		obj.innerHTML = "<%:Current setting%>: <strong>" + txt + "<\/strong>";
+	}
+//]]></script>
+
+<input type="text" class="cbi-input-text" onchange="cbi_d_update(this.id)" onkeyup="onkeyup_date(this.value)"
+	<%=
+	attr("name", cbid) .. attr("id", cbid) .. attr("value", self:cfgvalue(section) or self.default) ..
+	ifattr(self.size, "size") .. ifattr(self.placeholder, "placeholder")
+	%>
+/>
+<br />
+<div class="cbi-value-description">
+	<span class="cbi-value-helpicon"><img src="<%=resource%>/cbi/help.gif" alt="<%:help%>" /></span><%=self.description%>
+	<br /><%:Current setting%>: <strong><%=self.date_string%></strong>
+</div>	<!-- div class="cbi-value-description" -->
+</div>	<!-- div class="cbi-value-field" -->
+</div>	<!-- div class="cbi-value cbi-value-last" -->
+<!-- ++ END ++ Dynamic DNS ++ global_value.htm ++ -->
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_doubleline.htm d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_doubleline.htm
--- c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_doubleline.htm	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_doubleline.htm	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,10 @@
+
+<!-- ++ BEGIN ++ Dynamic DNS ++ overview_doubleline.htm ++ -->
+<%+cbi/valueheader%>
+
+<span id="<%=cbid%>.one"><%=self:set_one(section)%></span>
+<br />
+<span id="<%=cbid%>.two"><%=self:set_two(section)%></span>
+
+<%+cbi/valuefooter%>
+<!-- ++ END ++ Dynamic DNS ++ overview_doubleline.htm ++ -->
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_enabled.htm d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_enabled.htm
--- c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_enabled.htm	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_enabled.htm	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,16 @@
+
+<!-- ++ BEGIN ++ Dynamic DNS ++ overview_enabled.htm ++ -->
+<%+cbi/valueheader%>
+
+<input type="hidden" value="1"<%=
+	attr("name", "cbi.cbe." .. self.config .. "." .. section .. "." .. self.option)
+%> />
+                                                                 <!-- modified to call own function -->
+<input class="cbi-input-checkbox" onclick="cbi_d_update(this.id)" onchange="onchange_enabled(this.id)" type="checkbox"<%=
+	attr("id", cbid) .. attr("name", cbid) .. attr("value", self.enabled or 1) ..
+	ifattr((self:cfgvalue(section) or self.default) == self.enabled, "checked", "checked")
+%> />
+<label<%= attr("for", cbid)%>></label>
+
+<%+cbi/valuefooter%>
+<!-- ++ END ++ Dynamic DNS ++ overview_enabled.htm ++ -->
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_startstop.htm d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_startstop.htm
--- c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_startstop.htm	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_startstop.htm	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,17 @@
+
+<!-- ++ BEGIN ++ Dynamic DNS ++ overview_startstop.htm ++ -->
+<%+cbi/valueheader%>
+
+<% if self:cfgvalue(section) ~= false then
+-- We need to garantie that function cfgvalue run first to set missing parameters
+%>
+	<!-- style="font-size: 100%;" needed for openwrt theme to fix font size -->
+	<!-- type="button" onclick="..." enable standard onclick functionality   -->
+	<input class="cbi-button cbi-input-<%=self.inputstyle or "button" %>" style="font-size: 100%;" type="button" onclick="onclick_startstop(this.id)"
+	<%=
+	attr("name", section) .. attr("id", cbid) .. attr("value", self.inputtitle) .. ifattr(self.disabled, "disabled")
+	%> />
+<% end %>
+
+<%+cbi/valuefooter%>
+<!-- ++ END ++ Dynamic DNS ++ overview_startstop.htm ++ -->
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm
--- c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,180 @@
+
+<!-- ++ BEGIN ++ Dynamic DNS ++ overview_status.htm ++ -->
+<script type="text/javascript">//<![CDATA[
+
+	// helper to extract section from objects id
+	// cbi.ddns.SECTION._xyz
+	function _id2section(id) {
+		var x = id.split(".");
+		return x[2];
+	}
+
+	// helper to move status data to the relevant
+	// screen objects
+	// called by XHR.poll and onclick_startstop
+	function _data2elements(data) {
+		// Service sections
+		for( var i = 1; i < data.length; i++ )
+		{
+			var section = data[i].section	// Section to handle
+			var cbx = document.getElementById("cbid.ddns." + section + ".enabled");		// Enabled
+			var btn = document.getElementById("cbid.ddns." + section + "._startstop");	// Start/Stop button
+			var rip = document.getElementById("cbid.ddns." + section + "._lookupIP.two");	// Registered IP
+			var lup = document.getElementById("cbid.ddns." + section + "._update.one");	// Last Update
+			var nup = document.getElementById("cbid.ddns." + section + "._update.two");	// Next Update
+			if ( !(cbx && btn && rip && lup && nup) ) { return; }	// security check
+
+			// process id
+			if (data[i].pid > 0) {
+				// stop always possible if process running
+				btn.value = "PID: " + data[i].pid;
+				btn.className = "cbi-button cbi-input-reset";
+			} else {
+				// default Start / enabled
+				btn.value = "<%:Start%>";
+				btn.className = "cbi-button cbi-input-apply";
+			}
+			btn.disabled = false;	// button enabled
+
+			// last update
+			switch (data[i].datelast) {
+				case "_empty_":
+					lup.innerHTML = '<em><%:Unknown error%></em>' ;
+					break;
+				case "_never_":
+					lup.innerHTML = '<em><%:Never%></em>' ;
+					break;
+				default:
+					lup.innerHTML = data[i].datelast;
+					break;
+			}
+
+			// next update
+			switch (data[i].datenext) {
+				case "_empty_":
+					nup.innerHTML = '<em><%:Unknown error%></em>' ;
+					break;
+				case "_verify_":
+					nup.innerHTML = '<em><%:Verify%></em>';
+					break;
+				case "_runonce_":
+				case "_stopped_":
+				case "_disabled_":
+					if (cbx.checked && data[i].datenext == "_runonce_") {
+						nup.innerHTML = '<em><%:Run once%></em>';
+					} else if (cbx.checked) {
+						nup.innerHTML = '<em><%:Stopped%></em>';
+					} else {
+						nup.innerHTML = '<em><%:Disabled%></em>';
+						btn.value = '----------';
+						btn.className = "cbi-button cbi-input-button";	// no image
+						btn.disabled = true;	// disabled
+					}
+					break;
+				default:
+					nup.innerHTML = data[i].datenext;
+					break;
+			}
+
+			// lookup
+			// (data[i].lookup ignored here
+
+			// registered IP
+			// rip.innerHTML = "Registered IP";
+			if (data[i].lookup == "_nolookup_")
+				rip.innerHTML = '';
+			else if (data[i].reg_ip == "_nodata_")
+				rip.innerHTML = '<em><%:No data%></em>';
+			else
+				rip.innerHTML = data[i].reg_ip;
+
+			// monitored interfacce
+			// data[i].iface ignored here
+		}
+	}
+
+	// event handler for enabled checkbox
+	function onchange_enabled(id) {
+		// run original function in cbi.js
+		// whatever is done there
+		cbi_d_update(id);
+
+		var section = _id2section(id);
+		var cbx = document.getElementById("cbid.ddns." + section + ".enabled");
+		var btn = document.getElementById("cbid.ddns." + section + "._startstop");
+		if ( !(cbx && btn) ) { return; }	// security check
+
+		var pid_txt = btn.value;
+		var pid_found = ( pid_txt.search("PID") >= 0 ) ? true : false;
+
+		if (pid_found) {
+			// btn.value = "PID: 0000";
+			btn.className = "cbi-button cbi-button-reset";
+			btn.disabled = false;
+		} else if (cbx.checked) {
+			btn.value = "<%:Start%>";
+			btn.className = "cbi-button cbi-button-apply";
+			btn.disabled = false;
+		} else {
+			btn.value = '----------';
+			btn.className = "cbi-button cbi-input-button";	// no image
+			btn.disabled = true;		// disabled
+		}
+	}
+
+	// event handler for start/stop button
+	function onclick_startstop(id) {
+		// extract section
+		var section = _id2section(id);
+		// get elements
+		var cbx = document.getElementById("cbid.ddns." + section + ".enabled");		// Enabled
+		var obj = document.getElementById("cbi-ddns-overview-status-legend");		// object defined below to make in-/visible
+		if ( !(obj && cbx) ) { return; }	// security check
+
+		// make me visible
+		obj.parentNode.style.display = "block";
+
+		// do start/stop
+		var btnXHR = new XHR();
+		btnXHR.post('<%=url([[admin]], [[services]], [[ddns]], [[startstop]])%>/' + section + '/' + cbx.checked, { token: '<%=token%>' },
+			function(x, data) {
+				if (x.responseText == "_uncommitted_") {
+					// we need a trick to display Ampersand "&" in stead of "&#38;" or "&amp;"
+					// after translation
+					var txt="<%:Please [Save & Apply] your changes first%>";
+					alert( txt.replace(new RegExp("<%:&%>", "g"), "&") );
+				} else {
+					// should have data because status changed
+					// so update screen
+					if (data) { _data2elements(data); }
+				}
+				// make me invisible
+				obj.parentNode.style.display = "none";
+			}
+		);
+	}
+
+	// force to immediate show status on page load (not waiting for XHR.poll)
+	XHR.get('<%=url([[admin]], [[services]], [[ddns]], [[status]])%>', null,
+		function(x, data) {
+			if (data) { _data2elements(data); }
+		}
+	);
+
+	// define only ONE XHR.poll in a page because if one is running it blocks the other one
+	// optimum is to define on Map or Section Level from here you can reach all elements
+	// we need update every 15 seconds only
+	XHR.poll(-1, '<%=url([[admin]], [[services]], [[ddns]], [[status]])%>', null,
+		function(x, data) {
+			if (data) { _data2elements(data); }
+		}
+	);
+
+//]]></script>
+
+<fieldset class="cbi-section" style="display:none">
+	<legend id="cbi-ddns-overview-status-legend"><%:Applying changes%></legend>
+	<img src="<%=resource%>/icons/loading.gif" alt="<%:Loading%>" style="vertical-align:middle" />
+	<span id="cbi-ddns-overview-status-text"><%:Waiting for changes to be applied...%></span>
+</fieldset>
+<!-- ++ END ++ Dynamic DNS ++ overview_status.htm ++ -->
diff -uprN c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/system_status.htm d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/system_status.htm
--- c/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/system_status.htm	1970-01-01 08:00:00.000000000 +0800
+++ d/feeds/luci/applications/luci-app-ddns/luasrc/view/ddns/system_status.htm	2024-01-06 20:24:00.692755273 +0800
@@ -0,0 +1,60 @@
+<!-- ++ BEGIN ++ Dynamic DNS ++ system_status.htm ++ -->
+<script type="text/javascript">//<![CDATA[
+
+	//start polling data every 30 second, this doesn't change so much
+	XHR.poll(30, '<%=url([[admin]], [[services]], [[ddns]], [[status]])%>', null,
+		function(x, data) {
+			if (data) { 
+				var tbl = document.getElementById('ddns_status_table');
+				// security check
+				if ( !(tbl) ) { return; }
+				
+				var rows = [];
+		
+				// DDNS Service disabled
+				if (data[0].enabled == 0) {
+					var ddns_legend = document.getElementById('ddns_status_legend');
+					ddns_legend.style.display='none';
+					rows.push([
+							'<strong><font color="red"><%:DDNS Autostart disabled%></font>',
+							'<a class="cbi-button cbi-button-action important" type="button" href="' + data[0].url_up + '"><%:enable here%></a></strong>'
+							]);
+				} else {
+					for(var j = 1; j < data.length; j++ )
+					{
+						
+						rows.push([
+								'<strong>' + data[j].section + '</strong>', //configuration
+								data[j].datenextstat ? '<em>'+data[j].datenextstat+'</em>' : '<em>'+data[j].datenext+'</em>',
+								data[j].lookup ? data[j].lookup : '<em><%:config error%></em>',
+								data[j].reg_ip ? data[j].reg_ip : '<em><%:No data%></em>',
+								data[j].iface        // monitored interface
+								]);
+					}
+				}
+				
+				cbi_update_table(tbl, rows, '<%:There is no service configured.%>'); 
+			}
+		}
+	);
+	
+//]]></script>
+
+<fieldset class="cbi-section" id="ddns_status_section">
+	<legend><a href="<%=url([[admin]], [[services]], [[ddns]])%>"><%:Dynamic DNS%></a></legend>
+	<div class="cbi-section-node">
+		<div class="table" id="ddns_status_table">
+			<div class="tr table-titles" id="ddns_status_legend">
+				<div class="th"><%:Configuration%></div>
+				<div class="th"><%:Next Update%></div>
+				<div class="th"><%:Lookup Hostname%></div>
+				<div class="th"><%:Registered IP%></div>
+				<div class="th"><%:Network%></div>
+			</div>
+			<div class="tr">
+				<div class="td"><em><br /><%:Collecting data...%></em></div>
+			</div>
+		</div>
+	</div>
+</fieldset>
+<!-- ++ END ++ Dynamic DNS ++ system_status.htm ++ -->
diff -uprN c/feeds/luci/applications/luci-app-ddns/Makefile d/feeds/luci/applications/luci-app-ddns/Makefile
--- c/feeds/luci/applications/luci-app-ddns/Makefile	2024-01-06 20:23:53.585014376 +0800
+++ d/feeds/luci/applications/luci-app-ddns/Makefile	2024-01-06 20:24:00.692755273 +0800
@@ -8,12 +8,30 @@
 
 include $(TOPDIR)/rules.mk
 
+# PKG_NAME:=luci-app-ddns
+
+# Version == major.minor.patch
+# increase on new functionality (minor) or patches (patch)
+PKG_VERSION:=2.4.9
+
+# Release == build
+# increase on changes of translation files
+PKG_RELEASE:=7
+
 PKG_LICENSE:=Apache-2.0
 PKG_MAINTAINER:=Ansuel Smith <ansuelsmth@gmail.com>
 
+# LuCI specific settings
 LUCI_TITLE:=LuCI Support for Dynamic DNS Client (ddns-scripts)
-LUCI_DEPENDS:=+luci-lib-ipkg +luci-mod-admin-full +ddns-scripts
-LUCI_PKGARCH:=all
+LUCI_DEPENDS:=+luci-compat +luci-lib-ipkg +luci-mod-admin-full +ddns-scripts
+# LUCI_PKGARCH:=all
+
+define Package/$(PKG_NAME)/config
+# shown in make menuconfig <Help>
+help
+	$(LUCI_TITLE)
+	Version: $(PKG_VERSION)-$(PKG_RELEASE)
+endef
 
 include ../../luci.mk
 
diff -uprN c/feeds/luci/applications/luci-app-ddns/po/zh_Hans/ddns.po d/feeds/luci/applications/luci-app-ddns/po/zh_Hans/ddns.po
--- c/feeds/luci/applications/luci-app-ddns/po/zh_Hans/ddns.po	2024-01-06 20:23:53.561015251 +0800
+++ d/feeds/luci/applications/luci-app-ddns/po/zh_Hans/ddns.po	2024-01-06 20:24:00.684755564 +0800
@@ -5,8 +5,8 @@ msgid ""
 msgstr ""
 "Project-Id-Version: luci-app-ddns 2.4.0-1\n"
 "POT-Creation-Date: 2016-01-30 11:07+0100\n"
-"PO-Revision-Date: 2023-03-11 13:38+0000\n"
-"Last-Translator: Eric <hamburger2048@users.noreply.hosted.weblate.org>\n"
+"PO-Revision-Date: 2021-06-29 18:07+0000\n"
+"Last-Translator: xiazhang <xz@xia.plus>\n"
 "Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
 "openwrt/luciapplicationsddns/zh_Hans/>\n"
 "Language: zh_Hans\n"
@@ -14,44 +14,68 @@ msgstr ""
 "Content-Type: text/plain; charset=UTF-8\n"
 "Content-Transfer-Encoding: 8bit\n"
 "Plural-Forms: nplurals=1; plural=0;\n"
-"X-Generator: Weblate 4.16.2-dev\n"
+"X-Generator: Weblate 4.7.1-dev\n"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:430
-msgid "\"../\" not allowed in path for Security Reason."
-msgstr "基于安全原因路径中不允许含有 \"../\" 。"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:462
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:531
-msgid "Add new services..."
-msgstr "添加新服务..."
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:145
+msgid "&"
+msgstr "&"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:562
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:591
+msgid "-- custom --"
+msgstr "-- 自定义 --"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1108
+msgid "-- default --"
+msgstr "-- 默认 --"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:605
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:53
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:264
 msgid "Advanced Settings"
 msgstr "高级设置"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:399
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:46
 msgid "Allow non-public IP's"
 msgstr "允许非公网 IP"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:604
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:176
+msgid "Applying changes"
+msgstr "正在应用更改"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:45
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:50
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:263
 msgid "Basic Settings"
 msgstr "基本设置"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:884
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:25
+msgid ""
+"Below a list of configuration tips for your system to run Dynamic DNS "
+"updates without limitations"
+msgstr "以下是一个能够让您的系统不受限制地进行动态 DNS 更新设置的提示列表"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:95
+msgid ""
+"Below is a list of configured DDNS configurations and their current state."
+msgstr "以下是当前已经配置好的 DDNS 设置项列表以及它们的当前状态。"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1104
 msgid "Bind Network"
 msgstr "使用的接口"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:330
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1114
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1124
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:82
 msgid "Binding to a specific network not supported"
 msgstr "不支持绑定到一个指定的网络"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:357
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:113
 msgid ""
 "BusyBox's nslookup and Wget do not support to specify the IP version to use "
 "for communication with DDNS Provider!"
 msgstr "BusyBox 的 nslookup 和 wget 不支持指定 IP 协议版本与 DDNS 供应商通讯！"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:368
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:133
 msgid ""
 "BusyBox's nslookup and hostip do not support to specify to use TCP instead "
 "of default UDP when requesting DNS server!"
@@ -59,393 +83,440 @@ msgstr ""
 "向 DNS 服务器查询时，BusyBox 的 nslookup 和 hostip 不支持使用 TCP ，而是使用"
 "默认的 UDP！"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:379
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:146
 msgid ""
 "BusyBox's nslookup in the current compiled version does not handle given DNS "
 "Servers correctly!"
 msgstr "当前编译版本中的 BusyBox 的 nslookup 不能正确处理给定的 DNS 服务器！"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:450
-msgid "Ca Certs path"
-msgstr "Ca 证书路径"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:451
-msgid ""
-"Ca Certs path that will be used to download services data. Set IGNORE to "
-"skip certificate validation."
-msgstr "用于下载服务数据的 Ca 证书路径。设置 IGNORE 将跳过证书验证。"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1118
+msgid "Casual users should not change this setting"
+msgstr "普通用户不应该改变这个设置"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:407
+msgid "Change provider"
+msgstr "更改提供者"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:537
-msgid "Cancel"
-msgstr "取消"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:962
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1302
 msgid "Check Interval"
 msgstr "检查间隔"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:977
-msgid "Check Unit"
-msgstr "检查时间单位"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:522
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:656
-msgid "Checking the service support..."
-msgstr "正在检查服务支持..."
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:55
+msgid "Collecting data..."
+msgstr "正在收集数据…"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js:27
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:102
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:48
 msgid "Configuration"
 msgstr "配置"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:212
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1124
-msgid "Configuration Error"
-msgstr "配置错误"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:27
+msgid ""
+"Configure here the details for all Dynamic DNS services including this LuCI "
+"application."
+msgstr "在这里修改动态 DNS 服务的详细配置。"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:261
+msgid "Configure here the details for selected Dynamic DNS service."
+msgstr "在这里修改选择的 DDNS 服务的详细配置。"
+
+#: applications/luci-app-ddns/luasrc/view/ddns/global_value.htm:16
+#: applications/luci-app-ddns/luasrc/view/ddns/global_value.htm:29
+msgid "Current setting"
+msgstr "当前设置"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:541
-msgid "Create service"
-msgstr "创建服务"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:412
-msgid "Current setting:"
-msgstr "当前配置："
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:196
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:274
-msgid "Currently DDNS updates are not started at boot or on interface events."
-msgstr "当前的 DDNS 不会在系统启动时或者网口事件时运行。"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:46
+msgid ""
+"Currently DDNS updates are not started at boot or on interface events.<br /"
+">This is the default if you run DDNS scripts by yourself (i.e. via cron with "
+"force_interval set to '0')"
+msgstr ""
+"现在，DDNS 更新在开机或者接口动作时不会被触发。<br />如果您手工运行 DDNS 脚本"
+"的话（例如使用 cron 时把 force_interval 设置为 0），这是默认设置。"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:76
+msgid ""
+"Currently DDNS updates are not started at boot or on interface events.<br /"
+">You can start/stop each configuration here. It will run until next reboot."
+msgstr ""
+"现在，DDNS 更新在开机或者接口动作时不会被触发。<br />您可以在这里开始/停止每"
+"一个设置的条目。它在下次重启之前一直有效。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:719
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:452
 msgid "Custom update script to be used for updating your DDNS Provider."
 msgstr "用来更新 DDNS 的自定义脚本。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:699
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:412
 msgid "Custom update-URL"
 msgstr "自定义更新 URL"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:718
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:451
 msgid "Custom update-script"
 msgstr "自定义更新脚本"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:194
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:277
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:45
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:75
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:19
 msgid "DDNS Autostart disabled"
 msgstr "DDNS 已禁止自动运行"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:193
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:277
-msgid "DDNS Autostart enabled"
-msgstr "DDNS 已开启自动运行"
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:74
+msgid "DDNS Client Configuration"
+msgstr "DDNS 客户端配置"
+
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:70
+msgid "DDNS Client Documentation"
+msgstr "DDNS 客户端文档"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:516
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:638
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:328
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:365
 msgid "DDNS Service provider"
 msgstr "DDNS 服务提供商"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:282
-msgid "DDns"
-msgstr "动态DNS"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:582
-msgid "DDns Service"
-msgstr "动态DNS 服务项"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:367
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1211
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1222
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:132
 msgid "DNS requests via TCP not supported"
 msgstr "不支持使用 TCP 进行 DNS 解析"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:905
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1165
 msgid "DNS-Server"
 msgstr "DNS-服务器"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:408
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:56
 msgid "Date format"
 msgstr "日期格式"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:834
-msgid "Defines the Web page to read systems IP-Address from."
-msgstr "定义读取系统IP地址的网页。"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:846
+msgid "Defines the Web page to read systems IPv4-Address from"
+msgstr "设定用来读取系统 IPv4 地址的网页"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:894
+msgid "Defines the Web page to read systems IPv6-Address from"
+msgstr "设定用来读取系统 IPv6 地址的网页"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:844
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:942
 msgid "Defines the interface to read systems IP-Address from"
 msgstr "设定用来读取系统 IP 地址的接口"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:826
-msgid "Defines the network to read systems IP-Address from"
-msgstr "设定用来读取系统 IP 地址的网络"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:788
-msgid ""
-"Defines the source to read systems IP-Address from, that will be send to the "
-"DDNS provider"
-msgstr "设定从哪里读取系统 IP 地址，这个地址会发送到 DDNS 提供商"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:766
+msgid "Defines the network to read systems IPv4-Address from"
+msgstr "设定用来读取系统 IPv4 地址的网络"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:508
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:628
-msgid "Defines which IP address 'IPv4/IPv6' is send to the DDNS provider"
-msgstr "设定哪一个 IP 地址（IPv4 或 IPv6）会被发送给 DDNS 提供商"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:807
+msgid "Defines the network to read systems IPv6-Address from"
+msgstr "设定用来读取系统 IPv6 地址的网络"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:424
-msgid "Directory contains Log files for each running section."
-msgstr "用于存在每一个项目运行日志的的目录。"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:661
+msgid ""
+"Defines the source to read systems IPv4-Address from, that will be send to "
+"the DDNS provider"
+msgstr "设定 IPv4 地址的来源。这将会被发送给 DDNS 提供商"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:418
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:711
 msgid ""
-"Directory contains PID and other status information for each running section."
-msgstr "包含了每一个项目运行的PID和其他状态信息的目录。"
+"Defines the source to read systems IPv6-Address from, that will be send to "
+"the DDNS provider"
+msgstr "设定 IPv6 地址的来源。这将会被发送给 DDNS 提供商"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:17
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:302
+msgid "Defines which IP address 'IPv4/IPv6' is send to the DDNS provider"
+msgstr "设定哪一个 IP 地址（IPv4 或 IPv6）会被发送给 DDNS 提供商"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:260
+msgid "Details for"
+msgstr "详情"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:86
+msgid "Directory contains Log files for each running section"
+msgstr "保存每一个运行中的设置的运行日志的目录"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:76
+msgid ""
+"Directory contains PID and other status information for each running section"
+msgstr "保存每个运行中的设置的PID以及其它状态信息的目录"
+
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:193
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:217
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:68
 msgid "Disabled"
 msgstr "已禁用"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:735
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:479
 msgid "Domain"
 msgstr "域名"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:258
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js:7
-#: applications/luci-app-ddns/root/usr/share/luci/menu.d/luci-app-ddns.json:3
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:52
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:44
 msgid "Dynamic DNS"
 msgstr "动态 DNS"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:265
-msgid "Dynamic DNS Version"
-msgstr "动态 DNS 版本"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:550
-msgid "Edit"
-msgstr "编辑"
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:65
+msgid ""
+"Dynamic DNS allows that your router can be reached with a fixed hostname "
+"while having a dynamically changing IP address."
+msgstr "动态 DNS 允许为拥有动态 IP 的主机配置一个固定的可访问域名。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:768
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:609
 msgid "Enable secure communication with DDNS provider"
 msgstr "启用安全连接与 DDNS 提供商联系"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:610
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1132
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:271
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:153
 msgid "Enabled"
 msgstr "已启用"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:947
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1286
 msgid "Error"
 msgstr "错误"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1022
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1425
 msgid "Error Retry Counter"
 msgstr "错误重试计数"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1032
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1443
 msgid "Error Retry Interval"
 msgstr "错误重试间隔"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:858
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:867
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1019
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1058
 msgid "Event Network"
 msgstr "事件网络"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:836
-msgid "Example for IPv4"
-msgstr "IPv4 的例子"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:838
-msgid "Example for IPv6"
-msgstr "IPv6 的例子"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:956
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1295
 msgid "File"
 msgstr "文件"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:702
-msgid "Follow instructions you will find on their WEB page."
-msgstr "按照网页上的说明操作。"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:469
+msgid "File not found"
+msgstr "文件未找到"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1501
+#: applications/luci-app-ddns/luasrc/view/ddns/detail_logview.htm:12
+msgid "File not found or empty"
+msgstr "文件未找到或为空"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:410
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:87
+msgid ""
+"Follow this link<br />You will find more hints to optimize your system to "
+"run DDNS scripts with all options"
+msgstr ""
+"打开这个链接<br />您将会得到更多关于如何通过所有设置项优化您的系统以运行 "
+"DDNS 脚本的提示"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:32
+msgid "For detailed information about parameter settings look here."
+msgstr "请看这里获得关于参数设置的详细信息。"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:58
 msgid "For supported codes look here"
 msgstr "查看这里获取支持的编码"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:896
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1139
 msgid "Force IP Version"
 msgstr "强制设定 IP 版本"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:356
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1145
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1154
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:112
 msgid "Force IP Version not supported"
 msgstr "不支持强制设定 IP 版本"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:986
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1357
 msgid "Force Interval"
 msgstr "强制更新的周期"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:917
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1205
 msgid "Force TCP on DNS"
 msgstr "强制使用 TCP 进行 DNS 查询"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1012
-msgid "Force Unit"
-msgstr "强制更新单位"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1189
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1264
+msgid "Forced IP Version don't matched"
+msgstr "强制设定的 IP 版本不匹配"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:929
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1243
 msgid "Format"
 msgstr "格式"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:908
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1167
 msgid "Format: IP or FQDN"
 msgstr "格式：IP 或者 FQDN"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:335
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:87
 msgid ""
 "GNU Wget will use the IP of given network, cURL will use the physical "
 "interface."
 msgstr "GNU Wget 将会使用给定的网络的 IP 地址，而 cURL 将会使用物理接口。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:263
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:26
 msgid "Global Settings"
 msgstr "全局设置"
 
-#: applications/luci-app-ddns/root/usr/share/rpcd/acl.d/luci-app-ddns.json:3
-msgid "Grant access to ddns procedures"
-msgstr "授予访问 DDNS 程序的权限"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:318
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:606
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:615
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:68
 msgid "HTTPS not supported"
 msgstr "不支持 HTTPS"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:620
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:24
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:55
+msgid "Hints"
+msgstr "提示"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:279
 msgid "Hostname/FQDN to validate, if IP update happen or necessary"
 msgstr "主机名/FQDN 验证，如果 IP 更新发生或必要"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:787
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:660
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:710
 msgid "IP address source"
 msgstr "IP 地址来源"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:507
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:627
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:301
 msgid "IP address version"
 msgstr "IP 地址版本"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:510
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:632
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:305
 msgid "IPv4-Address"
 msgstr "IPv4 地址"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:931
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1244
 msgid "IPv6 address must be given in square brackets"
 msgstr "IPv6 地址必须填写在中括号(\"[ ]\")内"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:309
-msgid "IPv6 is currently not (fully) supported by this system"
-msgstr "该系统当前不（完全）支持IPv6"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:57
+msgid ""
+"IPv6 is currently not (fully) supported by this system<br />Please follow "
+"the instructions on OpenWrt's homepage to enable IPv6 support<br />or update "
+"your system to the latest OpenWrt Release"
+msgstr ""
+"当前系统暂时不能（完整地）支持 IPv6<br />请查看 OpenWrt 首页的介绍以启用 "
+"IPv6 支持<br />或者更新您的系统到最新 OpenWrt 版本"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:308
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:28
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:32
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:38
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:56
 msgid "IPv6 not supported"
 msgstr "IPv6 不被支持"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:512
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:634
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:309
 msgid "IPv6-Address"
 msgstr "IPv6 地址"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:443
-msgid ""
-"If Wget and cURL package are installed, Wget is used for communication by "
-"default."
-msgstr "如果 Wget 和 cURL 包都安装了，默认会用 Wget 来通信。"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:114
+msgid "If both cURL and GNU Wget are installed, Wget is used by default."
+msgstr "如果 cURL 和 GNU Wget 同时被安装，那么 Wget 将会被优先使用。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:611
-msgid "If this service section is disabled it could not be started."
-msgstr "如果禁用此服务项，则不会启动。"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:272
+msgid ""
+"If this service section is disabled it could not be started.<br />Neither "
+"from LuCI interface nor from console"
+msgstr ""
+"如果服务配置被禁用，那么它将不能被启动。<br />无论是通过 LuCI 页面还是通过终"
+"端。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:391
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:160
 msgid "If using secure communication you should verify server certificates!"
 msgstr "如果使用安全通信，您应该验证服务器证书！"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:323
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:337
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:349
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:97
+msgid ""
+"If you want to send updates for IPv4 and IPv6 you need to define two "
+"separate Configurations i.e. 'myddns_ipv4' and 'myddns_ipv6'"
+msgstr ""
+"如果您需要同时更新 IPv4 和 IPv6 地址，您需要单独添加两个配置项（例"
+"如'myddns_ipv4'和'myddns_ipv6'）"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:73
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:89
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:103
 msgid ""
 "In some versions cURL/libcurl in OpenWrt is compiled without proxy support."
 msgstr "OpenWrt 中某些 cURL/libcurl 版本编译时没有启用代理服务器支持。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:944
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1283
 msgid "Info"
 msgstr "信息"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:262
-msgid "Information"
-msgstr "信息"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:711
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:728
-msgid "Insert a Update Script OR a Update URL"
-msgstr "插入更新脚本或更新 URL"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:393
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:162
 msgid ""
 "Install 'ca-certificates' package or needed certificates by hand into /etc/"
 "ssl/certs default directory"
 msgstr ""
 "手动将“ca-certificates”包或需要的证书安装到 /etc/ssl/certs 的默认目录中"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:669
-msgid "Install Service"
-msgstr "安装服务"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:793
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:843
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:666
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:716
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:941
 msgid "Interface"
 msgstr "接口"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:987
-msgid "Interval to force updates send to DDNS Provider"
-msgstr "强制更新到 DDNS 提供商的间隔"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:978
-msgid "Interval unit to check for changed IP"
-msgstr "检查 IP 变更间隔的单位"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1013
-msgid "Interval unit to force updates send to DDNS Provider"
-msgstr "强制更新到 DDNS 提供商的间隔的单位"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1334
+msgid ""
+"Interval to check for changed IP<br />Values below 5 minutes == 300 seconds "
+"are not supported"
+msgstr "检查 IP 是否改变的时间隔<br />不支持小于 5 分钟（300 秒）的数值。"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1400
+msgid ""
+"Interval to force updates send to DDNS Provider<br />Setting this parameter "
+"to 0 will force the script to only run once<br />Values lower 'Check "
+"Interval' except '0' are not supported"
+msgstr ""
+"强制向提供商更新 DDNS 的时间周期<br />将这个参数设置为 0 则会让脚本仅执行一次"
+"<br />不支持小于\"检查时间周期\"的数值（除了 0）。"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:29
+msgid "It is NOT recommended for casual users to change settings on this page."
+msgstr "强烈不建议初次使用的用户修改本页设定。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1137
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:159
 msgid "Last Update"
 msgstr "上次更新"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:607
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:177
+msgid "Loading"
+msgstr "加载中"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:266
 msgid "Log File Viewer"
 msgstr "日志查看器"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:423
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:85
 msgid "Log directory"
 msgstr "日志目录"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:435
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:95
 msgid "Log length"
 msgstr "日志长度"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:950
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1293
 msgid "Log to file"
 msgstr "把日志记录到文件"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:938
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1279
 msgid "Log to syslog"
 msgstr "记录日志到 syslog"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:619
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1120
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js:29
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:278
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:113
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:50
 msgid "Lookup Hostname"
 msgstr "查询主机名"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:495
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1114
-msgid "Name"
-msgstr "名称"
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:101
+msgid "NOT installed"
+msgstr "未安装"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:331
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:83
 msgid ""
 "Neither GNU Wget with SSL nor cURL installed to select a network to use for "
 "communication."
 msgstr "包含 SSL 支持的 GNU Wget 或者 cURL 均未安装，无法选择网络用于通信。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:319
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:69
 msgid ""
 "Neither GNU Wget with SSL nor cURL installed to support secure updates via "
 "HTTPS protocol."
@@ -453,366 +524,316 @@ msgstr ""
 "包含 SSL 支持的 GNU Wget 或者 cURL 均未安装，无法通过 HTTPS 协议进行安全的更"
 "新。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:613
-msgid "Neither from LuCI interface nor from console."
-msgstr "无论是从 LuCI 界面还是从控制台。"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:791
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:825
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js:31
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:664
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:714
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:765
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:802
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:52
 msgid "Network"
 msgstr "网络"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:859
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:868
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:887
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1020
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1066
 msgid "Network on which the ddns-updater scripts will be started"
 msgstr "DDNS 更新脚本将会运行于该网络"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:214
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1141
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:45
 msgid "Never"
 msgstr "永不"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:498
-msgid "New DDns Service…"
-msgstr "新建 DDNS 服务项…"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1137
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js:28
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:159
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:49
 msgid "Next Update"
 msgstr "下次更新"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:213
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1125
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js:40
-msgid "No Data"
-msgstr "无数据"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:390
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:159
 msgid "No certificates found"
 msgstr "找不到证书"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:943
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:87
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:30
+msgid "No data"
+msgstr "无数据"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1282
 msgid "No logging"
 msgstr "无日志"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:400
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:47
 msgid "Non-public and by default blocked IP's"
 msgstr "非公网 IP 以及默认被屏蔽的 IP"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:216
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1106
-msgid "Not Running"
-msgstr "未运行"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:945
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1284
 msgid "Notice"
 msgstr "注意"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:436
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:96
 msgid "Number of last lines stored in log files"
 msgstr "日志文件中的最后几行"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:897
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1148
 msgid "OPTIONAL: Force the usage of pure IPv4/IPv6 only communication."
 msgstr "可选：强制仅使用 IPv4/IPv6 通信。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:918
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1214
 msgid "OPTIONAL: Force the use of TCP instead of default UDP on DNS requests."
 msgstr "可选：强制使用 TCP 而非 UDP 请求 DNS。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:885
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1117
 msgid "OPTIONAL: Network to use for communication"
 msgstr "可选：用于通信的网络"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:927
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1242
 msgid "OPTIONAL: Proxy-Server for detection and updates."
 msgstr "可选：用于检测以及更新的代理服务器。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:906
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1166
 msgid "OPTIONAL: Use non-default DNS-Server to detect 'Registered IP'."
 msgstr "可选：使用非默认 DNS 服务器检测\"已注册的 IP 地址\"。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1043
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1470
 msgid "On Error the script will retry the failed action after given time"
 msgstr "当出错时，脚本将会重试失败操作的次数"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1023
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1033
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1426
 msgid "On Error the script will stop execution after given number of retrys"
 msgstr "当出错时，脚本将会重试该次数之后退出"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:754
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:68
+msgid "OpenWrt Wiki"
+msgstr "OpenWrt Wiki"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:514
 msgid "Optional Encoded Parameter"
 msgstr "可选编码参数"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:760
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:525
 msgid "Optional Parameter"
 msgstr "可选参数"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:755
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:515
 msgid "Optional: Replaces [PARAMENC] in Update-URL (URL-encoded)"
 msgstr "可选：替换更新 URL（已编码 URL）中的 [PARAMENC]"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:761
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:526
 msgid "Optional: Replaces [PARAMOPT] in Update-URL (NOT URL-encoded)"
 msgstr "可选：替换更新 URL（未编码 URL）中的 [PARAMENC]"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:926
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:94
+msgid "Overview"
+msgstr "概览"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1233
 msgid "PROXY-Server"
 msgstr "代理服务器"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:747
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1239
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1269
+msgid "PROXY-Server not supported"
+msgstr "不支持代理服务器"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:502
 msgid "Password"
 msgstr "密码"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:773
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:630
 msgid "Path to CA-Certificate"
 msgstr "CA 证书路径"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:310
-msgid ""
-"Please follow the instructions on OpenWrt's homepage to enable IPv6 support"
-msgstr "请按照OpenWrt主页上的说明启用IPv6支持"
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:144
+msgid "Please [Save & Apply] your changes first"
+msgstr "请先保存并应用您的设置"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1071
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1499
 msgid "Please press [Read] button"
 msgstr "请按下 [读取] 按钮"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1054
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:36
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:66
+msgid "Please update to the current version!"
+msgstr "请更新到最新版本!"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:229
+msgid "Process ID"
+msgstr "进程 ID"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1494
 msgid "Read / Reread log file"
 msgstr "读取/重新读取 日志文件"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:684
-msgid "Really switch service?"
-msgstr "确认切换服务?"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:406
+msgid "Really change DDNS provider?"
+msgstr "确定更改 DDNS 提供商吗？"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1120
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js:30
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:113
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:51
 msgid "Registered IP"
 msgstr "已注册的 IP 地址"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:572
-msgid "Reload"
-msgstr "重新加载"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:555
-msgid "Reload this service"
-msgstr "重启这个服务项"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:736
-msgid "Replaces [DOMAIN] in Update-URL (URL-encoded)"
-msgstr "替换 Update-URL 中的 [DOMAIN] (URL-encoded)"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:480
+msgid "Replaces [DOMAIN] in Update-URL"
+msgstr "替换更新 URL 中的 [DOMAIN]"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:748
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:503
 msgid "Replaces [PASSWORD] in Update-URL (URL-encoded)"
 msgstr "替换更新 URL（已编码 URL）中的 [PASSWORD]"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:742
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:492
 msgid "Replaces [USERNAME] in Update-URL (URL-encoded)"
 msgstr "替换更新 URL（已编码 URL）中的 [USERNAME]"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:288
-msgid "Restart DDns"
-msgstr "重启 DDNS"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1042
-msgid "Retry Unit"
-msgstr "重试时间单位"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:16
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:188
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:213
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:64
 msgid "Run once"
 msgstr "运行一次"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:227
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1109
-msgid "Running"
-msgstr "运行中"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:794
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:851
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:667
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:717
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:981
 msgid "Script"
 msgstr "脚本"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:521
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:655
-msgid "Select a service"
-msgstr "选择服务"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:523
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:658
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:678
-msgid "Service doesn't support this ip type"
-msgstr "服务不支持此 ip 类型"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:657
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:668
-msgid "Service not installed"
-msgstr "服务未安装"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:459
-msgid "Services"
-msgstr "服务"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:454
-msgid "Services URL Download"
-msgstr "服务下载网址"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:292
-msgid "Services list last update"
-msgstr "更新最新服务列表"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:989
-msgid "Setting this parameter to 0 will force the script to only run once"
-msgstr "将此参数设置为 0 将强制脚本仅运行一次"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:188
-msgid "Start DDNS"
-msgstr "运行 DDNS"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:270
-msgid "State"
-msgstr "状态"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1103
-msgid "Status"
-msgstr "状态"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:86
+msgid "Show more"
+msgstr "查看更多"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:33
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:63
+msgid "Software update required"
+msgstr "需要进行软件更新"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1174
+msgid "Specifying a DNS-Server is not supported"
+msgstr "不支持指定 DNS 服务器"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:238
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:34
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:115
+msgid "Start"
+msgstr "启动"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:229
+msgid "Start / Stop"
+msgstr "启动 / 停止"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:417
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:75
 msgid "Status directory"
 msgstr "状态目录"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:571
-msgid "Stop"
-msgstr "停止"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:188
-msgid "Stop DDNS"
-msgstr "停止 DDNS"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:560
-msgid "Stop this service"
-msgstr "停止这个服务"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:18
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:198
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:221
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:66
 msgid "Stopped"
 msgstr "已停止"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:685
-msgid "Switch service"
-msgstr "切换服务"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:34
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:64
+msgid ""
+"The currently installed 'ddns-scripts' package did not support all available "
+"settings."
+msgstr "当前已安装的“ddns-scripts”软件包不支持所有可用设置项。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1025
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1035
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1428
 msgid "The default setting of '0' will retry infinite."
 msgstr "默认设置“0”将无限重试。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:501
-msgid "The service name is already used"
-msgstr "这个服务项名称已经被使用"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js:43
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:36
 msgid "There is no service configured."
 msgstr "没有已经配置好的服务项。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1070
-msgid "This is the current content of the log file in"
-msgstr "这是日志文件中的当前内容"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:197
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:275
-msgid ""
-"This is the default if you run DDNS scripts by yourself (i.e. via cron with "
-"force_interval set to '0')"
-msgstr ""
-"如果您自己运行 DDNS 脚本（即通过 cron force_interval设置为\"0\"），则这是默认"
-"值"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:874
-msgid "This will be autoset to the selected interface"
-msgstr "这将自动设置为选定的网口"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:606
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:56
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:265
 msgid "Timer Settings"
 msgstr "计时器设定"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:792
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:101
+msgid "To change global settings click here"
+msgstr "点击这里更改全局设置"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:116
+msgid "To use cURL activate this option."
+msgstr "选中此项以使用 cURL"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:665
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:715
 msgid "URL"
 msgstr "URL"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:833
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:845
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:890
 msgid "URL to detect"
 msgstr "用于检测的 URL"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:215
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1141
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js:38
-msgid "Unknown"
-msgstr "未知"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:299
-msgid "Update DDns Services List"
-msgstr "更新 DDns 服务列表"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:700
-msgid "Update URL to be used for updating your DDNS Provider."
-msgstr "用于更新到DDNS提供商的更新URL。"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:455
-msgid ""
-"Url used to download services file. By default is the master openwrt ddns "
-"package repo."
-msgstr "用于下载服务文件的 Url 。默认情况下是主 openwrt ddns 包仓库。"
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:42
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:55
+msgid "Unknown error"
+msgstr "未知错误"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:767
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:413
+msgid ""
+"Update URL to be used for updating your DDNS Provider.<br />Follow "
+"instructions you will find on their WEB page."
+msgstr ""
+"DDNS 提供商用于更新 DDNS 的 URL。<br />跟随教程，您可以在它们的网站上找到这"
+"个 URL。"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:600
 msgid "Use HTTP Secure"
 msgstr "使用 HTTPS"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:442
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:113
 msgid "Use cURL"
 msgstr "使用 cURL"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:852
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:982
 msgid "User defined script to read systems IP-Address"
 msgstr "使用设定的脚本来读取系统 IP 地址"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:741
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:491
 msgid "Username"
 msgstr "用户名"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:378
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:145
 msgid "Using specific DNS Server not supported"
 msgstr "不支持使用特定的 DNS 服务器"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:971
-msgid "Values below 5 minutes == 300 seconds are not supported"
-msgstr "不支持小于5分钟== 300秒的值"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1006
-msgid "Values lower 'Check Interval' except '0' are not supported"
-msgstr "不支持除低于“检查间隔”的值，除了“ 0”"
-
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:15
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:183
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:209
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:58
 msgid "Verify"
 msgstr "验证"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:946
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:95
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:97
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:100
+msgid "Version"
+msgstr "版本"
+
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:93
+msgid "Version Information"
+msgstr "版本信息"
+
+#: applications/luci-app-ddns/luasrc/view/ddns/overview_status.htm:178
+msgid "Waiting for changes to be applied..."
+msgstr "正在应用更改…"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1285
 msgid "Warning"
 msgstr "警告"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:955
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1294
 msgid ""
 "Writes detailed messages to log file. File will be truncated automatically."
 msgstr "向日志中写入详细信息。文件将自动缩小。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:939
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1280
 msgid ""
 "Writes log messages to syslog. Critical Errors will always be written to "
 "syslog."
 msgstr "把日志写入系统日志。无论是否启用这项，错误信息总是会被写入系统日志。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:382
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:149
 msgid ""
 "You should install 'bind-host' or 'knot-host' or 'drill' or 'hostip' "
 "package, if you need to specify a DNS server to detect your registered IP."
@@ -820,76 +841,216 @@ msgstr ""
 "如果您需要指定 DNS 服务器来检测您注册的 IP，您应该安装“bind-host”或“knot-"
 "host”或“drill”或“hostip”软件包。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:371
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:121
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:136
 msgid ""
 "You should install 'bind-host' or 'knot-host' or 'drill' package for DNS "
 "requests."
 msgstr "您应该为 DNS 请求安装“bind-host”或“knot-host”或“drill”软件包。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:359
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:117
 msgid "You should install 'wget' or 'curl' or 'uclient-fetch' package."
 msgstr "您应该安装“wget”或“curl”或“uclient-fetch”软件包。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:321
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:71
 msgid ""
 "You should install 'wget' or 'curl' or 'uclient-fetch' with 'libustream-"
 "*ssl' package."
 msgstr "您应该安装“wget”或“curl”或“uclient-fetch”，及“libustream-*ssl”软件包。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:333
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:85
 msgid "You should install 'wget' or 'curl' package."
 msgstr "您应该安装“wget”或“curl”软件包。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:347
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:101
 msgid ""
 "You should install 'wget' or 'uclient-fetch' package or replace libcurl."
 msgstr "您应该安装“wget”或“uclient-fetch”软件包，或替换 libcurl。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:345
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:99
 msgid "cURL is installed, but libcurl was compiled without proxy support."
 msgstr "cURL 已经安装，但是 libcurl 编译时没有启用代理支持。"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:344
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/hints.lua:98
 msgid "cURL without Proxy Support"
 msgstr "cURL 没有包含代理支持"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:517
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:640
-msgid "custom"
-msgstr "自定义"
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:676
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:731
+msgid "can not detect local IP. Please select a different Source combination"
+msgstr "无法确定本地 IP。请更换 IP 来源。"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:440
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:868
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:919
+msgid "can not resolve host:"
+msgstr "无法解析主机："
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:120
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:29
+msgid "config error"
+msgstr "配置错误"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1019
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1409
 msgid "days"
 msgstr "天"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:774
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:631
 msgid "directory or path/file"
 msgstr "目录或者到文件的路径"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:983
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1018
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:429
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:467
+msgid "either url or script could be set"
+msgstr "接受 URL 或者脚本"
+
+#: applications/luci-app-ddns/luasrc/view/ddns/system_status.htm:20
+msgid "enable here"
+msgstr "在这里启用"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:650
+msgid "file or directory not found or not 'IGNORE'"
+msgstr "文件或目录未找到或未\"被忽视\""
+
+#: applications/luci-app-ddns/luasrc/view/ddns/global_value.htm:28
+msgid "help"
+msgstr "帮助"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1340
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1408
 msgid "hours"
 msgstr "小时"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:982
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1017
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1048
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:99
+msgid "installed"
+msgstr "已安装"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:286
+msgid "invalid FQDN / required - Sample"
+msgstr "FQDN 无效 / 必需 - 示例"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1364
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1432
+msgid "minimum value '0'"
+msgstr "最小值 0"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1449
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/global.lua:101
+msgid "minimum value '1'"
+msgstr "最小值 1"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1308
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1315
+msgid "minimum value 5 minutes == 300 seconds"
+msgstr "最小值为 5 分钟（300 秒）"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1339
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1407
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1475
 msgid "minutes"
 msgstr "分钟"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:776
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:208
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:424
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:436
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:438
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:462
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:859
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:866
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:910
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:917
+msgid "missing / required"
+msgstr "必须填写"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1382
+msgid "must be greater or equal 'Check Interval'"
+msgstr "必须大于或等于\"检查时间周期\""
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:434
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:864
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:915
+msgid "must start with 'http://'"
+msgstr "必须以'http://'开头"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1188
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1263
+msgid "nc (netcat) can not connect"
+msgstr "nc（netcat）不可连接"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:171
+msgid "never"
+msgstr "从不"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:147
+msgid "no data"
+msgstr "无数据"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:996
+msgid "not found or not executable - Sample: '/path/to/script.sh'"
+msgstr "未找到或者不可执行 - 示例：“/path/to/script.sh”"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1187
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1262
+msgid "nslookup can not resolve host"
+msgstr "nslookup 不能解析主机"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:632
 msgid "or"
 msgstr "或者"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:311
-msgid "or update your system to the latest OpenWrt Release"
-msgstr "或将系统更新到最新的 OpenWrt 版本"
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:98
+msgid "or higher"
+msgstr "或者更大"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:607
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1146
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1212
+msgid "please disable"
+msgstr "请禁用"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1240
+msgid "please remove entry"
+msgstr "请移除该字段"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:29
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:34
+msgid "please select 'IPv4' address version"
+msgstr "请设定 IPv4 地址"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:40
+msgid "please select 'IPv4' address version in"
+msgstr "请设定 IPv4 地址于"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1115
+msgid "please set to 'default'"
+msgstr "请设置为\"默认\""
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1265
+msgid "proxy port missing"
+msgstr "代理端口未填"
+
+#: applications/luci-app-ddns/luasrc/controller/ddns.lua:96
+msgid "required"
+msgstr "必须填写"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:981
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:1047
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1338
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1474
 msgid "seconds"
 msgstr "秒"
 
-#: applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js:778
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:633
 msgid "to run HTTPS without verification of server certificates (insecure)"
 msgstr "使用 HTTPS 但不检查服务器证书（不安全）"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/overview.lua:185
+msgid "unknown error"
+msgstr "未知错误"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1190
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1266
+msgid "unspecific error"
+msgstr "未指定的错误"
+
+#: applications/luci-app-ddns/luasrc/model/cbi/ddns/detail.lua:1176
+msgid "use hostname, FQDN, IPv4- or IPv6-Address"
+msgstr "使用主机名或 IPv4/IPv6 地址"
diff -uprN c/feeds/luci/applications/luci-app-ddns/root/etc/uci-defaults/40_luci-ddns d/feeds/luci/applications/luci-app-ddns/root/etc/uci-defaults/40_luci-ddns
--- c/feeds/luci/applications/luci-app-ddns/root/etc/uci-defaults/40_luci-ddns	2024-01-06 20:23:53.585014376 +0800
+++ d/feeds/luci/applications/luci-app-ddns/root/etc/uci-defaults/40_luci-ddns	2024-01-06 20:24:00.692755273 +0800
@@ -6,4 +6,5 @@ uci -q batch <<-EOF >/dev/null
 	commit ucitrack
 EOF
 
+rm -f /tmp/luci-indexcache
 return 0
diff -uprN c/feeds/luci/applications/luci-app-ddns/root/usr/libexec/rpcd/luci.ddns d/feeds/luci/applications/luci-app-ddns/root/usr/libexec/rpcd/luci.ddns
--- c/feeds/luci/applications/luci-app-ddns/root/usr/libexec/rpcd/luci.ddns	2024-01-06 20:23:53.589014230 +0800
+++ d/feeds/luci/applications/luci-app-ddns/root/usr/libexec/rpcd/luci.ddns	1970-01-01 08:00:00.000000000 +0800
@@ -1,340 +0,0 @@
-#!/usr/bin/env lua
-
-local json = require "luci.jsonc"
-local nixio = require "nixio"
-local fs   = require "nixio.fs"
-local UCI = require "luci.model.uci"
-local sys  = require "luci.sys"
-local util = require "luci.util"
-
-local ddns_package_path = "/usr/share/ddns"
-local luci_helper = "/usr/lib/ddns/dynamic_dns_lucihelper.sh"
-local srv_name    = "ddns-scripts"
-
--- convert epoch date to given format
-local function epoch2date(epoch, format)
-	if not format or #format < 2 then
-		local uci = UCI.cursor()
-		format    = uci:get("ddns", "global", "ddns_dateformat") or "%F %R"
-		uci:unload("ddns")
-	end
-	format = format:gsub("%%n", "<br />")	-- replace newline
-	format = format:gsub("%%t", "    ")	-- replace tab
-	return os.date(format, epoch)
-end
-
--- function to calculate seconds from given interval and unit
-local function calc_seconds(interval, unit)
-	if not tonumber(interval) then
-		return nil
-	elseif unit == "days" then
-		return (tonumber(interval) * 86400)	-- 60 sec * 60 min * 24 h
-	elseif unit == "hours" then
-		return (tonumber(interval) * 3600)	-- 60 sec * 60 min
-	elseif unit == "minutes" then
-		return (tonumber(interval) * 60)	-- 60 sec
-	elseif unit == "seconds" then
-		return tonumber(interval)
-	else
-		return nil
-	end
-end
-
-local methods = {
-	get_services_log = {
-		args = { service_name = "service_name" },
-		call = function(args)
-			local result = "File not found or empty"
-			local uci = UCI.cursor()
-
-			local dirlog = uci:get('ddns', 'global', 'ddns_logdir') or "/var/log/ddns"
-
-			-- Fallback to default logdir with unsecure path
-			if dirlog:match('%.%.%/') then dirlog = "/var/log/ddns" end
-
-			if args and args.service_name and fs.access("%s/%s.log" % { dirlog, args.service_name }) then
-				result = fs.readfile("%s/%s.log" % { dirlog, args.service_name })
-			end
-
-			uci.unload()
-
-			return { result = result }
-		end
-	},
-	get_services_status = {
-		call = function()
-			local uci = UCI.cursor()
-
-			local rundir = uci:get("ddns", "global", "ddns_rundir") or "/var/run/ddns"
-			local date_format = uci:get("ddns", "global", "ddns_dateformat")
-			local res = {}
-
-			uci:foreach("ddns", "service", function (s)
-				local ip, last_update, next_update
-				local section	= s[".name"]
-				if fs.access("%s/%s.ip" % { rundir, section }) then
-					ip = fs.readfile("%s/%s.ip" % { rundir, section })
-				else
-					local dnsserver	= s["dns_server"] or ""
-					local force_ipversion = tonumber(s["force_ipversion"] or 0)
-					local force_dnstcp = tonumber(s["force_dnstcp"] or 0)
-					local is_glue = tonumber(s["is_glue"] or 0)
-					local command = { luci_helper , [[ -]] }
-					local lookup_host = s["lookup_host"] or "_nolookup_"
-
-					if (use_ipv6 == 1) then command[#command+1] = [[6]] end
-					if (force_ipversion == 1) then command[#command+1] = [[f]] end
-					if (force_dnstcp == 1) then command[#command+1] = [[t]] end
-					if (is_glue == 1) then command[#command+1] = [[g]] end
-					command[#command+1] = [[l ]]
-					command[#command+1] = lookup_host
-					command[#command+1] = [[ -S ]]
-					command[#command+1] = section
-					if (#dnsserver > 0) then command[#command+1] = [[ -d ]] .. dnsserver end
-					command[#command+1] = [[ -- get_registered_ip]]
-					line = util.exec(table.concat(command))
-				end
-
-				local last_update = tonumber(fs.readfile("%s/%s.update" % { rundir, section } ) or 0)
-				local next_update, converted_last_update
-				local pid  = tonumber(fs.readfile("%s/%s.pid" % { rundir, section } ) or 0)
-
-				if pid > 0 and not nixio.kill(pid, 0) then
-					pid = 0
-				end
-
-				local uptime   = sys.uptime()
-
-				local force_seconds = calc_seconds(
-					tonumber(s["force_interval"]) or 72,
-					s["force_unit"] or "hours" )
-
-				local check_seconds = calc_seconds(
-					tonumber(s["check_interval"]) or 10,
-					s["check_unit"] or "minutes" )
-
-				if last_update > 0 then
-					local epoch = os.time() - uptime + last_update
-					-- use linux date to convert epoch
-					converted_last_update = epoch2date(epoch,date_format)
-					next_update = epoch2date(epoch + force_seconds + check_seconds)
-				end
-
-				if pid > 0 and ( last_update + force_seconds - uptime ) <= 0 then
-					next_update = "Verify"
-
-				-- run once
-				elseif force_seconds == 0 then
-					next_update = "Run once"
-
-				-- no process running and NOT enabled
-				elseif pid == 0 and s['enabled'] == '0' then
-					next_update  = "Disabled"
-
-				-- no process running and enabled
-				elseif pid == 0 and s['enabled'] ~= '0' then
-					next_update = "Stopped"
-				end
-
-				res[section] = {
-					ip = ip and ip:gsub("\n","") or nil,
-					last_update = last_update ~= 0 and converted_last_update or nil,
-					next_update = next_update or nil,
-					pid = pid or nil,
-				} 
-			end
-			)
-
-			uci:unload("ddns")
-
-			return res
-
-		end
-	},
-	get_ddns_state = {
-		call = function()
-			local ipkg = require "luci.model.ipkg"
-			local uci = UCI.cursor()
-			local dateformat = uci:get("ddns", "global", "ddns_dateformat") or "%F %R"
-			local services_mtime = fs.stat(ddns_package_path .. "/list", 'mtime')
-			uci:unload("ddns")
-			local ver, srv_ver_cmd
-			local res = {}
-
-			if ipkg then
-				ver = ipkg.info(srv_name)[srv_name].Version
-			else
-				srv_ver_cmd = luci_helper .. " -V | awk {'print $2'} "
-				ver = util.exec(srv_ver_cmd)
-			end
-
-			res['_version'] = ver and #ver > 0 and ver or nil
-			res['_enabled'] = sys.init.enabled("ddns")
-			res['_curr_dateformat'] = os.date(dateformat)
-			res['_services_list'] = services_mtime and os.date(dateformat, services_mtime) or 'NO_LIST'
-
-			return res
-		end
-	},
-	get_env = {
-		call = function()
-			local res = {}
-			local cache = {}
-
-			local function has_wget()
-				return (sys.call( [[command -v wget >/dev/null 2>&1]] ) == 0)
-			end
-
-			local function has_wgetssl()
-				if cache['has_wgetssl'] then return cache['has_wgetssl'] end
-				local res = has_wget() and (sys.call( [[wget --version | grep -qF +https >/dev/null 2>&1]] ) == 0)
-				cache['has_wgetssl'] = res
-				return res
-			end
-
-			local function has_curlssl()
-				return (sys.call( [[$(command -v curl) -V 2>&1 | grep -qF "https"]] ) == 0)
-			end
-
-			local function has_fetch()
-				if cache['has_fetch'] then return cache['has_fetch'] end
-				local res = (sys.call( [[command -v uclient-fetch >/dev/null 2>&1]] ) == 0)
-				cache['has_fetch'] = res
-				return res
-			end
-
-			local function has_fetchssl()
-				return fs.access("/lib/libustream-ssl.so")
-			end
-
-			local function has_curl()
-				if cache['has_curl'] then return cache['has_curl'] end
-				local res = (sys.call( [[command -v curl >/dev/null 2>&1]] ) == 0)
-				cache['has_curl'] = res
-				return res
-			end
-
-			local function has_curlpxy()
-				return (sys.call( [[grep -i "all_proxy" /usr/lib/libcurl.so* >/dev/null 2>&1]] ) == 0)
-			end
-
-			local function has_bbwget()
-				return (sys.call( [[$(command -v wget) -V 2>&1 | grep -iqF "busybox"]] ) == 0)
-			end
-
-			res['has_wget'] = has_wget() or false
-			res['has_curl'] = has_curl() or false
-
-			res['has_ssl'] = has_wgetssl() or has_curlssl() or (has_fetch() and has_fetchssl()) or false
-			res['has_proxy'] = has_wgetssl() or has_curlpxy() or has_fetch() or has_bbwget or false
-			res['has_forceip'] = has_wgetssl() or has_curl() or has_fetch() or false
-			res['has_bindnet'] = has_curl() or has_wgetssl() or false
-
-			local function has_bindhost()
-				if cache['has_bindhost'] then return cache['has_bindhost'] end
-				local res = (sys.call( [[command -v host >/dev/null 2>&1]] ) == 0)
-				if res then
-					cache['has_bindhost'] = res
-					return true
-				end
-				res = (sys.call( [[command -v khost >/dev/null 2>&1]] ) == 0)
-				if res then
-					cache['has_bindhost'] = res
-					return true
-				end
-				res = (sys.call( [[command -v drill >/dev/null 2>&1]] ) == 0)
-				if res then
-					cache['has_bindhost'] = res
-					return true
-				end
-				cache['has_bindhost'] = false
-				return false
-			end
-
-			res['has_bindhost'] = cache['has_bindhost'] or has_bindhost() or false
-
-			local function has_hostip()
-				return (sys.call( [[command -v hostip >/dev/null 2>&1]] ) == 0)
-			end
-
-			local function has_nslookup()
-				return (sys.call( [[command -v nslookup >/dev/null 2>&1]] ) == 0)
-			end
-
-			res['has_dnsserver'] = cache['has_bindhost'] or has_nslookup() or has_hostip() or has_bindhost() or false
-
-			local function check_certs()
-				local _, v = fs.glob("/etc/ssl/certs/*.crt")
-				if ( v == 0 ) then _, v = fs.glob("/etc/ssl/certs/*.pem") end
-				return (v > 0)
-			end
-
-			res['has_cacerts'] = check_certs() or false
-			
-			res['has_ipv6'] = (fs.access("/proc/net/ipv6_route") and fs.access("/usr/sbin/ip6tables"))
-
-			return res
-		end
-	}
-}
-
-local function parseInput()
-	local parse = json.new()
-	local done, err
-
-	while true do
-		local chunk = io.read(4096)
-		if not chunk then
-			break
-		elseif not done and not err then
-			done, err = parse:parse(chunk)
-		end
-	end
-
-	if not done then
-		print(json.stringify({ error = err or "Incomplete input" }))
-		os.exit(1)
-	end
-
-	return parse:get()
-end
-
-local function validateArgs(func, uargs)
-	local method = methods[func]
-	if not method then
-		print(json.stringify({ error = "Method not found" }))
-		os.exit(1)
-	end
-
-	if type(uargs) ~= "table" then
-		print(json.stringify({ error = "Invalid arguments" }))
-		os.exit(1)
-	end
-
-	uargs.ubus_rpc_session = nil
-
-	local k, v
-	local margs = method.args or {}
-	for k, v in pairs(uargs) do
-		if margs[k] == nil or
-		   (v ~= nil and type(v) ~= type(margs[k]))
-		then
-			print(json.stringify({ error = "Invalid arguments" }))
-			os.exit(1)
-		end
-	end
-
-	return method
-end
-
-if arg[1] == "list" then
-	local _, method, rv = nil, nil, {}
-	for _, method in pairs(methods) do rv[_] = method.args or {} end
-	print((json.stringify(rv):gsub(":%[%]", ":{}")))
-elseif arg[1] == "call" then
-	local args = parseInput()
-	local method = validateArgs(arg[2], args)
-	local result, code = method.call(args)
-	print((json.stringify(result):gsub("^%[%]$", "{}")))
-	os.exit(code or 0)
-end
diff -uprN c/feeds/luci/applications/luci-app-ddns/root/usr/share/luci/menu.d/luci-app-ddns.json d/feeds/luci/applications/luci-app-ddns/root/usr/share/luci/menu.d/luci-app-ddns.json
--- c/feeds/luci/applications/luci-app-ddns/root/usr/share/luci/menu.d/luci-app-ddns.json	2024-01-06 20:23:53.589014230 +0800
+++ d/feeds/luci/applications/luci-app-ddns/root/usr/share/luci/menu.d/luci-app-ddns.json	1970-01-01 08:00:00.000000000 +0800
@@ -1,13 +0,0 @@
-{
-	"admin/services/ddns": {
-		"title": "Dynamic DNS",
-		"order": 59,
-		"action": {
-			"type": "view",
-			"path": "ddns/overview"
-		},
-		"depends": {
-			"acl": [ "luci-app-ddns" ]
-		}
-	}
-}
diff -uprN c/feeds/luci/applications/luci-app-ddns/root/usr/share/rpcd/acl.d/luci-app-ddns.json d/feeds/luci/applications/luci-app-ddns/root/usr/share/rpcd/acl.d/luci-app-ddns.json
--- c/feeds/luci/applications/luci-app-ddns/root/usr/share/rpcd/acl.d/luci-app-ddns.json	2024-01-06 20:23:53.585014376 +0800
+++ d/feeds/luci/applications/luci-app-ddns/root/usr/share/rpcd/acl.d/luci-app-ddns.json	1970-01-01 08:00:00.000000000 +0800
@@ -1,24 +0,0 @@
-{
-	"luci-app-ddns": {
-		"description": "Grant access to ddns procedures",
-		"read": {
-			"ubus": {
-				"luci.ddns": [ "get_services_status", "get_ddns_state", "get_env", "get_services_log" ],
-				"luci": [ "setInitAction" ]
-			},
-			"file": {
-				"/usr/share/ddns/default": [ "list" ],
-				"/usr/share/ddns/default/*": [ "read" ],
-				"/usr/share/ddns/custom": [ "list" ],
-				"/usr/share/ddns/custom/*": [ "read" ],
-				"/usr/share/ddns/list": [ "read" ],
-				"/usr/bin/ddns": [ "exec" ],
-				"/usr/lib/ddns/dynamic_dns_lucihelper.sh": [ "exec" ]
-			},
-			"uci": [ "ddns" ]
-		},
-		"write": {
-			"uci": [ "ddns" ]
-		}
-	}
-}
diff -uprN c/feeds/luci/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/zones.js d/feeds/luci/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/zones.js
--- c/feeds/luci/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/zones.js	2024-01-06 20:23:53.609013501 +0800
+++ d/feeds/luci/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/zones.js	2024-01-06 20:24:00.700754981 +0800
@@ -56,6 +56,11 @@ return view.extend({
 		};
 
 		o = s.option(form.Flag, 'drop_invalid', _('Drop invalid packets'));
+		
+		o = s.option(form.ListValue, 'fullcone', _('Enable FullCone NAT'));
+		o.value('0', _('Disable'));
+		o.value('1', _('Compatible Mode'));
+		o.value('2', _('High Performing Mode'));
 
 		var p = [
 			s.option(form.ListValue, 'input', _('Input')),
diff -uprN c/feeds/luci/applications/luci-app-firewall/po/zh_Hans/firewall.po d/feeds/luci/applications/luci-app-firewall/po/zh_Hans/firewall.po
--- c/feeds/luci/applications/luci-app-firewall/po/zh_Hans/firewall.po	2024-01-06 20:23:53.589014230 +0800
+++ d/feeds/luci/applications/luci-app-firewall/po/zh_Hans/firewall.po	2024-01-06 20:24:00.692755273 +0800
@@ -1204,3 +1204,15 @@ msgstr "未指定"
 #: applications/luci-app-firewall/htdocs/luci-static/resources/tools/firewall.js:338
 msgid "valid firewall mark"
 msgstr "有效的防火墙标记"
+
+msgid "Enable FullCone NAT"
+msgstr "启用FullCone-NAT"
+
+msgid "Disable"
+msgstr "禁用"
+
+msgid "Compatible Mode"
+msgstr "兼容模式"
+
+msgid "High Performing Mode"
+msgstr "高性能模式"
